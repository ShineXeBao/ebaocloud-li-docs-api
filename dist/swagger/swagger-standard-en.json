{
  "swagger": "2.0",
  "info": {
    "version": "1.1",
    "title": "eBaoCloud LI OpenAPI",
    "termsOfService": "http://api.ebaocloud.life/",
    "contact": {
      "email": "liliang.zhu@ebaotech.com"
    },
    "description": "This document is the API specification for the eBaoCloud Life part. To practice and run the APIs in this document, you need to apply an eBaoCloud tenant account(starting from a sandbox account instead of production account) first.<br>\nContact liliang.zhu@ebaotech.com for more information and trial using.\n\n# Built on\nWed Mar 14 2018, 17:43:36 +08:00\n\n# Versioning\nAPI version| Date  |Comments\n--|---|--\n0.5  | 2017-06-13  | Initial version\n0.6  | 2017-06-19  | Add new category and readme\n0.6.5 | 2017-06-29  | oauth2 document, Chinese version document\n0.8  | 2017-07-07  | oauth2 launch\n0.8.5 | 2017-07-31 | Enhancement in product services\n0.9 | 2017-08-25 | Add limits related APIs (age, premium / SA and term )\n0.9.5 | 2017-09-05 | Add new service for e-policy downloading\n0.9.6 | 2017-09-13 | Add field: extra premium\n0.9.7 | 2017-11-09 | Parameter sequence, add some new function in product\n0.9.8 | 2017-11-22 | Mortgage product support\n1.0 | 2017-12-19 | Product model enhancement\n\n# Authentication\n\n## Overview\n\neBaoCloud offers 3rd party applications the ability to issue authenticated requests on behalf of the eBaoCloud itself. eBaoCloud's implementation is based on the [Client Credentials Grant](http://tools.ietf.org/html/rfc6749#section-4.4) flow of the [oauth 2 specification](http://tools.ietf.org/html/rfc6749).\n\n## Auth Flow\n\nThe oauth2 / token authentication flow follows these 3 major steps:\n\n1. An application (backend) encodes its consumer key and secret (provided by eBaoCloud as an authorized vender) into a specially encoded set of credentials.\n2. An application (backend) makes a request to the POST oauth2 / token endpoint to exchange these credentials for a bearer token.\n3. When accessing the REST API, the application (the APP or website) uses the bearer token to authenticate.\n\n![Auth Flow](/assets/oauth.png)\n\n## Step by step\n\n* Send request to auth end point\n\n```js\nPOST: /cas/ebao/v1/json/tickets\nBody: {\"username\":\"name\", \"password\":\"pwd\"}\nResponse: {\"access_token\": \"xxxx\"}\n```\n\n* Send request with access_token in header\n\n```js\nPOST: /rest/products\nHeader: {\n  \"authorization\":\"Bearer \"+access_token,\n  \"X-ebao-tenant-id\": \"tenant-id\"\n}\n```\n\n## End Points\n#### eBaoCloud in China\n* Portal: https://ebaocloud.com.cn/\n* Sandbox:\n  * auth / token: https://sandbox.ebaocloud.com.cn/cas/ebao/v1/json/tickets\n  * API access: https://sandbox.gw.ebaocloud.com.cn/eBao/1.0/\n* Production:\n  * auth / token: https://ebaocloud.com.cn/cas/ebao/v1/json/tickets\n  * API access: https://gw.ebaocloud.com.cn/eBao/1.0/\n\n#### eBaoCloud in Singapore\n  * Portal: https://sg.ebaocloud.com/\n  * Sandbox:\n    * auth / token: https://sandbox.sg.ebaocloud.com/cas/ebao/v1/json/tickets\n    * API access: https://sandbox.gw.sg.ebaocloud.com/eBao/1.0/\n  * Production:\n    * auth / token: https://sg.ebaocloud.com/cas/ebao/v1/json/tickets\n    * API access: https://gw.sg.ebaocloud.com/eBao/1.0/\n\n\n#### eBaoCloud in Sri Lanka\n  * Portal: https://lk.ebaocloud.com/\n  * Sandbox:\n    * auth / token: https://sandbox.lk.ebaocloud.com/cas/ebao/v1/json/tickets\n    * API access: https://sandbox.gw.lk.ebaocloud.com/eBao/1.0/\n  * Production:\n    * auth / token: https://lk.ebaocloud.com/cas/ebao/v1/json/tickets\n    * API access: https://gw.lk.ebaocloud.com/eBao/1.0/\n\n## Sample\n\n#### Request auth from application\n\n```bash\ncurl --request POST \\\n  --url https://url/cas/ebao/v1/json/tickets \\\n  --header 'content-type: application/json' \\\n  --header 'X-ebao-tenant-id: tenant-id' \\\n  --data '{\\n \\n \"username\":\"site.admin\",\\n \"password\":\"adminPWD!\"\\n}'\n```\n\nNote:\n. the **X-ebao-tenant-id** is the unique id provided by eBaoCloud to identify the tenant.\n. the **username** and **password** are provided by eBaoCloud when you registered as an authorized vendor.\n\n\n#### Response from API Gateway\n\n* Success\n\n```js\n{\n\"access_token\" : \"TGT-233-e7Zuc5FlSAa0SShO3B1f2iugYzRQGQrSSoGwAi0VnWbnBNDwHg\"\n}\n```\n\n* Failed\n\n```js\n{\n\"access_token\" : null\n}\n```\n\n#### App call (Java code sample)\n\n```java\nHttpResponse<String> response = Unirest.post(url) // url：the UAT/product URL\n  .header(\"content-type\", \"application/json\") // application/json\n  .header(\"authorization\", \"Bearer \" + accessToken) // oauth2 access token：the accessToken\n  .header(\"X-ebao-tenant-id\", \"tenant-id\")\n  .body(body) // body: http body\n  .asString();\n```\n\n## Others\n\n### Tokens are passwords\n\nKeep in mind that the consumer key & secret, bearer token credentials, and the bearer token itself grant access to make requests on behalf of an application. These values should be considered as sensitive as passwords, and must not be shared or distributed to untrusted parties.\n\n### SSL required\n\nAll requests (both to obtain and use the tokens) **must use** HTTPS endpoints.\n"
  },
  "host": "sandbox.gw.ebaocloud.com.cn",
  "basePath": "/eBao/1.0/",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "tags": [
    {
      "name": "Product"
    },
    {
      "name": "Proposal"
    }
  ],
  "definitions": {
    "SalesCategoryResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        },
        "messages": {
          "type": "array",
          "description": "Business failure reason description list node",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listSalesCategory": {
          "type": "array",
          "description": "Product sales category",
          "items": {
            "$ref": "#/definitions/ProductSalesCategory"
          }
        }
      }
    },
    "ProductSumAssuredResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "productSumAssured": {
          "description": "SA limit enquire result",
          "$ref": "#/definitions/ProductSumAssured"
        }
      }
    },
    "CalculateInsured": {
      "type": "object",
      "required": [
        "gender",
        "orderId"
      ],
      "properties": {
        "age": {
          "type": "integer",
          "format": "int32",
          "example": 17,
          "description": "Policy holder's age on application date. At least capture one of the age or birthday.  When have both age and birthday, using birthday as the calculation base."
        },
        "gender": {
          "type": "string",
          "example": "M",
          "description": "Insured's sex, M - male;<br>F - female",
          "enum": [
            "M",
            "F"
          ]
        },
        "birthdate": {
          "type": "string",
          "example": "1999-10-16",
          "description": "Insured's birthday, non-empty, date format: yyyy-MM-dd"
        },
        "smoking": {
          "type": "string",
          "example": "Y",
          "description": "Whether smoking<br>Y - yes;<br>N - no<br>By default is no smoking",
          "enum": [
            "Y",
            "N"
          ]
        },
        "occupationCode": {
          "type": "integer",
          "format": "int32",
          "example": 10001,
          "description": "Occupation code, provide by insurer officially. For some product, this field is compulsory"
        },
        "occupationClass": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Occupation level"
        },
        "medicalIndi": {
          "type": "string",
          "example": "Y",
          "description": "Whether there is medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        },
        "socialSecurityIndi": {
          "type": "string",
          "example": "Y",
          "description": "Whether there is social medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        },
        "orderId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Insured sequence, for only one insured, this number is 1"
        },
        "extFields": {
          "type": "object",
          "description": "Extended field"
        }
      }
    },
    "CalculateFund": {
      "type": "object",
      "required": [
        "assignRate",
        "fundCode",
        "premType"
      ],
      "properties": {
        "fundCode": {
          "type": "string",
          "example": "F001",
          "description": "Fund code"
        },
        "assignRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Fund assign ratio"
        },
        "premType": {
          "type": "string",
          "example": "2: regular premium; 3: regular topup; 4: ad-hoc topup",
          "description": "Fee type for investment product"
        },
        "extFields": {
          "type": "object",
          "description": "Extended field"
        }
      }
    },
    "ProductPackageInfo": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "packageCode": {
          "type": "string",
          "description": "Product package code"
        },
        "packageName": {
          "type": "string",
          "description": "Product package name"
        },
        "moneyId": {
          "type": "integer",
          "format": "int64",
          "description": "Product package name"
        },
        "description": {
          "type": "string",
          "description": "Product package description"
        },
        "specialClause": {
          "type": "string",
          "description": "Package clauses for special usage"
        },
        "pricingMethod": {
          "type": "string",
          "description": "Premiums calculation method<br>0 - premium/SA by the user input<br>1 - products sold by the unit<br>2 - calculate premiums base on sum assured, but also allows the agreement premium<br>3 - products sold under the plan or unit<br>4 - products are only allowed to sell according to plan<br>5 - according to the premium , But also allow the agreement premium<br>6 - only to allow the sum assured to premium but also allow the agreement premium<br>7 - only allow premiums to sum assured<br>8 - both sum assured to premium or sum assured to premium"
        },
        "unitPremium": {
          "type": "integer",
          "format": "int64",
          "description": "Unit premium"
        },
        "unitAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Unit SA"
        },
        "minAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Allowed minimum SA"
        },
        "maxAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Allowed maximum SA"
        },
        "baseAmount": {
          "type": "integer",
          "format": "int64",
          "description": "Base SA"
        },
        "minPremium": {
          "type": "integer",
          "format": "int64",
          "description": "Allowed minimum premium"
        },
        "maxPremium": {
          "type": "integer",
          "format": "int64",
          "description": "Allowed maximum premium"
        },
        "minAgeUnit": {
          "type": "string",
          "description": "Allowed minimum age (unit)"
        },
        "minAge": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed minimum age"
        },
        "maxAgeUnit": {
          "type": "string",
          "description": "Allowed maximum age (unit)"
        },
        "maxAge": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed maximum age"
        },
        "minPhAge": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed minimum policy holder's age"
        },
        "maxPhAge": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed maximum policy holder's age"
        },
        "productPkgTerms": {
          "type": "array",
          "description": "Basic package product terms",
          "items": {
            "$ref": "#/definitions/ProductPackageTerm"
          }
        },
        "packageId": {
          "type": "integer",
          "format": "int64",
          "description": "Product package Id"
        },
        "productPkgProducts": {
          "type": "array",
          "description": "Basic package product",
          "items": {
            "$ref": "#/definitions/ProductPkgProduct"
          }
        },
        "productPkgProductMatrixs": {
          "type": "array",
          "description": "Basic package product's matrix relationship",
          "items": {
            "$ref": "#/definitions/ProductPkgProductMatrix"
          }
        }
      }
    },
    "ProductTermResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "productTerm": {
          "description": "Term limit",
          "$ref": "#/definitions/ProductTerm"
        }
      }
    },
    "CalculatePremium": {
      "type": "object",
      "required": [
        "paymentFreq"
      ],
      "properties": {
        "sumAssured": {
          "type": "number",
          "format": "double",
          "example": 1000000,
          "description": "SA, when the premium calculation is from SA to premium."
        },
        "premium": {
          "type": "number",
          "format": "double",
          "example": 2000,
          "description": "Premium, only for the calculate SA from premium"
        },
        "unit": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Unit, only apply to the product which sales by unit"
        },
        "benefitLevel": {
          "type": "string",
          "example": "1",
          "description": "Benefit level, only apply to the products which sales by benefit level"
        },
        "paymentFreq": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Pay frequency<br>1 - yearly payment<br>2 - half yearly payment<br>3 - quarterly payment<br>4 - monthly payment<br>5 - single premium",
          "enum": [
            1,
            2,
            3,
            4,
            5
          ]
        },
        "extFields": {
          "type": "object",
          "description": "Extended field"
        }
      }
    },
    "ProductFundPremiumLimit": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fundCode": {
          "type": "string",
          "description": "Fund code"
        },
        "paymentMethod": {
          "type": "integer",
          "format": "int32",
          "description": "Product fund premium limit related factor: payment method"
        },
        "minAdhocTopupPrem": {
          "type": "integer",
          "format": "int64",
          "description": "Allowed minimum ad-hoc top-up amount"
        },
        "minRegulaTopupPrem": {
          "type": "integer",
          "format": "int64",
          "description": "Allowed minimum regular top-up amount"
        },
        "paymentFrequency": {
          "type": "string",
          "description": "Product fund premium limit related factor: payment frequency"
        },
        "minInitialPrem": {
          "type": "integer",
          "format": "int64",
          "description": "Minimum initial premium"
        },
        "maxInitialPrem": {
          "type": "integer",
          "format": "int64",
          "description": "Allowed maximum initial premium"
        }
      }
    },
    "AgeLimit": {
      "type": "object",
      "required": [
        "coveragePeriod"
      ],
      "properties": {
        "benefitLevel": {
          "type": "string",
          "description": "Age range related factor: benefit level"
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "minAgeUnit": {
          "type": "string",
          "description": "Age unit<br>1 - year<br>5 - day<br>4 - month"
        },
        "minAge": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum age allowed"
        },
        "maxAgeUnit": {
          "type": "string",
          "description": "Age unit<br>1 - year<br>5 - day<br>4 - month"
        },
        "maxAge": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum age allowed"
        },
        "chargePeriod": {
          "type": "string",
          "example": "2",
          "description": "Age range related factor: charge period",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Age range related factor: charge year"
        },
        "coveragePeriod": {
          "type": "string",
          "example": "2",
          "description": "Age range related factor: coverage period",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "coverageYear": {
          "type": "integer",
          "format": "int32",
          "example": 20,
          "description": "Age range related factor: coverage year"
        },
        "annuityStartPeriod": {
          "type": "string",
          "description": "Age range related factor: annuity payment period"
        },
        "annuityStartYear": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: annuity payment year"
        },
        "annuityEndPeriod": {
          "type": "string",
          "description": "Age range related factor: annuity payment end period"
        },
        "annuityEndYear": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: annuity payment end year"
        },
        "annuityPayEnsure": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: guaranteed annuity payment year"
        },
        "coverageYearMax": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: maximum coverage year"
        },
        "annuityStartYearMax": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: maximum annuity payment year"
        },
        "annuityEndYearMax": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: maximum annuity payment end year"
        },
        "paymentMethod": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: payment method"
        },
        "gender": {
          "type": "string",
          "description": "Age range related factor: gender"
        },
        "paymentFrequency": {
          "type": "string",
          "description": "Age range related factor: payment  frequency"
        },
        "lowSa": {
          "type": "number",
          "format": "double",
          "description": "Age range related factor: minimum SA"
        },
        "highSa": {
          "type": "number",
          "format": "double",
          "description": "Age range related factor: maximum SA"
        },
        "chargeYearMax": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: maximum charge year"
        }
      }
    },
    "CalculatePolicy": {
      "type": "object",
      "required": [
        "coverages"
      ],
      "properties": {
        "inceptionDate": {
          "type": "string",
          "example": "2017-01-01",
          "description": "Policy effective date, date format: (YYYY-MM-DD)"
        },
        "coverages": {
          "type": "array",
          "description": "Coverage list",
          "items": {
            "$ref": "#/definitions/CalculateCoverage"
          }
        },
        "extFields": {
          "type": "object",
          "description": "Extended field"
        }
      }
    },
    "IllustrationRequest": {
      "type": "object",
      "required": [
        "calculatePolicy"
      ],
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "calculatePolicy": {
          "description": "Policy information for the illustration",
          "$ref": "#/definitions/CalculatePolicy"
        },
        "performanceLevel": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Performance level of the illustration<br>1 - Low<br>2 - Middle<br>3 - High"
        }
      }
    },
    "AgeLimitCon": {
      "type": "object",
      "required": [
        "coveragePeriod",
        "productCode"
      ],
      "properties": {
        "benefitLevel": {
          "type": "string",
          "example": "1",
          "description": "Age range related factor: benefit level"
        },
        "sumAssured": {
          "type": "number",
          "format": "double",
          "example": 100000,
          "description": "Age range related factor: SA"
        },
        "gender": {
          "type": "string",
          "example": "F",
          "description": "Age range related factor: gender"
        },
        "premiumFrequency": {
          "type": "string",
          "example": "1",
          "description": "Age range related factor: payment  frequency"
        },
        "productCode": {
          "type": "string",
          "example": "ABC",
          "description": "Product code"
        },
        "chargePeriod": {
          "type": "string",
          "example": "2",
          "description": "Age range related factor: charge period",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Age range related factor: charge year"
        },
        "coveragePeriod": {
          "type": "string",
          "example": "2",
          "description": "Age range related factor: coverage period",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "coverageYear": {
          "type": "integer",
          "format": "int32",
          "example": 20,
          "description": "Age range related factor: coverage year"
        },
        "annuityStartPeriod": {
          "type": "string",
          "example": "1",
          "description": "Age range related factor: annuity payment period"
        },
        "annuityStartYear": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Age range related factor: annuity payment year"
        },
        "annuityEndPeriod": {
          "type": "string",
          "example": "1",
          "description": "Age range related factor: annuity payment end period"
        },
        "annuityEndYear": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Age range related factor: annuity payment end year"
        },
        "annuityPayEnsure": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Age range related factor: guaranteed annuity payment year"
        },
        "extFields": {
          "type": "object",
          "description": "Extended field"
        }
      }
    },
    "Bonus": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "cashBonus": {
          "type": "boolean",
          "example": false,
          "description": "Whether there is a cash bonus"
        },
        "cashBonusVestYear": {
          "type": "integer",
          "format": "int32",
          "description": "Cash bonus must stay in the insurance company after years of investment before they can receive"
        },
        "cashBonusUnitAmount": {
          "type": "number",
          "format": "double",
          "description": "Cash bonus unit"
        },
        "cashBonusOptions": {
          "type": "array",
          "description": "Allowed cash bonus option<br>1 - Get it now<br>2 - Pay with cash bonus premium<br>3 - There is an insurance company account",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PremiumLimit": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "minPrem": {
          "type": "integer",
          "format": "int64",
          "description": "Premium limits related factor: minimum premium"
        },
        "maxPrem": {
          "type": "integer",
          "format": "int64",
          "description": "Premium limits related factor: maximum premium"
        },
        "paymentMethod": {
          "type": "integer",
          "format": "int32",
          "description": "Premium limits related factor: payment method"
        },
        "paymentFrequency": {
          "type": "string",
          "description": "Premium limits related factor: payment frequency"
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "description": "Premium limits related factor: currency"
        },
        "minAge": {
          "type": "integer",
          "format": "int32",
          "description": "Premium limits related factor: minimum age"
        },
        "maxAge": {
          "type": "integer",
          "format": "int32",
          "description": "Premium limits related factor: maximum age"
        },
        "chargePeriod": {
          "type": "string",
          "example": "2",
          "description": "Premium limits related factor: charge period",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Premium limits related factor: charge year"
        }
      }
    },
    "CalculatePremSAResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        },
        "messages": {
          "type": "array",
          "description": "Business failure reason description list node",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "calculatePolicyResult": {
          "description": "Calculation result",
          "$ref": "#/definitions/CalculatePolicyResult"
        }
      }
    },
    "CalculatePolicyResult": {
      "type": "object",
      "properties": {
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Install premium"
        },
        "annualPrem": {
          "type": "number",
          "format": "double",
          "description": "Total annual premium"
        },
        "policyFee": {
          "type": "number",
          "format": "double",
          "description": "Policy fee"
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Inception date"
        },
        "calculateCoverageResults": {
          "type": "array",
          "description": "The detailed calculation of the results of the calculation",
          "items": {
            "$ref": "#/definitions/CalculateCoverageResult"
          }
        }
      }
    },
    "PackagesResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listBasicProductPackageInfo": {
          "type": "array",
          "description": "Product package basic information",
          "items": {
            "$ref": "#/definitions/BasicProductPackageInfo"
          }
        }
      }
    },
    "Annuity": {
      "type": "object",
      "properties": {
        "annuityStartPeriod": {
          "type": "string",
          "description": "Annuity payment start period type<br>1 - immediately<br>2 - From the next policy anniversary date <br>3 - After few years (policy anniversary date)<br>4 - From the birthday"
        },
        "annuityStartYear": {
          "type": "integer",
          "format": "int64",
          "description": "Annuity start year or start age"
        },
        "annuityEndPeriod": {
          "type": "string",
          "description": "Annuity payment end period type<br>1 - Few years<br>2 - Till certain age<br>3 - Whole life"
        },
        "annuityEndYear": {
          "type": "integer",
          "format": "int64",
          "description": "Annuity end year or end age"
        },
        "extFields": {
          "type": "object",
          "description": "Extended field"
        }
      }
    },
    "ProductResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        },
        "messages": {
          "type": "array",
          "description": "Business failure reason description list node",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "productInfo": {
          "description": "Product details",
          "$ref": "#/definitions/ProductInfo"
        }
      }
    },
    "ProductPremiumResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "productPremium": {
          "description": "Premium limit enquire result",
          "$ref": "#/definitions/ProductPremium"
        }
      }
    },
    "TermLimit": {
      "type": "object",
      "required": [
        "coveragePeriod"
      ],
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "chargePeriod": {
          "type": "string",
          "example": "2",
          "description": "Charge period",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Charge year"
        },
        "coveragePeriod": {
          "type": "string",
          "example": "2",
          "description": "Coverage period",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "coverageYear": {
          "type": "integer",
          "format": "int32",
          "example": 20,
          "description": "Coverage year"
        },
        "annuityStartPeriod": {
          "type": "string",
          "description": "Annuity payment end period"
        },
        "annuityStartYear": {
          "type": "integer",
          "format": "int32",
          "description": "Annuity payment end year"
        },
        "annuityEndPeriod": {
          "type": "string",
          "description": "Annuity payment end period"
        },
        "annuityEndYear": {
          "type": "integer",
          "format": "int32",
          "description": "Annuity payment end year"
        },
        "annuityPayEnsure": {
          "type": "integer",
          "format": "int32",
          "description": "Annuity guarantee pay year"
        }
      }
    },
    "TopupWithdrawnPlan": {
      "type": "object",
      "required": [
        "amount",
        "endYear",
        "premType",
        "startYear"
      ],
      "properties": {
        "premType": {
          "type": "string",
          "example": "3: regular topup; 7: partial withdrawn; 4: ad-hoc topup",
          "description": "Fee type for investment product"
        },
        "startYear": {
          "type": "integer",
          "format": "int64",
          "example": 2,
          "description": "Start policy year"
        },
        "endYear": {
          "type": "integer",
          "format": "int64",
          "example": 5,
          "description": "Top-up and withdraw plan: ending year"
        },
        "amount": {
          "type": "number",
          "format": "double",
          "example": 100000,
          "description": "Amount"
        },
        "extFields": {
          "type": "object",
          "description": "Extended field"
        }
      }
    },
    "ProductsResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        },
        "messages": {
          "type": "array",
          "description": "Business failure reason description list node",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listProductBasicInformation": {
          "type": "array",
          "description": "Product basic information",
          "items": {
            "$ref": "#/definitions/ProductBasicInformation"
          }
        }
      }
    },
    "ProductRatingParametersResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "ratingParameters": {
          "type": "array",
          "description": "Rating relation parameter",
          "items": {
            "type": "string"
          }
        },
        "ratingParameterType": {
          "type": "string",
          "description": "Rating relation parameter type"
        }
      }
    },
    "ProductPkgProduct": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "packageId": {
          "type": "integer",
          "format": "int64",
          "description": "Product package Id"
        },
        "productId": {
          "type": "integer",
          "format": "int64",
          "description": "Product ID"
        },
        "optional": {
          "type": "string",
          "description": "Is optional"
        },
        "saProportion": {
          "type": "number",
          "format": "double",
          "description": "SA proportion"
        },
        "premiumProportion": {
          "type": "number",
          "format": "double",
          "description": "Premium proportion"
        },
        "amount": {
          "type": "number",
          "format": "double",
          "description": "Sum assured (SA)"
        },
        "premium": {
          "type": "number",
          "format": "double",
          "description": "Premium"
        },
        "calcMethod": {
          "type": "string",
          "description": "Premium / SA calculation method"
        },
        "benefitLevel": {
          "type": "string",
          "description": "Benefit level, only apply to the products which sales by benefit level"
        },
        "freeIndi": {
          "type": "string",
          "description": "Free rider indicator"
        },
        "minAmount": {
          "type": "number",
          "format": "double",
          "description": "Allowed minimum SA"
        },
        "maxAmount": {
          "type": "number",
          "format": "double",
          "description": "Allowed maximum SA"
        },
        "minPremium": {
          "type": "number",
          "format": "double",
          "description": "Allowed minimum premium"
        },
        "maxPremium": {
          "type": "number",
          "format": "double",
          "description": "Allowed maximum premium"
        },
        "baseAmount": {
          "type": "number",
          "format": "double",
          "description": "Basic sum assured (SA)"
        }
      }
    },
    "Illustrations": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "illustrationResultList": {
          "type": "array",
          "description": "Illustration results list",
          "items": {
            "$ref": "#/definitions/IllustrationResult"
          }
        }
      }
    },
    "MainInformation": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "productName": {
          "type": "string",
          "description": "Product name"
        },
        "mainPlan": {
          "type": "string",
          "description": "Whether it is the main plan"
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "description": "Currency, non empty<br>1 - CNY"
        },
        "orgId": {
          "type": "integer",
          "format": "int64",
          "description": "The organization this product belongs to"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Product sales start date"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "Product sales end date"
        },
        "salesCategory": {
          "description": "Product sales category",
          "$ref": "#/definitions/ProductSalesCategory"
        },
        "productDescription": {
          "type": "string",
          "description": "Product description"
        },
        "productAbbreviation": {
          "type": "string",
          "description": "Product introduction"
        },
        "ally": {
          "type": "string",
          "description": "Is joint life product<br>1 - Yes<br>0 - No"
        },
        "indexIndi": {
          "type": "string",
          "description": "Indexation indicator"
        },
        "spouseWaiver": {
          "type": "string",
          "description": "if spouse waiver<br>Y - Yes<br>N - No"
        },
        "familyType": {
          "type": "string",
          "description": "Family product type"
        },
        "payerWop": {
          "type": "string",
          "description": "if payer waiver<br>Y - Yes<br>N - No"
        }
      }
    },
    "CalculatePremSARequest": {
      "type": "object",
      "required": [
        "calculatePolicy"
      ],
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "calculatePolicy": {
          "description": "Insurance premium calculation data",
          "$ref": "#/definitions/CalculatePolicy"
        }
      }
    },
    "ProductCoverMultiple": {
      "type": "object",
      "properties": {
        "coverMultipleItems": {
          "type": "array",
          "description": "Cover multiple item",
          "items": {
            "$ref": "#/definitions/CoverMultipleItem"
          }
        }
      }
    },
    "CoverMultipleItem": {
      "type": "object",
      "properties": {
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "ageRange": {
          "type": "string",
          "description": "Age range"
        },
        "termRange": {
          "type": "string",
          "description": "Term range"
        },
        "minValue": {
          "type": "number",
          "format": "double",
          "description": "Allowed minimum value"
        },
        "maxValue": {
          "type": "number",
          "format": "double",
          "description": "Allowed maximum value"
        }
      }
    },
    "PackageResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "productPackageInfo": {
          "description": "Product package details",
          "$ref": "#/definitions/ProductPackageInfo"
        }
      }
    },
    "ProductPackageTerm": {
      "type": "object",
      "required": [
        "coveragePeriod"
      ],
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "packageId": {
          "type": "integer",
          "format": "int64",
          "description": "Product package Id"
        },
        "chargePeriod": {
          "type": "string",
          "example": "2",
          "description": "Charge period",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Charge year"
        },
        "coveragePeriod": {
          "type": "string",
          "example": "2",
          "description": "Coverage period",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "coverageYear": {
          "type": "integer",
          "format": "int32",
          "example": 20,
          "description": "Coverage year"
        }
      }
    },
    "ProductFund": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fundCode": {
          "type": "string",
          "description": "Fund code"
        },
        "productId": {
          "type": "integer",
          "format": "int64",
          "description": "Product ID"
        },
        "minPartialWithdralval": {
          "type": "integer",
          "format": "int64",
          "description": "Allowed minimum partial withdraw amount"
        },
        "minPartialWithdralRemainingVal": {
          "type": "integer",
          "format": "int64",
          "description": "Allowed minimum remain value after partial withdraw"
        },
        "minSwitOutVal": {
          "type": "integer",
          "format": "int64",
          "description": "Allowed minimum switch out amount"
        },
        "minSwitRemainVal": {
          "type": "integer",
          "format": "int64",
          "description": "Allowed minimum remain value after switch"
        },
        "switchPeriodUnit": {
          "type": "string",
          "description": "Minimum fund switch limit"
        },
        "maxSwitInTimes": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed maximum switch in times"
        },
        "maxSwitOutTimes": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed maximum switch out times"
        },
        "maxPartialWithdralVal": {
          "type": "integer",
          "format": "int64",
          "description": "Allowed maximum partial withdraw amount"
        },
        "settleRatePeriodUnit": {
          "type": "string",
          "description": "Settlement period unit"
        },
        "settleYearType": {
          "type": "integer",
          "format": "int32",
          "description": "Settlement year type"
        },
        "settleFreq": {
          "type": "string",
          "description": "Settlement frequency"
        },
        "settleMonth": {
          "type": "integer",
          "format": "int32",
          "description": "Settlement month"
        },
        "settleDay": {
          "type": "integer",
          "format": "int32",
          "description": "Settlement day"
        },
        "settleMethod": {
          "type": "integer",
          "format": "int32",
          "description": "Settlement method"
        },
        "guaranteedRateOption": {
          "type": "integer",
          "format": "int32",
          "description": "Guaranteed interest rate indicator"
        },
        "settleSimpleCompound": {
          "type": "string",
          "description": "Settlement interest, simple or compound"
        },
        "bonusSettleType": {
          "type": "integer",
          "format": "int32",
          "description": "Bonus settlement type<br>1 - settle bonus with principal<br>2 - settle bonus separately"
        }
      }
    },
    "LiabilityInformation": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "liabilityName": {
          "type": "string",
          "description": "Liability name"
        },
        "categoryName": {
          "type": "string",
          "description": "Liability category name"
        },
        "liabilityId": {
          "type": "integer",
          "format": "int64",
          "description": "Liability Id"
        },
        "categoryId": {
          "type": "integer",
          "format": "int64",
          "description": "Liability category Id"
        }
      }
    },
    "TermLimitCon": {
      "type": "object",
      "required": [
        "coverageYear",
        "productCode"
      ],
      "properties": {
        "productCode": {
          "type": "string",
          "example": "ABC",
          "description": "SA limit"
        },
        "coveragePeriod": {
          "type": "string",
          "example": "2",
          "description": "Term limit list related factor: coverage period",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargePeriod": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Term limit list related factor: charge period"
        },
        "coverageYear": {
          "type": "string",
          "example": "2",
          "description": "Term limit list related factor: coverage year",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "example": 20,
          "description": "Term limit list related factor: charge year"
        },
        "annuityStartPeriod": {
          "type": "string",
          "example": "1",
          "description": "Term limit list related factor: Annuity payment end period"
        },
        "annuityStartYear": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Term limit list related factor: Annuity payment end year"
        },
        "annuityEndPeriod": {
          "type": "string",
          "example": "1",
          "description": "Term limit list related factor: Annuity payment end period"
        },
        "annuityEndYear": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Term limit list related factor: Annuity payment end year"
        },
        "annuityPayEnsure": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Term limit list related factor: Annuity guarantee pay year"
        },
        "extFields": {
          "type": "object",
          "description": "Extended field"
        }
      }
    },
    "ProductLiability": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annuity": {
          "type": "boolean",
          "example": false,
          "description": "Is it annuity product"
        },
        "survivalBenefitOptions": {
          "type": "array",
          "description": "Allowed Survival Benefit Option<br>1 - Get it now<br>2 - Pay with premium for payment<br>3 - There is an insurance company account",
          "items": {
            "type": "string"
          }
        },
        "liabilities": {
          "type": "array",
          "description": "Product liability list",
          "items": {
            "$ref": "#/definitions/LiabilityInformation"
          }
        }
      }
    },
    "ProductRelationship": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "masterProductCode": {
          "type": "string",
          "description": "Main product code"
        },
        "riderProductCode": {
          "type": "string",
          "description": "Rider product code"
        },
        "attachRelation": {
          "type": "string",
          "description": "Product relationship: <br>N - attach"
        },
        "maxAttachedSa": {
          "type": "number",
          "format": "double",
          "description": "The maximum SA of the attached product"
        },
        "minAttachSa2MainSaRate": {
          "type": "number",
          "format": "double",
          "description": "The minimum proportion of SA of attached product to SA of master product"
        },
        "maxTotalSa2MainSaRate": {
          "type": "number",
          "format": "double",
          "description": "The maximum proportion of SA of policy to SA of master product"
        },
        "maxAttachSa2MainSaRate": {
          "type": "number",
          "format": "double",
          "description": "The maximum proportion of SA of attached product to SA of master product"
        },
        "riderSa2MainPremRate": {
          "type": "number",
          "format": "double",
          "description": "The ratio between attached rider's SA and master product's premium"
        },
        "saNoEqual": {
          "type": "string",
          "description": "Whether the rider‘s SA can be equal to the main plan's"
        },
        "minAthAge": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum age of attaching"
        },
        "maxAthAge": {
          "type": "integer",
          "format": "int32",
          "description": "Allow the maximum age of additional"
        },
        "minAthMastAge": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum age of attached"
        },
        "maxAthMastAge": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum age of attached"
        },
        "minMastSaAmount": {
          "type": "number",
          "format": "double",
          "description": "The minimum SA of master product"
        },
        "totalOverRate": {
          "type": "number",
          "format": "double",
          "description": "The maximum total SA over SA of attached plan rate"
        },
        "masterProductId": {
          "type": "integer",
          "format": "int64",
          "description": "The main product Id"
        },
        "riderProductId": {
          "type": "integer",
          "format": "int64",
          "description": "Rider products Id"
        },
        "attachType": {
          "type": "string",
          "description": "Additional type 1 - only allowed once again 2 - allowed to attach multiple times"
        }
      }
    },
    "SaLimitCon": {
      "type": "object",
      "required": [
        "productCode"
      ],
      "properties": {
        "productCode": {
          "type": "string",
          "example": "ABC",
          "description": "Product code"
        },
        "insuredAgeMonth": {
          "type": "integer",
          "format": "int32",
          "example": 60,
          "description": "SA limit related factor: insured age (in month)"
        },
        "occupationCode": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "SA limit related factor: occupation code"
        },
        "payMethod": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "SA limit related factor: payment method"
        },
        "extFields": {
          "type": "object",
          "description": "Extended field"
        }
      }
    },
    "ProductPremium": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "initialPremium": {
          "type": "array",
          "description": "Initial premium",
          "items": {
            "$ref": "#/definitions/PremiumLimit"
          }
        },
        "subsequentPremium": {
          "type": "array",
          "description": "Renew premium",
          "items": {
            "$ref": "#/definitions/PremiumLimit"
          }
        },
        "adhocTopup": {
          "type": "array",
          "description": "Investment product, single top-up limit",
          "items": {
            "$ref": "#/definitions/PremiumLimit"
          }
        },
        "regularTopup": {
          "type": "array",
          "description": "Investment product, regular top-up limit",
          "items": {
            "$ref": "#/definitions/PremiumLimit"
          }
        },
        "increasePremium": {
          "type": "array",
          "description": "Increase premium limit",
          "items": {
            "$ref": "#/definitions/PremiumLimit"
          }
        },
        "decreasePremium": {
          "type": "array",
          "description": "Decrease premium",
          "items": {
            "$ref": "#/definitions/PremiumLimit"
          }
        },
        "increaseRegularTopup": {
          "type": "array",
          "description": "Investment product, increase regular top-up limit",
          "items": {
            "$ref": "#/definitions/PremiumLimit"
          }
        },
        "decreaseRegularTopup": {
          "type": "array",
          "description": "Investment product, decrease regular top-up limit",
          "items": {
            "$ref": "#/definitions/PremiumLimit"
          }
        },
        "listFundPremiumLimit": {
          "type": "array",
          "description": "Investment product, fund premium limit",
          "items": {
            "$ref": "#/definitions/ProductFundPremiumLimit"
          }
        }
      }
    },
    "GenericValidationResult": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "ruleType": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ProductTerm": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listTermLimit": {
          "type": "array",
          "description": "Term limit list",
          "items": {
            "$ref": "#/definitions/TermLimit"
          }
        }
      }
    },
    "ProductSumAssured": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "saLimit": {
          "type": "array",
          "description": "Product sum assured limit",
          "items": {
            "$ref": "#/definitions/SaLimit"
          }
        }
      }
    },
    "IllustrationResult": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "coverageId": {
          "type": "integer",
          "format": "int64",
          "description": "Coverage ID, integer: such as 1,2"
        },
        "calcType": {
          "type": "integer",
          "format": "int32",
          "description": "Calculation type"
        },
        "amount": {
          "type": "number",
          "format": "double",
          "description": "Amount"
        },
        "performanceType": {
          "type": "integer",
          "format": "int32",
          "description": "Illustration type"
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "Age"
        },
        "policyYear": {
          "type": "integer",
          "format": "int32",
          "description": "Policy year"
        },
        "policyMonth": {
          "type": "integer",
          "format": "int32",
          "description": "Policy month"
        },
        "fundCode": {
          "type": "string",
          "description": "Fund code"
        },
        "name": {
          "type": "string",
          "description": "Illustration name"
        },
        "orderSeq": {
          "type": "integer",
          "format": "int32",
          "description": "Sequence"
        }
      }
    },
    "ProductInfo": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "maininfo": {
          "description": "Product main information",
          "$ref": "#/definitions/MainInformation"
        },
        "benefitType": {
          "type": "string",
          "description": "Product benefit category<br>22 - Reimbursement medical insurance<br>23 - subsidized medical insurance<br>31 - accident insurance<br>11 - endowment insurance<br>12 - annuities insurance<br>13 - life insurance<br>14 - term insurance<br>41 - investment insurance<br>15 - mortgage insurance<br>16 - long-term care<br>17 - critical illness"
        },
        "productId": {
          "type": "integer",
          "format": "int64",
          "description": "Product ID"
        },
        "premSaCalc": {
          "description": "Product premium calculation related information",
          "$ref": "#/definitions/PremiumSaCalculation"
        },
        "liability": {
          "description": "Product liability",
          "$ref": "#/definitions/ProductLiability"
        },
        "bonus": {
          "description": "Bonus information",
          "$ref": "#/definitions/Bonus"
        },
        "attachedRiders": {
          "type": "array",
          "description": "The relationship of main plan and rider",
          "items": {
            "$ref": "#/definitions/ProductRelationship"
          }
        },
        "productCoverMultiple": {
          "description": "The ratio of SA and premium",
          "$ref": "#/definitions/ProductCoverMultiple"
        },
        "listProductFund": {
          "type": "array",
          "description": "Fund code",
          "items": {
            "$ref": "#/definitions/ProductFund"
          }
        }
      }
    },
    "ProductBasicInformation": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "productId": {
          "type": "integer",
          "format": "int64",
          "description": "Product ID"
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "productName": {
          "type": "string",
          "description": "Product name"
        },
        "productAbbr": {
          "type": "string",
          "description": "Product introduction"
        },
        "productDescription": {
          "type": "string",
          "description": "Product description"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Product start sales date"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "Product end sale date"
        },
        "benefitType": {
          "type": "string",
          "description": "Product benefit category<br>22 - Reimbursement medical insurance<br>23 - subsidized medical insurance<br>31 - accident insurance<br>11 - endowment insurance<br>12 - annuities insurance<br>13 - life insurance<br>14 - term insurance<br>41 - investment insurance<br>15 - mortgage insurance<br>16 - long-term care<br>17 - critical illness"
        },
        "isMainProduct": {
          "type": "string",
          "description": "Whether it is the main plan"
        },
        "minSAOrUnit": {
          "type": "integer",
          "format": "int64",
          "description": "Minimum SA or Unit"
        }
      }
    },
    "SaLimit": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "limitUnit": {
          "type": "string",
          "description": "Insured or unit limit<br>1 - insured amount<br>2 - unit"
        },
        "maxAmount": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum amount, the amount of SA, or the unit"
        },
        "minAmount": {
          "type": "integer",
          "format": "int64",
          "description": "The minimum amount, the amount of SA, or the unit"
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "description": "Currency"
        },
        "lowAgeMonth": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum age allowed of the insured"
        },
        "highAgeMonth": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum age allowed of the insured"
        },
        "occupationCode": {
          "type": "integer",
          "format": "int32",
          "description": "Occupation code"
        },
        "paymentMethod": {
          "type": "integer",
          "format": "int32",
          "description": "Payment method"
        }
      }
    },
    "BasicProductPackageInfo": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "packageId": {
          "type": "integer",
          "format": "int64",
          "description": "Product package Id"
        },
        "packageCode": {
          "type": "string",
          "description": "Product package code"
        },
        "packageName": {
          "type": "string",
          "description": "Product package name"
        },
        "moneyId": {
          "type": "integer",
          "format": "int64",
          "description": "Product package's currency"
        },
        "description": {
          "type": "string",
          "description": "Product package description"
        }
      }
    },
    "PremiumLimitCon": {
      "type": "object",
      "required": [
        "productCode"
      ],
      "properties": {
        "productCode": {
          "type": "string",
          "example": "ABC",
          "description": "Product code"
        },
        "chargePeriod": {
          "type": "string",
          "example": "2",
          "description": "Premium limits related factor: charge period",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Premium limits related factor: charge year"
        },
        "insuredAge": {
          "type": "integer",
          "format": "int32",
          "example": 50,
          "description": "Premium limits related factor: insured age"
        },
        "premiumFrequency": {
          "type": "string",
          "example": "1",
          "description": "Premium limits related factor: payment frequency"
        },
        "payMode": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Premium limits related factor: payment method"
        },
        "extFields": {
          "type": "object",
          "description": "Extended field"
        }
      }
    },
    "ProductPkgProductMatrix": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "packageId": {
          "type": "integer",
          "format": "int64",
          "description": "Product package Id"
        },
        "masterId": {
          "type": "integer",
          "format": "int64",
          "description": "Master product Id"
        },
        "attachId": {
          "type": "integer",
          "format": "int64",
          "description": "Rider product id"
        },
        "attachMode": {
          "type": "string",
          "description": "Product relationship type: <br>1 - 共存关系<br>2 - 依赖关系<br>3 - 互斥关系"
        }
      }
    },
    "ProductSalesCategory": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "categoryName": {
          "type": "string",
          "description": "Product sales category name"
        },
        "description": {
          "type": "string",
          "description": "Product sales category description"
        },
        "categoryCode": {
          "type": "string",
          "description": "Product sales category code"
        },
        "displayOrder": {
          "type": "integer",
          "format": "int32",
          "description": "Display order"
        },
        "categoryId": {
          "type": "integer",
          "format": "int32",
          "description": "Product sales category Id"
        },
        "parentCateId": {
          "type": "string",
          "description": "Product sales category's parent category Id"
        }
      }
    },
    "ProductAgeResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "productAge": {
          "description": "Policy holder's age range",
          "$ref": "#/definitions/ProductAge"
        }
      }
    },
    "PremiumSaCalculation": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "unitFlag": {
          "type": "string",
          "description": "Premiums calculation method<br>0 - premium/SA by the user input<br>1 - products sold by the unit<br>2 - calculate premiums base on sum assured, but also allows the agreement premium<br>3 - products sold under the plan or unit<br>4 - products are only allowed to sell according to plan<br>5 - according to the premium , But also allow the agreement premium<br>6 - only to allow the sum assured to premium but also allow the agreement premium<br>7 - only allow premiums to sum assured<br>8 - both sum assured to premium or sum assured to premium"
        },
        "waiver": {
          "type": "boolean",
          "example": false,
          "description": "Whether it is a waiver plan"
        },
        "ageBase": {
          "type": "string",
          "description": "Age calculation method<br>1 - according to the age of insurance<br>2 - according to the year of the annual anniversary of the policy"
        },
        "premiumFrequency": {
          "type": "array",
          "description": "Allowed payment frequency",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CalculateCoverage": {
      "type": "object",
      "required": [
        "calculatePremium",
        "coverageId",
        "coveragePeriod",
        "insureds",
        "productCode"
      ],
      "properties": {
        "coverageId": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "Coverage ID, integer: such as 1,2"
        },
        "productCode": {
          "type": "string",
          "example": "0170",
          "description": "Product code"
        },
        "chargePeriod": {
          "type": "string",
          "example": "2",
          "description": "Charge period type<br>1 - Single payment<br>2 - pay next few years<br>3 - pay till a certain age<br>4 - pay for whole life<br>If the product supports payment period, this field is compulsory",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "Payment period<br>When payment period type = 1, the field is meaningless<br>When payment period type = 2, this field represents years<br>When payment period type = 3, this field represents the age<br>When payment period type = 4, this field represents months"
        },
        "coveragePeriod": {
          "type": "string",
          "example": "2",
          "description": "Coverage type<br>1 - whole life<br>2 - per year<br>3 - Cover to a certain age<br>4 - per month<br>5 - per day",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "coverageYear": {
          "type": "integer",
          "format": "int32",
          "example": 20,
          "description": "Coverage period<br>When coverage period type = 1, the field is meaningless<br>When coverage period type = 2, this field represents years<br>When coverage period type = 3, this field represents the age<br>When coverage period type = 4, this field represents months"
        },
        "masterCoverageId": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "Master coverage ID, for master coverage, this should be empty; for non-master coverage, this should be its master coverage id"
        },
        "calculatePremium": {
          "description": "Product premium calculation related factory",
          "$ref": "#/definitions/CalculatePremium"
        },
        "insureds": {
          "type": "array",
          "description": "Product premium calculation, insured related information",
          "items": {
            "$ref": "#/definitions/CalculateInsured"
          }
        },
        "annuity": {
          "description": "Annuity information",
          "$ref": "#/definitions/Annuity"
        },
        "funds": {
          "type": "array",
          "description": "Fund list",
          "items": {
            "$ref": "#/definitions/CalculateFund"
          }
        },
        "topupWithdrawns": {
          "type": "array",
          "description": "Top-up and withdraw plan",
          "items": {
            "$ref": "#/definitions/TopupWithdrawnPlan"
          }
        },
        "mortgageRates": {
          "type": "array",
          "description": "Mortgage rate information",
          "items": {
            "$ref": "#/definitions/CalculateCoverageMortgageRate"
          }
        },
        "waivedSa": {
          "type": "number",
          "format": "double",
          "example": 100000,
          "description": "Waived SA, only apply to the waiver product"
        },
        "extFields": {
          "type": "object",
          "description": "Extended field"
        }
      }
    },
    "CalculateCoverageResult": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "productCode": {
          "type": "string",
          "description": "Product code for calculation"
        },
        "sumAssured": {
          "type": "number",
          "format": "double",
          "description": "Sum assured (SA)"
        },
        "unit": {
          "type": "integer",
          "format": "int32",
          "description": "Total unit"
        },
        "totalPremAf": {
          "type": "number",
          "format": "double",
          "description": "Total premium"
        },
        "premAn": {
          "type": "number",
          "format": "double",
          "description": "Annual premium"
        },
        "extraPrem": {
          "type": "number",
          "format": "double",
          "description": "Extra premium"
        },
        "paymentFrey": {
          "type": "string",
          "description": "Pay frequency<br>1 - yearly payment<br>2 - half yearly payment<br>3 - quarterly payment<br>4 - monthly payment<br>5 - single premium"
        },
        "coverageId": {
          "type": "integer",
          "format": "int64",
          "description": "Inputted coverage code"
        }
      }
    },
    "CalculateCoverageMortgageRate": {
      "type": "object",
      "required": [
        "levelPeriod",
        "mortgageRate"
      ],
      "properties": {
        "lowPolicyYear": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "Start policy year of the mortgage rate"
        },
        "highPolicyYear": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "End policy year of the mortgage rate"
        },
        "levelPeriod": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "Mortgage rate period"
        },
        "mortgageRate": {
          "type": "number",
          "format": "double",
          "example": 0.05,
          "description": "Mortgage rate"
        },
        "extFields": {
          "type": "object",
          "description": "Extended field"
        }
      }
    },
    "ProductAge": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "policyHolderAge": {
          "type": "array",
          "description": "Policy holder's age range",
          "items": {
            "$ref": "#/definitions/AgeLimit"
          }
        },
        "insuredAge": {
          "type": "array",
          "description": "The age limit of the insured person",
          "items": {
            "$ref": "#/definitions/AgeLimit"
          }
        }
      }
    },
    "IllustrationResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        },
        "messages": {
          "type": "array",
          "description": "Business failure reason description list node",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "illustrations": {
          "description": "Illustration results",
          "$ref": "#/definitions/Illustrations"
        }
      }
    },
    "Policy": {
      "type": "object",
      "properties": {
        "applyDate": {
          "type": "string",
          "format": "date-time",
          "description": "Application date, non-empty, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "beneficiaries": {
          "type": "array",
          "description": "List of beneficiaries",
          "items": {
            "$ref": "#/definitions/Beneficiary"
          }
        },
        "brokerCode": {
          "type": "string",
          "example": "ebao",
          "description": "Broker code"
        },
        "contractorCode": {
          "type": "string",
          "example": "ebao",
          "description": "Contractor code"
        },
        "coverages": {
          "type": "array",
          "description": "Policy's coverage list",
          "items": {
            "$ref": "#/definitions/Coverage"
          }
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Currency, non empty<br>1 - CNY",
          "enum": [
            1
          ]
        },
        "customers": {
          "type": "array",
          "description": "Policy customer list",
          "items": {
            "$ref": "#/definitions/PolicyCustomer"
          }
        },
        "declarations": {
          "type": "array",
          "description": "Customer declaration list",
          "items": {
            "$ref": "#/definitions/CustomerDeclaration"
          }
        },
        "deliverType": {
          "type": "string",
          "example": "M",
          "description": "Policy delivery method<br>H - by people<br>M - by mail",
          "enum": [
            "H",
            "M"
          ]
        },
        "ePolicyDownloadUrl": {
          "type": "string",
          "description": "Electronic policy download address"
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Termination date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "groupProposalNumber": {
          "type": "string",
          "description": "Group proposal No."
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy effective date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Policy premium"
        },
        "insureds": {
          "type": "array",
          "description": "Policy insured list",
          "items": {
            "$ref": "#/definitions/Insured"
          }
        },
        "insurerCode": {
          "type": "string",
          "description": "Insurance company code"
        },
        "issueDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy issue date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "payerAccounts": {
          "type": "array",
          "description": "Payment method list",
          "items": {
            "$ref": "#/definitions/PayerAccount"
          }
        },
        "payers": {
          "type": "array",
          "description": "Payer list",
          "items": {
            "$ref": "#/definitions/Payer"
          }
        },
        "policyHolder": {
          "description": "Policy holder",
          "$ref": "#/definitions/PolicyHolder"
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        },
        "policyNumber": {
          "type": "string",
          "description": "Policy number"
        },
        "policyPackage": {
          "description": "Product package",
          "$ref": "#/definitions/PolicyPackage"
        },
        "policyType": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Policy type<br>1 - Individual policy<br>2 - Group policy<br>3 - Banc assurance",
          "enum": [
            1,
            2,
            3
          ]
        },
        "preprintedProposalNumber": {
          "type": "string",
          "description": "Pre-printed proposal number"
        },
        "proposalNumber": {
          "type": "string",
          "description": "Proposal number"
        },
        "quotationCode": {
          "type": "string",
          "description": "Quotation calculation request number"
        },
        "riskStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Policy status<br>0 - not inforce<br>1 - inforce<br>2 - lapsed<br>3 - terminated",
          "readOnly": true
        },
        "salesChannelCode": {
          "type": "string",
          "description": "Sales channel code"
        },
        "serviceAgentCode": {
          "type": "string",
          "description": "Policy agent code"
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of submission, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "tenantCode": {
          "type": "string",
          "example": "GUEST",
          "description": "Tenant code"
        },
        "trustees": {
          "type": "array",
          "description": "List of trustees",
          "items": {
            "$ref": "#/definitions/Trustee"
          }
        }
      }
    },
    "PremInvestRate": {
      "type": "object",
      "properties": {
        "addPremId": {
          "type": "string",
          "description": "Add premium ID, UUID type",
          "readOnly": true
        },
        "assignRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Fund assign ratio"
        },
        "coverageId": {
          "type": "string",
          "description": "Insurance coverage(benefit) ID, UUID type",
          "readOnly": true
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fundCode": {
          "type": "string",
          "example": "F001",
          "description": "Fund code"
        },
        "listId": {
          "type": "string",
          "description": "Insurance type insured internal serial number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "PolicyPackage": {
      "type": "object",
      "properties": {
        "packageCode": {
          "type": "string",
          "description": "Product package code"
        },
        "packageId": {
          "type": "integer",
          "format": "int64",
          "description": "Product package of internal serial number",
          "readOnly": true
        },
        "unit": {
          "type": "number",
          "format": "double",
          "description": "Product package unit, the default is 1"
        }
      }
    },
    "QuotationResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "messages": {
          "type": "array",
          "description": "Business failure reason description list node",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "policy": {
          "description": "Policy",
          "$ref": "#/definitions/QuotationPolicyResult"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string",
          "example": "上海市",
          "description": "Province"
        },
        "address2": {
          "type": "string",
          "example": "上海市",
          "description": "City"
        },
        "address3": {
          "type": "string",
          "example": "杨浦区",
          "description": "District"
        },
        "address4": {
          "type": "string",
          "example": "淞沪路270号创智天地3号楼3楼",
          "description": "Address"
        },
        "addressId": {
          "type": "string",
          "description": "Address internal serial number, UUID type",
          "readOnly": true
        },
        "postCode": {
          "type": "string",
          "example": "200433",
          "description": "Post code"
        }
      }
    },
    "CoverageInsuredInput": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer",
          "format": "int32",
          "example": 25,
          "description": "Age"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "occupationClass": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Occupation level"
        },
        "orderId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Insurance type of the insured person, the default is 1, if one plan applied by more than one insured (family policy or personal risk), the value is greater than 1"
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Insured customer temporary number, request within the use of a unique identification request within a party"
        }
      }
    },
    "AddressInput": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string",
          "example": "上海市",
          "description": "Province"
        },
        "address2": {
          "type": "string",
          "example": "上海市",
          "description": "City"
        },
        "address3": {
          "type": "string",
          "example": "杨浦区",
          "description": "District"
        },
        "address4": {
          "type": "string",
          "example": "淞沪路270号创智天地3号楼3楼",
          "description": "Address"
        },
        "postCode": {
          "type": "string",
          "example": "200433",
          "description": "Post code"
        }
      }
    },
    "InsuredInput": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "medicalIndi": {
          "type": "string",
          "example": "Y",
          "description": "Whether there is medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Customer temporary number, internal usage. Unique identify the customer for one request"
        },
        "relationToPH": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship between the insured and the insured, integer type<br>1 - self<br>2 - child<br>3 - spouse<br>10 - parent<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            4,
            7
          ]
        },
        "socialSecurityIndi": {
          "type": "string",
          "example": "Y",
          "description": "Whether there is social medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        }
      }
    },
    "PayerAccount": {
      "type": "object",
      "properties": {
        "bankAccount": {
          "description": "The first premium bank account",
          "$ref": "#/definitions/BankAccount"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "Policy customer internal serial number, UUID type",
          "readOnly": true
        },
        "nextBankAccount": {
          "description": "Renewal premium bank account",
          "$ref": "#/definitions/BankAccount"
        },
        "paymentMethod": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "First time payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card",
          "enum": [
            1,
            2,
            3,
            30,
            80
          ]
        },
        "paymentMethodNext": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "Renewal payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card",
          "enum": [
            1,
            2,
            3,
            30,
            80
          ]
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "PayPlanInput": {
      "type": "object",
      "properties": {
        "endPeriod": {
          "type": "string",
          "example": "3",
          "description": "Year to receive the type of annuity, the type of annuity / variable annuity / GMWB should not be empty<br>1 to receive a fixed number of years<br>2 to receive till a certain age<br>3 - receive whole life",
          "enum": [
            "1",
            "2",
            "3"
          ]
        },
        "endYear": {
          "type": "integer",
          "format": "int32",
          "description": "The number of payment years"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "gurntPeriod": {
          "type": "integer",
          "format": "int32",
          "description": "Annuity guarantee period (years or age)"
        },
        "payOption": {
          "type": "string",
          "example": "1",
          "description": "The annuity receive payment options<br>1 - to receive payment by cash<br>2 - to pay premium<br>3 - accumulated interest<br>4 - accumulated interest x years after the transfer to pay premium<br>5 - to buy an additional payment of rider",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "payOptionTerm": {
          "type": "integer",
          "format": "int32",
          "description": "Years, only when payOption is 4, this field has value, for others are empty"
        },
        "payPeriod": {
          "type": "string",
          "example": "3",
          "description": "The annuity begins to receive the type of period<br>1 - is immediately received<br>2 - till a certain age to receive<br>3 - years after the collection<br>4 - after a certain age to receive",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "payYear": {
          "type": "integer",
          "format": "int32",
          "description": "The annuity begins to receive the period (years or age)"
        },
        "planFreq": {
          "type": "string",
          "example": "1",
          "description": "To receive frequency<br>1 - yearly<br>2 - half yearly<br>3 - quarterly <br>4 - monthly<br>5 - single",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "planType": {
          "type": "string",
          "example": "1",
          "description": "Payment plan type<br>1 - cash payment<br>2 - annuity<br>3 - survival benefit<br>4 - maturity  5 - GMWB (guaranteed minimum benefit)<br>6 - variable annuity<br>7 - partial surrender<br>8 - SA dividends",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8"
          ]
        }
      }
    },
    "CoverageInput": {
      "type": "object",
      "properties": {
        "chargePeriod": {
          "type": "string",
          "example": "2",
          "description": "Payment period type, non-empty<br>1 - single<br>2 - per year<br>3 to a certain age<br>4 - whole life",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "example": 20,
          "description": "Payment period, non-empty<br>0 - single;<br>by age: till which age or to pay the payment period: the pay years;<br>whole life is 100"
        },
        "coverageAgents": {
          "type": "array",
          "description": "List of performance sharing of agent",
          "items": {
            "$ref": "#/definitions/CoverageAgentInput"
          }
        },
        "coveragePeriod": {
          "type": "string",
          "example": "1",
          "description": "Coverage type<br>1 - whole life<br>2 - per year<br>3 - Cover to a certain age<br>4 - per month<br>5 - per day",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "coverageSeriaId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Plan internal serial number, the request within the use of a unique identification within a certain kind of insurance"
        },
        "coverageYear": {
          "type": "integer",
          "format": "int32",
          "description": "Coverage Term. Meaning of this property is associated with property \"coveragePeriod\" (\"type\" for short). when covers whole life, value of this property is 9999;<br>and if type is 2, means years covered;<br>and if type is 3, means age when coverage expired;<br>and if type is 4, means months covered;<br>and if type is 5, means days covered."
        },
        "currentPremium": {
          "description": "The current period premium",
          "$ref": "#/definitions/CoveragePremium"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "insureds": {
          "type": "array",
          "description": "List of insured",
          "items": {
            "$ref": "#/definitions/CoverageInsuredInput"
          }
        },
        "masterCoverageSerialId": {
          "type": "integer",
          "format": "int32",
          "description": "Temporary main plan serial number, the current insurance for the main plan is empty, for the rider to be filled into the main insurance of the serial number"
        },
        "payPlans": {
          "type": "array",
          "description": "Payment plan list",
          "items": {
            "$ref": "#/definitions/PayPlanInput"
          }
        },
        "premInvestRates": {
          "type": "array",
          "description": "The ratio of premium and investment amount",
          "items": {
            "$ref": "#/definitions/ContractInvestRateInput"
          }
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "recurringTopup": {
          "description": "Recurring top-up",
          "$ref": "#/definitions/RecurringTopupInput"
        },
        "singleTopup": {
          "description": "Single top-up",
          "$ref": "#/definitions/SingleTopupInput"
        },
        "waiverExt": {
          "description": "Waiver plan information",
          "$ref": "#/definitions/CoverageExtWaiverInput"
        }
      }
    },
    "PolicyCustomerInput": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Customer address",
          "$ref": "#/definitions/AddressInput"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "organization": {
          "description": "Organization customer information",
          "$ref": "#/definitions/Organization"
        },
        "partyContact": {
          "description": "Party contact information",
          "$ref": "#/definitions/PartyContact"
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Customer temporary number, internal usage. Unique identify the customer for one request"
        },
        "partyType": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The type of the party<br>1 - the personal party<br>2 - organization",
          "enum": [
            1,
            2
          ]
        },
        "person": {
          "description": "Personal customer information",
          "$ref": "#/definitions/Person"
        }
      }
    },
    "PayPlan": {
      "type": "object",
      "properties": {
        "coverageId": {
          "type": "string",
          "description": "Insurance coverage(benefit) ID, UUID type",
          "readOnly": true
        },
        "endPeriod": {
          "type": "string",
          "example": "3",
          "description": "Year to receive the type of annuity, the type of annuity / variable annuity / GMWB should not be empty<br>1 to receive a fixed number of years<br>2 to receive till a certain age<br>3 - receive whole life",
          "enum": [
            "1",
            "2",
            "3"
          ]
        },
        "endYear": {
          "type": "integer",
          "format": "int32",
          "description": "The number of payment years"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "gurntPeriod": {
          "type": "integer",
          "format": "int32",
          "description": "Annuity guarantee period (years or age)"
        },
        "payOption": {
          "type": "string",
          "example": "1",
          "description": "The annuity receive payment options: 1 - to receive payment by cash<br>2 - to pay premium<br>3 - accumulated interest<br>4 - accumulated interest x years after the transfer to pay premium<br>5 - to buy an additional payment of rider",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "payOptionTerm": {
          "type": "integer",
          "format": "int32",
          "description": "Years, only when payOption is 4, this field has value, for others are empty"
        },
        "payPeriod": {
          "type": "string",
          "example": "3",
          "description": "The annuity begins to receive the type of period<br>1 - is immediately received<br>2 - till a certain age to receive<br>3 - years after the collection<br>4 - after a certain age to receive",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "payYear": {
          "type": "integer",
          "format": "int32",
          "description": "The annuity begins to receive the period (years or age)"
        },
        "planFreq": {
          "type": "string",
          "example": "1",
          "description": "To receive frequency<br>1 - yearly<br>2 - half yearly<br>3 - quarterly <br>4 - monthly<br>5 - single",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "planId": {
          "type": "string",
          "description": "Payment plan, internal serial number, UUID type",
          "readOnly": true
        },
        "planType": {
          "type": "string",
          "example": "1",
          "description": "Payment plan type<br>1 - cash payment<br>2 - annuity<br>3 - survival benefit<br>4 - maturity  5 - GMWB (guaranteed minimum benefit)<br>6 - variable annuity<br>7 - partial surrender<br>8 - SA dividends",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8"
          ]
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "CustomerDeclaration": {
      "type": "object",
      "properties": {
        "declarationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Declaration date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "details": {
          "type": "array",
          "description": "Declaration details",
          "items": {
            "$ref": "#/definitions/CustomerDeclarationDetail"
          }
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "Customer declaration internal serial number, UUID type",
          "readOnly": true
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "CoverageAgent": {
      "type": "object",
      "properties": {
        "agentCode": {
          "type": "string",
          "description": "Policy agent code"
        },
        "assignRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Performance rating, the maximum for the 1"
        },
        "coverageId": {
          "type": "string",
          "description": "Insurance coverage(benefit) ID, UUID type",
          "readOnly": true
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "The insurance type The internal serial number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "GenericVO": {
      "type": "object",
      "properties": {
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        }
      }
    },
    "Payer": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "Policy role internal serial number, UUID type",
          "readOnly": true
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        },
        "relationToPH": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship between the insured and the payer integer type<br>1 - self<br>2 - child<br>3 - spouse<br>10 - parent<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            7
          ]
        },
        "shareRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Payment ratio, up to 1"
        }
      }
    },
    "CollectionInput": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Currency, non empty<br>1 - CNY",
          "enum": [
            1
          ]
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "feeAmount": {
          "type": "number",
          "format": "double",
          "example": 2314,
          "description": "The actual amount of money"
        },
        "payMode": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "Payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card",
          "enum": [
            1,
            2,
            3,
            30,
            80
          ]
        },
        "paymentPlatform": {
          "type": "string",
          "description": "Third party payment platform code",
          "enum": [
            "0",
            "11",
            "12",
            "21",
            "30",
            "31",
            "32",
            "99"
          ]
        },
        "thirdPtyPayNO": {
          "type": "string",
          "description": "Third party payment number"
        }
      }
    },
    "Iterator?Policy?": {
      "type": "object"
    },
    "IssurancePolicyResult": {
      "type": "object",
      "properties": {
        "coverages": {
          "type": "array",
          "description": "Policy's coverage list",
          "items": {
            "$ref": "#/definitions/CoverageCalculationResult"
          }
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Currency, non empty<br>1 - CNY",
          "enum": [
            1
          ]
        },
        "ePolicyDownloadUrl": {
          "type": "string",
          "description": "Electronic policy download address"
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Termination date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "groupProposalNumber": {
          "type": "string",
          "description": "Group proposal No."
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy effective date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Policy premium",
          "readOnly": true
        },
        "issueDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy issue date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "policyNumber": {
          "type": "string",
          "description": "Policy number"
        },
        "proposalNumber": {
          "type": "string",
          "description": "Proposal number"
        },
        "quotationCode": {
          "type": "string",
          "description": "Quotation calculation request number"
        },
        "riskStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Policy status<br>0 - not inforce<br>1 - inforce<br>2 - lapsed<br>3 - terminated",
          "readOnly": true
        }
      }
    },
    "SingleTopupInvestRate": {
      "type": "object",
      "properties": {
        "addPremId": {
          "type": "string",
          "description": "Add premium ID, UUID type",
          "readOnly": true
        },
        "assignRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Fund assign ratio"
        },
        "coverageId": {
          "type": "string",
          "description": "Insurance coverage(benefit) ID, UUID type",
          "readOnly": true
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fundCode": {
          "type": "string",
          "example": "F001",
          "description": "Fund code"
        },
        "listId": {
          "type": "string",
          "description": "Insurance type insured internal serial number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "Insured": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "Policy role internal serial number, UUID type",
          "readOnly": true
        },
        "medicalIndi": {
          "type": "string",
          "example": "Y",
          "description": "Whether there is medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        },
        "relationToPH": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship between the insured and the insured, integer type<br>1 - self<br>2 - child<br>3 - spouse<br>10 - parent<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            4,
            7
          ]
        },
        "socialSecurityIndi": {
          "type": "string",
          "example": "Y",
          "description": "Whether there is social medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        }
      }
    },
    "CoverageAgentInput": {
      "type": "object",
      "properties": {
        "agentCode": {
          "type": "string",
          "description": "Policy agent code"
        },
        "assignRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Performance rating, the maximum for the 1"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TrusteeInput": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Customer temporary number, internal usage. Unique identify the customer for one request"
        }
      }
    },
    "ContractInvestRateInput": {
      "type": "object",
      "properties": {
        "assignRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Fund assign ratio"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fundCode": {
          "type": "string",
          "example": "F001",
          "description": "Fund code"
        }
      }
    },
    "PartyContact": {
      "type": "object",
      "properties": {
        "contact": {
          "type": "string",
          "example": "张三",
          "description": "Contact person"
        },
        "contactTel": {
          "type": "string",
          "example": "88888888",
          "description": "Contact Phone"
        },
        "email": {
          "type": "string",
          "example": "TestPerson14@126.com",
          "description": "E-mail:"
        },
        "fax": {
          "type": "string",
          "example": "88888887",
          "description": "Fax: (+86) {0}022 - 24143117{/0}"
        },
        "homeTel": {
          "type": "string",
          "example": "87654321",
          "description": "Home telephone"
        },
        "mobileTel": {
          "type": "string",
          "example": "15012345678",
          "description": "Phone number"
        },
        "officeTel": {
          "type": "string",
          "example": "88888888",
          "description": "Work phone"
        },
        "officeTelExt": {
          "type": "string",
          "example": "1234",
          "description": "Work phone extension"
        }
      }
    },
    "CoverageCalculationResult": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "premium": {
          "type": "number",
          "format": "double",
          "example": 2314,
          "description": "Insurance premium, non empty when calculate SA base on premium"
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "sumAssured": {
          "type": "number",
          "format": "double",
          "example": 100000,
          "description": "Insurance SA, non empty when calculate premium base on SA"
        },
        "unit": {
          "type": "number",
          "format": "double",
          "description": "Product unit, non empty when by unit insurance"
        }
      }
    },
    "SingleTopup": {
      "type": "object",
      "properties": {
        "addPremId": {
          "type": "string",
          "description": "Insurance type insured internal serial number, UUID type",
          "readOnly": true
        },
        "coverageId": {
          "type": "string",
          "description": "Insurance coverage(benefit) ID, UUID type",
          "readOnly": true
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "investRates": {
          "type": "array",
          "description": "Investment rate list",
          "items": {
            "$ref": "#/definitions/SingleTopupInvestRate"
          }
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        },
        "topupAmount": {
          "type": "number",
          "format": "double",
          "example": 10000,
          "description": "Top-up amount"
        }
      }
    },
    "IssuranceResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "messages": {
          "type": "array",
          "description": "Business failure reason description list node",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "policy": {
          "description": "Policy",
          "$ref": "#/definitions/IssurancePolicyResult"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        }
      }
    },
    "Person": {
      "type": "object",
      "properties": {
        "birthdate": {
          "type": "string",
          "format": "date-time",
          "example": "1980-01-01",
          "description": "Birthday, non-empty, date format: yyyy-MM-dd"
        },
        "certiCode": {
          "type": "string",
          "example": "1234567890",
          "description": "ID Number"
        },
        "certiEnd": {
          "type": "string",
          "format": "date-time",
          "example": "2019-12-31",
          "description": "Valid date, date format: yyyy-MM-dd"
        },
        "certiStart": {
          "type": "string",
          "format": "date-time",
          "example": "2000-01-01",
          "description": "Certificate start date, date format: yyyy-MM-dd"
        },
        "certiType": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "ID type, number type<br>1 - ID card<br>2 - military certificate<br>3 - passport<br>4 - birth certificate<br>9 - other",
          "enum": [
            1,
            2,
            3,
            4,
            9
          ]
        },
        "firstName": {
          "type": "string",
          "example": "三",
          "description": "First name"
        },
        "gender": {
          "type": "string",
          "example": "M",
          "description": "Sex<br>M - male<br>F - female",
          "enum": [
            "M",
            "F"
          ]
        },
        "height": {
          "type": "number",
          "format": "double",
          "example": 175.3,
          "description": "Height e.g. 172cm"
        },
        "income": {
          "type": "integer",
          "format": "int64",
          "example": 200000,
          "description": "Annual income"
        },
        "lastName": {
          "type": "string",
          "example": "张",
          "description": "Last name of prospect"
        },
        "marriageStatus": {
          "type": "string",
          "example": "1",
          "description": "Marital status<br>1 - married<br>2 - unmarried<br>3 - divorced<br>4 - widowed<br>5 - separated",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6"
          ]
        },
        "midName": {
          "type": "string",
          "description": "Middle name of prospect"
        },
        "nationality": {
          "type": "string",
          "example": "7",
          "description": "Nationality<br>7 - China"
        },
        "occupationCode": {
          "type": "string",
          "example": "1",
          "description": "Professional code"
        },
        "preferredLifeIndi": {
          "type": "string",
          "example": "0",
          "description": "Insurance risk classifications <br>0 - N/A<br>1 - Prefer plus<br>2 - Prefer<br>3 - Standard plus<br>4 - Standard<br>5 - Sub-prefer<br>6 - Sub-standard"
        },
        "salutation": {
          "type": "string",
          "example": "1",
          "description": "Title<br>1 - Mr.<br>2 - Mrs.",
          "enum": [
            "1",
            "2"
          ]
        },
        "smoking": {
          "type": "string",
          "example": "N",
          "description": "Whether smoking<br>Y - yes;<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        },
        "weight": {
          "type": "number",
          "format": "double",
          "example": 70.25,
          "description": "Weight (kg)"
        }
      }
    },
    "PolicyPackageInput": {
      "type": "object",
      "properties": {
        "packageCode": {
          "type": "string",
          "description": "Product Product package code"
        },
        "unit": {
          "type": "number",
          "format": "double",
          "description": "Product package unit, the default is 1"
        }
      }
    },
    "Organization": {
      "type": "object",
      "properties": {
        "companyName": {
          "type": "string",
          "example": "xxxxxx",
          "description": "Name of company"
        },
        "countryCode": {
          "type": "string",
          "example": "156",
          "description": "Registered country, 156 - China"
        },
        "organCode": {
          "type": "string",
          "example": "xxxxxx",
          "description": "Organization code"
        },
        "registerCode": {
          "type": "string",
          "example": "xxxx",
          "description": "Company ID"
        },
        "registerType": {
          "type": "string",
          "example": "1001",
          "description": "Company certificate type, 1001 - company registration number"
        }
      }
    },
    "CoverageInsured": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer",
          "format": "int32",
          "example": 25,
          "description": "Age"
        },
        "coverageId": {
          "type": "string",
          "description": "Insurance coverage(benefit) ID, UUID type",
          "readOnly": true
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "insuredPartyId": {
          "type": "string",
          "description": "Insured internal serial number, UUID type",
          "readOnly": true
        },
        "listId": {
          "type": "string",
          "description": "Insurance type insured internal serial number, UUID type",
          "readOnly": true
        },
        "occupationClass": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Occupation level"
        },
        "orderId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Insurance type of the insured person, the default is 1, if one plan applied by more than one insured (family policy or personal risk), the value is greater than 1"
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "CollectionPolicyInput": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "payerAccount": {
          "description": "Payment Method:",
          "$ref": "#/definitions/CollectionPayerAccountInput"
        },
        "proposalNumber": {
          "type": "string",
          "description": "Proposal number"
        }
      }
    },
    "BeneficiaryInput": {
      "type": "object",
      "properties": {
        "beneType": {
          "type": "string",
          "example": "2",
          "description": "Beneficiaries, 1 beneficiaries<br>2 - beneficiaries<br>3 - insured beneficiaries",
          "enum": [
            "1",
            "2",
            "3"
          ]
        },
        "designation": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship to the insured<br>1 - wife<br>2 - husband<br>3 - child<br>4 - father<br>5 - mother<br>6 - Grand father<br>7 - Grandparent<br>8 - brother<br>9 - sister<br>10 - uncle<br>11 - untie<br>12 - cousin<br>13 - nephew(niece)<br>14 - employer<br>15 - other<br>16 - self",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16
          ]
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "insuredPartySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Insured customer temporary number, request within the use of a unique identification request within a party"
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "Customer temporary number, internal usage. Unique identify the customer for one request"
        },
        "shareOrder": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Benefit order"
        },
        "shareRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Benefit ratio, up to 1"
        }
      }
    },
    "PolicyCustomer": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Customer address",
          "$ref": "#/definitions/Address"
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "Policy customer internal serial number, UUID type",
          "readOnly": true
        },
        "organization": {
          "description": "Organization customer information",
          "$ref": "#/definitions/Organization"
        },
        "partyContact": {
          "description": "Party contact information",
          "$ref": "#/definitions/PartyContact"
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "partyType": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The type of the party<br>1 - the personal party<br>2 - organization",
          "enum": [
            1,
            2
          ]
        },
        "person": {
          "description": "Personal customer information",
          "$ref": "#/definitions/Person"
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "SingleTopupInput": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "investRates": {
          "type": "array",
          "description": "Investment rate list",
          "items": {
            "$ref": "#/definitions/ContractInvestRateInput"
          }
        },
        "topupAmount": {
          "type": "number",
          "format": "double",
          "example": 10000,
          "description": "Top-up amount"
        }
      }
    },
    "CustomerDeclarationDetail": {
      "type": "object",
      "properties": {
        "declId": {
          "type": "integer",
          "format": "int64",
          "description": "Declaration item number, number type"
        },
        "declListId": {
          "type": "string",
          "description": "Customer declaration internal serial number, UUID type",
          "readOnly": true
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fill1": {
          "type": "string",
          "description": "Declaration item to answer the content 1, character type, the content with the different items and different"
        },
        "fill10": {
          "type": "string",
          "description": "Declaration item to answer the content 10, character type, the content with the different items and different"
        },
        "fill2": {
          "type": "string",
          "description": "Declaration item to answer the content 2, character type, the content with the different items and different"
        },
        "fill3": {
          "type": "string",
          "description": "Declaration item to answer the content 3, character type, the content with the different items and different"
        },
        "fill4": {
          "type": "string",
          "description": "Declaration item to answer the content 4, character type, the content with the different items and different"
        },
        "fill5": {
          "type": "string",
          "description": "Declaration item to answer the content 5, character type, the content with the different items and different"
        },
        "fill6": {
          "type": "string",
          "description": "Declaration item to answer the content 6, character type, the content with the different items and different"
        },
        "fill7": {
          "type": "string",
          "description": "Declaration item to answer the content 7, character type, the content with the different items and different"
        },
        "fill8": {
          "type": "string",
          "description": "Declaration item to answer the content 8, character type, the content with the different items and different"
        },
        "fill9": {
          "type": "string",
          "description": "Declaration item to answer the content 9, character type, the content with the different items and different"
        },
        "listId": {
          "type": "string",
          "description": "Customer declaration details of the internal serial number, UUID type",
          "readOnly": true
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "PolicyHolder": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "Policy role internal serial number, UUID type",
          "readOnly": true
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        },
        "relationToLA": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship between the insured and the insured, the number type<br>1 - own<br>2 - parent<br>3 - spouse<br>10 - child<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            7
          ]
        }
      }
    },
    "RecurringTopupInvestRate": {
      "type": "object",
      "properties": {
        "addPremId": {
          "type": "string",
          "description": "Add premium ID, UUID type",
          "readOnly": true
        },
        "assignRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Fund assign ratio"
        },
        "coverageId": {
          "type": "string",
          "description": "Insurance coverage(benefit) ID, UUID type",
          "readOnly": true
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fundCode": {
          "type": "string",
          "example": "F001",
          "description": "Fund code"
        },
        "listId": {
          "type": "string",
          "description": "Insurance type insured internal serial number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "PolicyHolderInput": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Customer temporary number, internal usage. Unique identify the customer for one request"
        },
        "relationToLA": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship between the insured and the insured, the number type<br>1 - own<br>2 - parent<br>3 - spouse<br>10 - child<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            7
          ]
        }
      }
    },
    "CustomerDeclarationDetailInput": {
      "type": "object",
      "properties": {
        "declId": {
          "type": "integer",
          "format": "int64",
          "description": "Declaration item number, number type"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fill1": {
          "type": "string",
          "description": "Declaration item to answer the content 1, character type, the content with the different items and different"
        },
        "fill10": {
          "type": "string",
          "description": "Declaration item to answer the content 10, character type, the content with the different items and different"
        },
        "fill2": {
          "type": "string",
          "description": "Declaration item to answer the content 2, character type, the content with the different items and different"
        },
        "fill3": {
          "type": "string",
          "description": "Declaration item to answer the content 3, character type, the content with the different items and different"
        },
        "fill4": {
          "type": "string",
          "description": "Declaration item to answer the content 4, character type, the content with the different items and different"
        },
        "fill5": {
          "type": "string",
          "description": "Declaration item to answer the content 5, character type, the content with the different items and different"
        },
        "fill6": {
          "type": "string",
          "description": "Declaration item to answer the content 6, character type, the content with the different items and different"
        },
        "fill7": {
          "type": "string",
          "description": "Declaration item to answer the content 7, character type, the content with the different items and different"
        },
        "fill8": {
          "type": "string",
          "description": "Declaration item to answer the content 8, character type, the content with the different items and different"
        },
        "fill9": {
          "type": "string",
          "description": "Declaration item to answer the content 9, character type, the content with the different items and different"
        }
      }
    },
    "ApplicationRequest": {
      "type": "object",
      "required": [
        "policy"
      ],
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        },
        "policy": {
          "description": "Policy",
          "$ref": "#/definitions/PolicyInput"
        }
      }
    },
    "CustomerDeclarationInput": {
      "type": "object",
      "properties": {
        "declarationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Declaration date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "details": {
          "type": "array",
          "description": "Declaration details",
          "items": {
            "$ref": "#/definitions/CustomerDeclarationDetailInput"
          }
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Customer temporary number, internal usage. Unique identify the customer for one request"
        }
      }
    },
    "PolicyInput": {
      "type": "object",
      "properties": {
        "applyDate": {
          "type": "string",
          "format": "date-time",
          "description": "Application date, non-empty, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "beneficiaries": {
          "type": "array",
          "description": "List of beneficiaries",
          "items": {
            "$ref": "#/definitions/BeneficiaryInput"
          }
        },
        "coverages": {
          "type": "array",
          "description": "Policy's coverage list",
          "items": {
            "$ref": "#/definitions/CoverageInput"
          }
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Currency, non empty<br>1 - CNY",
          "enum": [
            1
          ]
        },
        "customers": {
          "type": "array",
          "description": "Policy customer list",
          "items": {
            "$ref": "#/definitions/PolicyCustomerInput"
          }
        },
        "declarations": {
          "type": "array",
          "description": "Customer declaration list",
          "items": {
            "$ref": "#/definitions/CustomerDeclarationInput"
          }
        },
        "deliverType": {
          "type": "string",
          "example": "M",
          "description": "Policy delivery method<br>H - by people<br>M - by mail",
          "enum": [
            "H",
            "M"
          ]
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Termination date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy effective date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Policy premium"
        },
        "insureds": {
          "type": "array",
          "description": "Policy insured list",
          "items": {
            "$ref": "#/definitions/InsuredInput"
          }
        },
        "insurerCode": {
          "type": "string",
          "description": "Insurance company code"
        },
        "payerAccounts": {
          "type": "array",
          "description": "Payment list",
          "items": {
            "$ref": "#/definitions/PayerAccountInput"
          }
        },
        "payers": {
          "type": "array",
          "description": "Payer list",
          "items": {
            "$ref": "#/definitions/PayerInput"
          }
        },
        "policyHolder": {
          "description": "Policy holder",
          "$ref": "#/definitions/PolicyHolderInput"
        },
        "policyPackage": {
          "description": "Product package",
          "$ref": "#/definitions/PolicyPackageInput"
        },
        "policyType": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Policy type<br>1 - Individual policy<br>2 - Group policy<br>3 - Banc assurance",
          "enum": [
            1,
            2,
            3
          ]
        },
        "preprintedProposalNumber": {
          "type": "string",
          "description": "Pre-printed proposal number"
        },
        "quotationCode": {
          "type": "string",
          "description": "Quotation calculation request number"
        },
        "salesChannelCode": {
          "type": "string",
          "description": "Sales channel code"
        },
        "serviceAgentCode": {
          "type": "string",
          "description": "Policy agent code"
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of submission, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "trustees": {
          "type": "array",
          "description": "List of trustees",
          "items": {
            "$ref": "#/definitions/TrusteeInput"
          }
        }
      }
    },
    "Trustee": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "Policy role internal serial number, UUID type",
          "readOnly": true
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "CoverageExtWaiverInput": {
      "type": "object",
      "properties": {
        "waivedSa": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "PageableProposalCriteria": {
      "type": "object",
      "properties": {
        "applyDateFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-01",
          "description": "Search criteria: application date from"
        },
        "applyDateTo": {
          "type": "string",
          "format": "date-time",
          "example": "2017-08-01",
          "description": "Search criteria: application date to"
        },
        "brokerCode": {
          "type": "string",
          "example": "XM",
          "description": "Search criteria: broker code"
        },
        "certiCode": {
          "type": "string",
          "example": "1234567890",
          "description": "Search criteria: id no. of policy customer (policy holder or insured)"
        },
        "contractorCode": {
          "type": "string",
          "example": "XM",
          "description": "Search criteria: contractor code"
        },
        "insurerCode": {
          "type": "string",
          "example": "AX_HEALTH",
          "description": "Search criteria: insurer code"
        },
        "masterProductCode": {
          "type": "string",
          "example": "07H004",
          "description": "Search criteria: code of master product"
        },
        "name": {
          "type": "string",
          "example": "name",
          "description": "Search criteria: name of policy customer (policy holder or insured)"
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page criteria: target page number, start from 0"
        },
        "proposalNumber": {
          "type": "string",
          "description": "Search criteria: application code"
        },
        "quotationCode": {
          "type": "string",
          "description": "Search criteria: order no."
        },
        "salesChannelCode": {
          "type": "string",
          "example": "XINHUA",
          "description": "Search criteria: sales channel code"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Page criteria: how many records per page, default as 10"
        }
      }
    },
    "ApplicationResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "messages": {
          "type": "array",
          "description": "Business failure reason description list node",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "policy": {
          "description": "Policy",
          "$ref": "#/definitions/ApplicationPolicyResult"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        }
      }
    },
    "ApplicationPolicyResult": {
      "type": "object",
      "properties": {
        "coverages": {
          "type": "array",
          "description": "Policy's coverage list",
          "items": {
            "$ref": "#/definitions/CoverageCalculationResult"
          }
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Currency, non empty<br>1 - CNY",
          "enum": [
            1
          ]
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "groupProposalNumber": {
          "type": "string",
          "description": "Group proposal No."
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy effective date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Policy premium",
          "readOnly": true
        },
        "policyNumber": {
          "type": "string",
          "description": "Policy number"
        },
        "proposalNumber": {
          "type": "string",
          "description": "Proposal number"
        },
        "quotationCode": {
          "type": "string",
          "description": "Quotation calculation request number"
        }
      }
    },
    "IssuranceRequest": {
      "type": "object",
      "required": [
        "policy"
      ],
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "collection": {
          "description": "Charge information",
          "$ref": "#/definitions/CollectionInput"
        },
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        },
        "policy": {
          "description": "Policy",
          "$ref": "#/definitions/CollectionPolicyInput"
        }
      }
    },
    "Coverage": {
      "type": "object",
      "properties": {
        "chargePeriod": {
          "type": "string",
          "example": "2",
          "description": "Payment period type, non-empty<br>1 - single<br>2 - per year<br>3 to a certain age<br>4 - whole life",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "example": 20,
          "description": "Payment period, non-empty<br>0 - single;<br>by age: till which age or to pay the payment period: the pay years;<br>whole life is 100"
        },
        "coverageAgents": {
          "type": "array",
          "description": "List of performance sharing of agent",
          "items": {
            "$ref": "#/definitions/CoverageAgent"
          }
        },
        "coverageId": {
          "type": "string",
          "description": "Insurance coverage(benefit) ID, UUID type",
          "readOnly": true
        },
        "coveragePeriod": {
          "type": "string",
          "example": "1",
          "description": "Coverage type<br>1 - whole life<br>2 - per year<br>3 - Cover to a certain age<br>4 - per month<br>5 - per day",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "coverageSeriaId": {
          "type": "integer",
          "format": "int64",
          "description": "Sum assured type temporary serial number, the request within the use of a unique identification within a certain kind of insurance"
        },
        "coverageYear": {
          "type": "integer",
          "format": "int32",
          "description": "Coverage Term. Meaning of this property is associated with property \"coveragePeriod\" (\"type\" for short). when covers whole life, value of this property is 9999;<br>and if type is 2, means years covered;<br>and if type is 3, means age when coverage expired;<br>and if type is 4, means months covered;<br>and if type is 5, means days covered."
        },
        "currentPremium": {
          "description": "The current period premium",
          "$ref": "#/definitions/CoveragePremium"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "insureds": {
          "type": "array",
          "description": "List of insured",
          "items": {
            "$ref": "#/definitions/CoverageInsured"
          }
        },
        "masterCoverageId": {
          "type": "string",
          "description": "Main serial number, UUID type",
          "readOnly": true
        },
        "nextPremium": {
          "$ref": "#/definitions/CoveragePremium"
        },
        "payPlans": {
          "type": "array",
          "description": "Payment plan list",
          "items": {
            "$ref": "#/definitions/PayPlan"
          }
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        },
        "premInvestRates": {
          "type": "array",
          "description": "The ratio of premium and investment amount",
          "items": {
            "$ref": "#/definitions/PremInvestRate"
          }
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "productId": {
          "type": "integer",
          "format": "int64",
          "description": "Product ID"
        },
        "recurringTopup": {
          "description": "Recurring top-up",
          "$ref": "#/definitions/RecurringTopup"
        },
        "singleTopup": {
          "description": "Single top-up",
          "$ref": "#/definitions/SingleTopup"
        },
        "waiverExt": {
          "description": "Waiver plan information",
          "$ref": "#/definitions/CoverageExtWaiver"
        }
      }
    },
    "BankAccount": {
      "type": "object",
      "properties": {
        "accoName": {
          "type": "string",
          "example": "张三",
          "description": "Account holder name"
        },
        "accountId": {
          "type": "string",
          "description": "Bank account internal serial number, UUID type",
          "readOnly": true
        },
        "accountType": {
          "type": "string",
          "example": "2",
          "description": "Account type, 2 debit card<br>8 - credit card",
          "enum": [
            "2",
            "8"
          ]
        },
        "bankAccount": {
          "type": "string",
          "example": "1111222233334444567",
          "description": "Bank Account"
        },
        "bankAccountCity": {
          "type": "string",
          "example": "Shanghai",
          "description": "The city, the bank account belongs to"
        },
        "bankAccountProvince": {
          "type": "string",
          "example": "Shanghai",
          "description": "The province, the bank account belongs to"
        },
        "bankCode": {
          "type": "string",
          "example": "test_bank",
          "description": "Bank code"
        },
        "branchCode": {
          "type": "string",
          "example": "1001",
          "description": "Branch code"
        },
        "creditCardType": {
          "type": "string",
          "example": "1",
          "description": "Credit card type, if not credit card, be empty<br>1 - Master<br>2 - Visa<br>3 - BCA<br>4 - JCB",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "debitCreditType": {
          "type": "string",
          "example": "0",
          "description": "Account use<br>0 - pay and use<br>1 - fee<br>2 - refund",
          "enum": [
            "0",
            "1",
            "2"
          ]
        },
        "expireDate": {
          "type": "string",
          "format": "date-time",
          "example": "10/2020",
          "description": "Account expiration date, MM / yyyy"
        },
        "issueBankName": {
          "type": "string",
          "example": "ICBC",
          "description": "Card issue bank"
        }
      }
    },
    "EPolicyResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "messages": {
          "type": "array",
          "description": "Business failure reason description list node",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "policy": {
          "description": "Policy",
          "$ref": "#/definitions/EPolicyResult"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        }
      }
    },
    "QuotationPolicyResult": {
      "type": "object",
      "properties": {
        "coverages": {
          "type": "array",
          "description": "Policy's coverage list",
          "items": {
            "$ref": "#/definitions/CoverageCalculationResult"
          }
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Currency, non empty<br>1 - CNY",
          "enum": [
            1
          ]
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy effective date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Policy premium",
          "readOnly": true
        },
        "quotationCode": {
          "type": "string",
          "description": "Quotation calculation request number"
        }
      }
    },
    "PayerInput": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Customer temporary number, internal usage. Unique identify the customer for one request"
        },
        "relationToPH": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship between the insured and the payer, integer type<br>1 - self<br>2 - child<br>3 - spouse<br>10 - parent<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            7
          ]
        },
        "shareRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Payment ratio, up to 1"
        }
      }
    },
    "CoverageExtWaiver": {
      "type": "object",
      "properties": {
        "waivedSa": {
          "type": "number",
          "format": "double",
          "description": "Exempt from the amount of insurance, 0 that a full exemption, not 0 that exemption from the specified amount, can not exceed the insurance premium is exempt"
        },
        "waiver": {
          "type": "string",
          "example": "N",
          "description": "Is waiver<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        }
      }
    },
    "EPolicyResult": {
      "type": "object",
      "properties": {
        "ePolicyDownloadUrl": {
          "type": "string",
          "description": "Electronic policy download address"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "policyNumber": {
          "type": "string",
          "description": "Policy number"
        },
        "proposalNumber": {
          "type": "string",
          "description": "Proposal number"
        }
      }
    },
    "RecurringTopup": {
      "type": "object",
      "properties": {
        "addPremId": {
          "type": "string",
          "description": "Insurance type insured internal serial number, UUID type",
          "readOnly": true
        },
        "coverageId": {
          "type": "string",
          "description": "Insurance coverage(benefit) ID, UUID type",
          "readOnly": true
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "investRates": {
          "type": "array",
          "description": "Investment rate list",
          "items": {
            "$ref": "#/definitions/RecurringTopupInvestRate"
          }
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        },
        "topupAmount": {
          "type": "number",
          "format": "double",
          "example": 10000,
          "description": "Top-up amount"
        }
      }
    },
    "RecurringTopupInput": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "investRates": {
          "type": "array",
          "description": "Investment rate list",
          "items": {
            "$ref": "#/definitions/ContractInvestRateInput"
          }
        },
        "topupAmount": {
          "type": "number",
          "format": "double",
          "example": 10000,
          "description": "Top-up amount"
        }
      }
    },
    "CoveragePremium": {
      "type": "object",
      "properties": {
        "benefitLevel": {
          "type": "string",
          "description": "Plan benefit level, the product insured by the level of non-empty"
        },
        "paymentFreq": {
          "type": "string",
          "example": "1",
          "description": "Pay frequency<br>1 - yearly payment<br>2 - half yearly payment<br>3 - quarterly payment<br>4 - monthly payment<br>5 - single premium",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "premium": {
          "type": "number",
          "format": "double",
          "example": 2314,
          "description": "Insurance premium, non empty when calculate SA base on premium"
        },
        "sumAssured": {
          "type": "number",
          "format": "double",
          "example": 100000,
          "description": "Insurance SA, non empty when calculate premium base on SA"
        },
        "unit": {
          "type": "number",
          "format": "double",
          "description": "Product unit, non empty when by unit insurance"
        }
      }
    },
    "BankAccountInput": {
      "type": "object",
      "properties": {
        "accoName": {
          "type": "string",
          "example": "张三",
          "description": "Account holder name"
        },
        "accountType": {
          "type": "string",
          "example": "2",
          "description": "Account type, 2 debit card<br>8 - credit card",
          "enum": [
            "2",
            "8"
          ]
        },
        "bankAccount": {
          "type": "string",
          "example": "1111222233334444567",
          "description": "Bank Account"
        },
        "bankAccountCity": {
          "type": "string",
          "example": "Shanghai",
          "description": "The city, the bank account belongs to"
        },
        "bankAccountProvince": {
          "type": "string",
          "example": "Shanghai",
          "description": "The province, the bank account belongs to"
        },
        "bankCode": {
          "type": "string",
          "example": "test_bank",
          "description": "Bank code"
        },
        "creditCardType": {
          "type": "string",
          "example": "1",
          "description": "Credit card type, if not credit card, be empty<br>1 - Master<br>2 - Visa<br>3 - BCA<br>4 - JCB",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "debitCreditType": {
          "type": "string",
          "example": "0",
          "description": "Account use<br>0 - pay and use<br>1 - fee<br>2 - refund",
          "enum": [
            "0",
            "1",
            "2"
          ]
        },
        "expireDate": {
          "type": "string",
          "format": "date-time",
          "example": "10/2020",
          "description": "Account expiration date, MM / yyyy"
        },
        "issueBankName": {
          "type": "string",
          "example": "ICBC",
          "description": "Card issue bank"
        }
      }
    },
    "CollectionPayerAccountInput": {
      "type": "object",
      "properties": {
        "bankAccount": {
          "description": "The first premium bank account",
          "$ref": "#/definitions/BankAccountInput"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "paymentMethod": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "First time payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card<br>80 - 3rd party payment",
          "enum": [
            1,
            2,
            3,
            30,
            80
          ]
        }
      }
    },
    "PayerAccountInput": {
      "type": "object",
      "properties": {
        "bankAccount": {
          "description": "The first premium bank account",
          "$ref": "#/definitions/BankAccountInput"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "nextBankAccount": {
          "description": "Renewal premium bank account",
          "$ref": "#/definitions/BankAccountInput"
        },
        "paymentMethod": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "First time payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card",
          "enum": [
            1,
            2,
            3,
            30,
            80
          ]
        },
        "paymentMethodNext": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "Renewal payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card",
          "enum": [
            1,
            2,
            3,
            30,
            80
          ]
        }
      }
    },
    "QuotationRequest": {
      "type": "object",
      "required": [
        "policy"
      ],
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        },
        "policy": {
          "description": "Policy",
          "$ref": "#/definitions/PolicyInput"
        }
      }
    },
    "Beneficiary": {
      "type": "object",
      "properties": {
        "beneType": {
          "type": "string",
          "example": "2",
          "description": "Beneficiaries, 1 beneficiaries<br>2 - beneficiaries<br>3 - insured beneficiaries",
          "enum": [
            "1",
            "2",
            "3"
          ]
        },
        "designation": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship to the insured<br>1 - wife<br>2 - husband<br>3 - child<br>4 - father<br>5 - mother<br>6 - Grand father<br>7 - Grandparent<br>8 - brother<br>9 - sister<br>10 - uncle<br>11 - untie<br>12 - cousin<br>13 - nephew(niece)<br>14 - employer<br>15 - other<br>16 - self",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16
          ]
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "insuredPartyId": {
          "type": "string",
          "description": "Internal ID for the beneficiary according to the insured , UUID type",
          "readOnly": true
        },
        "listId": {
          "type": "string",
          "description": "Policy role internal serial number, UUID type",
          "readOnly": true
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        },
        "shareOrder": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Benefit order"
        },
        "shareRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Benefit ratio, up to 1"
        }
      }
    }
  },
  "paths": {
    "/pd/packages": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get a package list",
        "description": "Obtain a product list according to the criteria, the product list contains the product of basic information",
        "operationId": "findPackagesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date, package sales before this date, format (YYYY-MM-DD)",
            "required": false,
            "type": "string"
          },
          {
            "name": "salesCategory",
            "in": "query",
            "description": "Date, product sales before this date, format (YYYY-MM-DD)",
            "required": false,
            "type": "string"
          },
          {
            "name": "insurerIds",
            "in": "query",
            "description": "The list of insurance companies, product sales category can be multiple, if multiple are separated by commas (,)",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackagesResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/pd/packages/{packageCode}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get one package detail",
        "description": "Get the product package list",
        "operationId": "findProductPackageUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "packageCode",
            "in": "path",
            "description": "Product package code",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackageResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/pd/products": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get the product list",
        "description": "Get product package detail",
        "operationId": "findProductsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date, package sales before this date, format (YYYY-MM-DD)",
            "required": false,
            "type": "string"
          },
          {
            "name": "salesCategory",
            "in": "query",
            "description": "Date, product sales before this date, format (YYYY-MM-DD)",
            "required": false,
            "type": "string"
          },
          {
            "name": "insurerCodes",
            "in": "query",
            "description": "The list of insurance companies, product sales category can be multiple, if multiple are separated by commas (,)",
            "required": false,
            "type": "string"
          },
          {
            "name": "isMainProduct",
            "in": "query",
            "description": "Whether it is the main plan",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductsResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/pd/products/benefitIllustration": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Benefit Illustration",
        "description": "Product benefit illustration",
        "operationId": "illustrateCalculationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "illustrationRequest",
            "description": "Insurance illustration calculation data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IllustrationRequest"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IllustrationResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/pd/products/benefitPremiumSA": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Calculate premium or SA",
        "description": "Calculate premium base on SA or calculate SA base on premium",
        "operationId": "benefitPremiumSAUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "calculateRequest",
            "description": "Insurance premium calculation data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalculatePremSARequest"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CalculatePremSAResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/pd/products/limits/SA": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Enquiry SA limit by some conditions",
        "description": "Enquiry SA limit by some conditions",
        "operationId": "getSALimitByConUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "saLimitCon",
            "description": "SA limit enquire request and parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaLimitCon"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductSumAssuredResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/pd/products/limits/age": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Enquiry age limit by some conditions",
        "description": "Enquiry age limit by some conditions",
        "operationId": "getAgeLimitByConUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "ageLimitCon",
            "description": "Age limit enquiry conditions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgeLimitCon"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductAgeResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/pd/products/limits/premium": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Enquiry premium limit by some conditions",
        "description": "Enquiry premium limit by some conditions",
        "operationId": "getPremiumLimitByConUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "premiumLimitCon",
            "description": "Premium limit enquire request and parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PremiumLimitCon"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductPremiumResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/pd/products/limits/term": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Enquiry term limit by some conditions",
        "description": "Enquiry term limit by some conditions",
        "operationId": "getTermLimitByConUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "termLimitCon",
            "description": "Term limit enquiry conditions",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TermLimitCon"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductTermResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/pd/products/ratingParameters": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get rating relations for the particular product",
        "description": "Get rating relations for the particular product",
        "operationId": "getRatingParametersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "productCode",
            "in": "query",
            "description": "Product code",
            "required": true,
            "type": "string"
          },
          {
            "name": "ratingParameterType",
            "in": "query",
            "description": "Rating relation type: <br>1 - related to premium calculation",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductRatingParametersResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/pd/products/salesCategory": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get sales products category list",
        "description": "Get a list of all sales products for one tenant",
        "operationId": "findSalesCategoryUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SalesCategoryResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/pd/products/salesCategory/{productCode}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get one particular sales products for one tenant",
        "description": "Get one particular sales products for one tenant",
        "operationId": "findProductSalesCategoryUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Product code",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SalesCategoryResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/pd/products/{productCode}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get product detail",
        "description": "According to the product code, get the details of a product",
        "operationId": "findProductUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Product code",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/proposal/proposals/application": {
      "post": {
        "tags": [
          "Proposal"
        ],
        "summary": "Application",
        "description": "Calculate the premium and verify the insurance underwriting rules, if passed, then generate an insurance policy number",
        "operationId": "applyUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationRequest"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/proposal/proposals/epolicy/{proposalNumber}": {
      "get": {
        "tags": [
          "Proposal"
        ],
        "summary": "Get ePolicy download URI by proposal No. after policy issued",
        "description": "Get ePolicy download URI by proposal No. after policy issued",
        "operationId": "getEPolicyDownloadUrlUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "proposalNumber",
            "in": "path",
            "description": "Proposal number",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EPolicyResponse"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/proposal/proposals/issurance": {
      "post": {
        "tags": [
          "Proposal"
        ],
        "summary": "Collection & Issue policy",
        "description": "After the premium collection, issue the policy",
        "operationId": "issueUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssuranceRequest"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IssuranceResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/proposal/proposals/pre-verification": {
      "post": {
        "tags": [
          "Proposal"
        ],
        "summary": "Proposal pre-verification",
        "description": "Calculate the premium and verify the risk of insurance",
        "operationId": "quoteUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuotationRequest"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QuotationResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  }
}