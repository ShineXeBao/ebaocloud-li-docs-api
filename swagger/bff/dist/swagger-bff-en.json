{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "eBaoCloud OpenAPI for Mobile BFF (Backends for Frontends)",
    "termsOfService": "http://li.ebaocloud.com.cn/bff/",
    "contact": {
      "name": "eBaoTech"
    },
    "description": "This document is the API specification for the eBaoCloud Life part. To practice and run the APIs in this document, you need to apply an eBaoCloud tenant account(starting from a sandbox account instead of production account) first.<br>\nContact liliang.zhu@ebaotech.com for more information and trial using.\n\n# Built on\nTue Mar 13 2018, 18:17:58 +08:00\n\n# Versioning\nAPI version| Date  |Comments\n"
  },
  "host": "eli.ebaocloud.com.cn",
  "basePath": "/bff",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "tags": [
    {
      "name": "Wechat"
    },
    {
      "name": "Tools"
    },
    {
      "name": "Proposal"
    },
    {
      "name": "Login"
    },
    {
      "name": "Callback"
    },
    {
      "name": "eBaoCloud-Li"
    },
    {
      "name": "Transaction"
    },
    {
      "name": "Calculate Premium"
    }
  ],
  "definitions": {
    "ValueAdded": {
      "type": "object",
      "properties": {
        "displayOrder": {
          "type": "integer",
          "format": "int64"
        },
        "valueAddedDescPic": {
          "type": "string"
        },
        "valueAddedId": {
          "type": "integer",
          "format": "int64"
        },
        "valueAddedName": {
          "type": "string"
        }
      }
    },
    "ToolsSignRequest": {
      "type": "object",
      "properties": {
        "charSet": {
          "type": "string"
        },
        "insuredCompanyCode": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "salesChannelCode": {
          "type": "string"
        },
        "sign": {
          "type": "string"
        },
        "tenantCode": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "cityCode": {
          "type": "string"
        },
        "disabled": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "langId": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "openId": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "provinceCode": {
          "type": "string"
        },
        "realName": {
          "type": "string"
        },
        "tenantCode": {
          "type": "string"
        },
        "tenantID": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "userFlag": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "addressExt1": {
          "type": "string"
        },
        "addressExt2": {
          "type": "string"
        },
        "addressId": {
          "type": "integer",
          "format": "int64",
          "description": "Address internal serial number, UUID type"
        },
        "city": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "postCode": {
          "type": "string",
          "description": "Post code"
        },
        "province": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "UserData": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "ToolsSignResponse": {
      "type": "object",
      "properties": {
        "decodeMsg": {
          "type": "string"
        },
        "encodeMsg": {
          "type": "string"
        },
        "errorMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "CalcPremiumRequest": {
      "type": "object",
      "properties": {
        "encryptedUserData": {
          "type": "string"
        },
        "langId": {
          "type": "string"
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        }
      }
    },
    "IllusItem": {
      "type": "object",
      "properties": {
        "displayOrder": {
          "type": "string"
        },
        "type": {
          "type": "integer",
          "format": "int64"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "CustomerDeclarationDetailInput": {
      "type": "object",
      "properties": {
        "declId": {
          "type": "integer",
          "format": "int64",
          "description": "Declaration item number, number type"
        },
        "extraProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fill1": {
          "type": "string",
          "description": "Declaration item to answer the content 1, character type, the content with the different items and different"
        },
        "fill10": {
          "type": "string",
          "description": "Declaration item to answer the content 10, character type, the content with the different items and different"
        },
        "fill2": {
          "type": "string",
          "description": "Declaration item to answer the content 2, character type, the content with the different items and different"
        },
        "fill3": {
          "type": "string",
          "description": "Declaration item to answer the content 3, character type, the content with the different items and different"
        },
        "fill4": {
          "type": "string",
          "description": "Declaration item to answer the content 4, character type, the content with the different items and different"
        },
        "fill5": {
          "type": "string",
          "description": "Declaration item to answer the content 5, character type, the content with the different items and different"
        },
        "fill6": {
          "type": "string",
          "description": "Declaration item to answer the content 6, character type, the content with the different items and different"
        },
        "fill7": {
          "type": "string",
          "description": "Declaration item to answer the content 7, character type, the content with the different items and different"
        },
        "fill8": {
          "type": "string",
          "description": "Declaration item to answer the content 8, character type, the content with the different items and different"
        },
        "fill9": {
          "type": "string",
          "description": "Declaration item to answer the content 9, character type, the content with the different items and different"
        }
      }
    },
    "TopupWithdraw": {
      "type": "object",
      "properties": {
        "addPeriod": {
          "type": "integer",
          "format": "int64"
        },
        "addPremAn": {
          "type": "number",
          "format": "double"
        },
        "addPremType": {
          "type": "string"
        },
        "addStartDate": {
          "type": "string",
          "format": "date-time"
        },
        "addYear": {
          "type": "integer",
          "format": "int64"
        },
        "amount": {
          "type": "number",
          "format": "double"
        },
        "chargeMode": {
          "type": "string"
        },
        "endYear": {
          "type": "integer",
          "format": "int64"
        },
        "paidupDate": {
          "type": "string",
          "format": "date-time"
        },
        "payMode": {
          "type": "integer",
          "format": "int64"
        },
        "payToDate": {
          "type": "string",
          "format": "date-time"
        },
        "premType": {
          "type": "string"
        },
        "startYear": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CustomerDeclarationInput": {
      "type": "object",
      "properties": {
        "declarationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Declaration date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "declarationDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerDeclarationDetailInput"
          }
        },
        "extraProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "partyId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ChargePeriod": {
      "type": "object",
      "properties": {
        "periodType": {
          "type": "integer",
          "format": "int32"
        },
        "periodValue": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "IllustrationCalcResponse": {
      "type": "object",
      "properties": {
        "errorMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "illusMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Map«string,List«IllusItem»»"
          }
        },
        "illusRate": {
          "type": "object"
        },
        "isULProduct": {
          "type": "string"
        },
        "mainAssuredAge": {
          "type": "integer",
          "format": "int32"
        },
        "quotationCode": {
          "type": "string"
        },
        "quotationId": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "CollectionInput": {
      "type": "object",
      "properties": {
        "arapCollectionTime": {
          "type": "string",
          "format": "date-time"
        },
        "arapIndicator": {
          "type": "string"
        },
        "bankAccount": {
          "type": "string"
        },
        "bankCode": {
          "type": "string"
        },
        "collectionDate": {
          "type": "string",
          "format": "date-time"
        },
        "collectionNo": {
          "type": "string"
        },
        "collectionTime": {
          "type": "string",
          "format": "date-time"
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "description": "Currency, non empty<br>1 - CNY"
        },
        "extraProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "feeAmount": {
          "type": "number",
          "format": "double",
          "description": "The actual amount of money"
        },
        "paymentMethod": {
          "type": "integer",
          "format": "int32"
        },
        "paymentPlatform": {
          "type": "integer",
          "format": "int64",
          "description": "Third party payment platform code"
        },
        "policyNumber": {
          "type": "string"
        },
        "proposalNumber": {
          "type": "string"
        },
        "thirdPtyPayNo": {
          "type": "string"
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/UserData"
        },
        "errorMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "IllustrationCalcRequest": {
      "type": "object",
      "properties": {
        "encryptedUserData": {
          "type": "string"
        },
        "langId": {
          "type": "string"
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        }
      }
    },
    "ProposalRequest": {
      "type": "object",
      "properties": {
        "encryptedUserData": {
          "type": "string"
        },
        "langId": {
          "type": "string"
        },
        "proposalInfo": {
          "$ref": "#/definitions/ProposalInfo"
        },
        "proposalRequestId": {
          "type": "string"
        },
        "proposalRequestTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ProposalListInfoResponse": {
      "type": "object",
      "properties": {
        "errorMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "proposalInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProposalInfo"
          }
        },
        "status": {
          "type": "string"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PayPeriod": {
      "type": "object",
      "properties": {
        "periodType": {
          "type": "integer",
          "format": "int32"
        },
        "periodValue": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Coverage": {
      "type": "object",
      "properties": {
        "benefitlevel": {
          "type": "string"
        },
        "chargePeriod": {
          "$ref": "#/definitions/ChargePeriod",
          "description": "Payment period type, non-empty<br>1 - single<br>2 - per year<br>3 to a certain age<br>4 - whole life"
        },
        "coveragePeriod": {
          "$ref": "#/definitions/CoveragePeriod",
          "description": "Coverage type<br>1 - whole life<br>2 - per year<br>3 - Cover to a certain age<br>4 - per month<br>5 - per day"
        },
        "displayPremIndi": {
          "type": "string"
        },
        "firstYearPrem": {
          "type": "number",
          "format": "double"
        },
        "insuredIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "investRates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvestRate"
          }
        },
        "itemId": {
          "type": "integer",
          "format": "int64"
        },
        "masterItemId": {
          "type": "integer",
          "format": "int64"
        },
        "masterProductId": {
          "type": "integer",
          "format": "int64"
        },
        "payPeriod": {
          "$ref": "#/definitions/PayPeriod"
        },
        "paymentFreq": {
          "type": "string"
        },
        "planLiabilityList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlanLiabilityInput"
          }
        },
        "premium": {
          "type": "number",
          "format": "double"
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "productId": {
          "type": "integer",
          "format": "int64",
          "description": "Product ID"
        },
        "productName": {
          "type": "string"
        },
        "sa": {
          "type": "number",
          "format": "double"
        },
        "topupWithdraws": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopupWithdraw"
          }
        },
        "unit": {
          "type": "integer",
          "format": "int32"
        },
        "unitFlag": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "InvestRate": {
      "type": "object",
      "properties": {
        "allocationFlag": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "double"
        },
        "assignRate": {
          "type": "number",
          "format": "double"
        },
        "fundCode": {
          "type": "string"
        },
        "highPlyYear": {
          "type": "integer",
          "format": "int64"
        },
        "listId": {
          "type": "integer",
          "format": "int64"
        },
        "lowPlyYear": {
          "type": "integer",
          "format": "int64"
        },
        "premType": {
          "type": "string"
        }
      }
    },
    "Plan": {
      "type": "object",
      "properties": {
        "advice": {
          "type": "string"
        },
        "insuranceSpirit": {
          "type": "integer",
          "format": "int64"
        },
        "insureds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Insured"
          }
        },
        "mainCoverages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coverage"
          }
        },
        "moneyId": {
          "type": "integer",
          "format": "int32"
        },
        "packageCode": {
          "type": "string"
        },
        "packageId": {
          "type": "integer",
          "format": "int64"
        },
        "proposer": {
          "$ref": "#/definitions/Proposer"
        },
        "quotationCode": {
          "type": "string"
        },
        "quotationId": {
          "type": "integer",
          "format": "int64"
        },
        "riderCoverages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coverage"
          }
        },
        "showAdvice": {
          "type": "string"
        },
        "showValueAdded": {
          "type": "string"
        },
        "totalFirstYearPrem": {
          "type": "number",
          "format": "double"
        },
        "userName": {
          "type": "string"
        },
        "userPhone": {
          "type": "string"
        },
        "valueAddedIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "Insured": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "age": {
          "type": "integer",
          "format": "int32"
        },
        "birthday": {
          "type": "string",
          "format": "date-time"
        },
        "certiBeginDate": {
          "type": "string",
          "format": "date-time"
        },
        "certiCode": {
          "type": "string"
        },
        "certiEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "certiType": {
          "type": "integer",
          "format": "int32"
        },
        "declaration": {
          "$ref": "#/definitions/CustomerDeclarationInput"
        },
        "email": {
          "type": "string"
        },
        "extraProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "gender": {
          "type": "string"
        },
        "height": {
          "type": "number",
          "format": "double"
        },
        "id": {
          "type": "string"
        },
        "jobCateCode": {
          "type": "string"
        },
        "jobCateId": {
          "type": "integer",
          "format": "int64"
        },
        "laPhRela": {
          "type": "integer",
          "format": "int32"
        },
        "marriageStatus": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nationality": {
          "type": "string"
        },
        "smoking": {
          "type": "string"
        },
        "socialInsuranceIndi": {
          "type": "string"
        },
        "weight": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ProposalInfo": {
      "type": "object",
      "properties": {
        "applyCode": {
          "type": "string"
        },
        "beneficiaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Beneficiary"
          }
        },
        "collectionInput": {
          "$ref": "#/definitions/CollectionInput"
        },
        "ePolicyDownloadUrl": {
          "type": "string"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "extraProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inforceDate": {
          "type": "string",
          "format": "date-time"
        },
        "insureds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Insured"
          }
        },
        "mainCoverages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coverage"
          }
        },
        "mainProductName": {
          "type": "string"
        },
        "outboundTenantCode": {
          "type": "string"
        },
        "packageCode": {
          "type": "string"
        },
        "packageId": {
          "type": "integer",
          "format": "int64"
        },
        "packageName": {
          "type": "string"
        },
        "payerAccounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayerAccountInput"
          }
        },
        "policyCode": {
          "type": "string"
        },
        "producerCode": {
          "type": "string"
        },
        "producerId": {
          "type": "integer",
          "format": "int64"
        },
        "productId": {
          "type": "integer",
          "format": "int64"
        },
        "proposalCode": {
          "type": "string"
        },
        "proposalId": {
          "type": "integer",
          "format": "int64"
        },
        "proposalStatus": {
          "type": "string"
        },
        "proposer": {
          "$ref": "#/definitions/Proposer"
        },
        "riderCoverages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coverage"
          }
        },
        "salesChannelCode": {
          "type": "string"
        },
        "salesCompanyCode": {
          "type": "string"
        },
        "submitDate": {
          "type": "string",
          "format": "date-time"
        },
        "totalFirstYearPrem": {
          "type": "number",
          "format": "double"
        },
        "underwritingDesc": {
          "type": "string"
        }
      }
    },
    "CalcPremiumResponse": {
      "type": "object",
      "properties": {
        "coveragePrems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoveragePremium"
          }
        },
        "errorMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        },
        "totalFirstYearPrem": {
          "type": "number",
          "format": "double"
        },
        "valueAddedList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValueAdded"
          }
        }
      }
    },
    "CoveragePremium": {
      "type": "object",
      "properties": {
        "benefitlevel": {
          "type": "string"
        },
        "chargePeriod": {
          "$ref": "#/definitions/ChargePeriod"
        },
        "coveragePeriod": {
          "$ref": "#/definitions/CoveragePeriod"
        },
        "displayPremIndi": {
          "type": "string"
        },
        "firstYearPrem": {
          "type": "number",
          "format": "double"
        },
        "itemId": {
          "type": "integer",
          "format": "int64"
        },
        "premium": {
          "type": "number",
          "format": "double",
          "description": "Insurance premium, non empty when calculate SA base on premium"
        },
        "productId": {
          "type": "integer",
          "format": "int64"
        },
        "productName": {
          "type": "string"
        },
        "sa": {
          "type": "number",
          "format": "double"
        },
        "unit": {
          "type": "integer",
          "format": "int32",
          "description": "Product unit, non empty when by unit insurance"
        },
        "unitFlag": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BankAccountInput": {
      "type": "object",
      "properties": {
        "accoCertiCode": {
          "type": "string"
        },
        "accoName": {
          "type": "string",
          "description": "Account holder name"
        },
        "accountType": {
          "type": "string",
          "description": "Account type, 2 debit card<br>8 - credit card"
        },
        "bankAccount": {
          "type": "string",
          "description": "Bank Account"
        },
        "bankAccountCity": {
          "type": "string",
          "description": "The city, the bank account belongs to"
        },
        "bankAccountProvince": {
          "type": "string",
          "description": "The province, the bank account belongs to"
        },
        "bankCode": {
          "type": "string",
          "description": "Bank code"
        },
        "creditCardType": {
          "type": "string",
          "description": "Credit card type, if not credit card, be empty<br>1 - Master<br>2 - Visa<br>3 - BCA<br>4 - JCB"
        },
        "debitCreditType": {
          "type": "string",
          "description": "Account use<br>0 - pay and use<br>1 - fee<br>2 - refund"
        },
        "expireDate": {
          "type": "string",
          "format": "date-time",
          "description": "Account expiration date, MM / yyyy"
        },
        "extraProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "issueBankName": {
          "type": "string",
          "description": "Card issue bank"
        },
        "partyId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CoveragePeriod": {
      "type": "object",
      "properties": {
        "periodType": {
          "type": "integer",
          "format": "int32"
        },
        "periodValue": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Proposer": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "age": {
          "type": "integer",
          "format": "int32"
        },
        "birthday": {
          "type": "string",
          "format": "date-time"
        },
        "certiBeginDate": {
          "type": "string",
          "format": "date-time"
        },
        "certiCode": {
          "type": "string"
        },
        "certiEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "certiType": {
          "type": "integer",
          "format": "int32"
        },
        "declaration": {
          "$ref": "#/definitions/CustomerDeclarationInput"
        },
        "email": {
          "type": "string"
        },
        "extraProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "gender": {
          "type": "string"
        },
        "height": {
          "type": "number",
          "format": "double"
        },
        "id": {
          "type": "string"
        },
        "income": {
          "type": "integer",
          "format": "int64"
        },
        "jobCateCode": {
          "type": "string"
        },
        "jobCateId": {
          "type": "integer",
          "format": "int64"
        },
        "marriageStatus": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nationality": {
          "type": "string"
        },
        "smoking": {
          "type": "string"
        },
        "socialInsuranceIndi": {
          "type": "string"
        },
        "weight": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Map«string,List«IllusItem»»": {
      "type": "object",
      "additionalProperties": {
        "type": "array"
      }
    },
    "ProposalCriteriaRequest": {
      "type": "object",
      "properties": {
        "asc": {
          "type": "boolean"
        },
        "companyId": {
          "type": "string"
        },
        "encryptedUserData": {
          "type": "string"
        },
        "inforceDate": {
          "type": "string",
          "format": "date-time"
        },
        "inforceEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "inforceStartDate": {
          "type": "string",
          "format": "date-time"
        },
        "insertTime": {
          "type": "string",
          "format": "date-time"
        },
        "laCertiCode": {
          "type": "string"
        },
        "laCertiType": {
          "type": "string"
        },
        "laGerder": {
          "type": "string"
        },
        "laName": {
          "type": "string"
        },
        "langId": {
          "type": "string"
        },
        "orderBy": {
          "type": "string"
        },
        "packageId": {
          "type": "integer",
          "format": "int64"
        },
        "pageNo": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "phCertiCode": {
          "type": "string"
        },
        "phCertiType": {
          "type": "string"
        },
        "phGerder": {
          "type": "string"
        },
        "phName": {
          "type": "string"
        },
        "policyCode": {
          "type": "string"
        },
        "producerCode": {
          "type": "string"
        },
        "producerId": {
          "type": "integer",
          "format": "int64"
        },
        "producerIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "productId": {
          "type": "integer",
          "format": "int64"
        },
        "proposalCode": {
          "type": "string"
        },
        "regEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "regStartDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string"
        },
        "submitChannel": {
          "type": "integer",
          "format": "int32"
        },
        "tenantCode": {
          "type": "string"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PlanLiabilityInput": {
      "type": "object",
      "properties": {
        "liabId": {
          "type": "integer",
          "format": "int64"
        },
        "unitFlag": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "PayerAccountInput": {
      "type": "object",
      "properties": {
        "bankAccount": {
          "$ref": "#/definitions/BankAccountInput",
          "description": "The first premium bank account"
        },
        "extraProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "nextBankAccount": {
          "$ref": "#/definitions/BankAccountInput",
          "description": "Renewal premium bank account"
        },
        "payerId": {
          "type": "integer",
          "format": "int64"
        },
        "paymentMethod": {
          "type": "integer",
          "format": "int32",
          "description": "First time payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card"
        },
        "paymentMethodNext": {
          "type": "integer",
          "format": "int32",
          "description": "Renewal payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card"
        }
      }
    },
    "ProposalResponse": {
      "type": "object",
      "properties": {
        "errorMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "proposalCode": {
          "type": "string"
        },
        "proposalId": {
          "type": "integer",
          "format": "int64"
        },
        "proposalInfo": {
          "$ref": "#/definitions/ProposalInfo"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "Beneficiary": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "age": {
          "type": "integer",
          "format": "int32"
        },
        "birthday": {
          "type": "string",
          "format": "date-time"
        },
        "certiBeginDate": {
          "type": "string",
          "format": "date-time"
        },
        "certiCode": {
          "type": "string"
        },
        "certiEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "certiType": {
          "type": "integer",
          "format": "int32"
        },
        "declaration": {
          "$ref": "#/definitions/CustomerDeclarationInput"
        },
        "email": {
          "type": "string"
        },
        "extraProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "gender": {
          "type": "string"
        },
        "height": {
          "type": "number",
          "format": "double"
        },
        "id": {
          "type": "string"
        },
        "insuredId": {
          "type": "integer",
          "format": "int64"
        },
        "jobCateCode": {
          "type": "string"
        },
        "jobCateId": {
          "type": "integer",
          "format": "int64"
        },
        "marriageStatus": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nationality": {
          "type": "string"
        },
        "relToInsured": {
          "type": "integer",
          "format": "int32"
        },
        "shareRate": {
          "type": "number",
          "format": "double",
          "description": "Benefit ratio, up to 1"
        },
        "smoking": {
          "type": "string"
        },
        "socialInsuranceIndi": {
          "type": "string"
        },
        "weight": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "WeChatRestResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "errcode": {
          "type": "string"
        },
        "errmsg": {
          "type": "string"
        },
        "errorMessages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expiresIn": {
          "type": "integer",
          "format": "int64"
        },
        "groupid": {
          "type": "string"
        },
        "headimgurl": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "noncestr": {
          "type": "string"
        },
        "openid": {
          "type": "string"
        },
        "privilege": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "province": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "remark": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "sex": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "subscribe": {
          "type": "string"
        },
        "subscribeTime": {
          "type": "string"
        },
        "ticket": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "unionid": {
          "type": "string"
        }
      }
    }
  },
  "paths": {
    "/bff/asyncCallback/pay": {
      "post": {
        "tags": [
          "Callback"
        ],
        "summary": "paths['/bff/asyncCallback/pay'].post.summary",
        "description": "paths['/bff/asyncCallback/pay'].post.description",
        "operationId": "payUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "map",
            "description": "paths['/bff/asyncCallback/pay'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/asyncCallback/pay'].post.responses['200'].description",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "paths['/bff/asyncCallback/pay'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/asyncCallback/pay'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/asyncCallback/pay'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/asyncCallback/pay'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/ax/inforce": {
      "post": {
        "tags": [
          "Callback"
        ],
        "summary": "paths['/bff/ax/inforce'].post.summary",
        "description": "paths['/bff/ax/inforce'].post.description",
        "operationId": "inforceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "transNo",
            "in": "query",
            "description": "paths['/bff/ax/inforce'].post.parameters['0'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "transDate",
            "in": "query",
            "description": "paths['/bff/ax/inforce'].post.parameters['1'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestCode",
            "in": "query",
            "description": "paths['/bff/ax/inforce'].post.parameters['2'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "payNo",
            "in": "query",
            "description": "paths['/bff/ax/inforce'].post.parameters['3'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "payType",
            "in": "query",
            "description": "paths['/bff/ax/inforce'].post.parameters['4'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "payAmt",
            "in": "query",
            "description": "paths['/bff/ax/inforce'].post.parameters['5'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "payDate",
            "in": "query",
            "description": "paths['/bff/ax/inforce'].post.parameters['6'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "payResult",
            "in": "query",
            "description": "paths['/bff/ax/inforce'].post.parameters['7'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "payRemark",
            "in": "query",
            "description": "paths['/bff/ax/inforce'].post.parameters['8'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "checkValue",
            "in": "query",
            "description": "paths['/bff/ax/inforce'].post.parameters['9'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "attach",
            "in": "query",
            "description": "paths['/bff/ax/inforce'].post.parameters['10'].description",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/ax/inforce'].post.responses['200'].description",
            "schema": {
              "type": "string"
            }
          },
          "201": {
            "description": "paths['/bff/ax/inforce'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/ax/inforce'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/ax/inforce'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/ax/inforce'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/ebaocloud-li/product/calcPremium": {
      "post": {
        "tags": [
          "eBaoCloud-Li"
        ],
        "summary": "paths['/bff/ebaocloud-li/product/calcPremium'].post.summary",
        "description": "paths['/bff/ebaocloud-li/product/calcPremium'].post.description",
        "operationId": "calcPremiumUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "calcPremiumRequest",
            "description": "paths['/bff/ebaocloud-li/product/calcPremium'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalcPremiumRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/ebaocloud-li/product/calcPremium'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/CalcPremiumResponse"
            }
          },
          "201": {
            "description": "paths['/bff/ebaocloud-li/product/calcPremium'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/ebaocloud-li/product/calcPremium'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/ebaocloud-li/product/calcPremium'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/ebaocloud-li/product/calcPremium'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/ebaocloud-li/product/illustrationCalc": {
      "post": {
        "tags": [
          "eBaoCloud-Li"
        ],
        "summary": "paths['/bff/ebaocloud-li/product/illustrationCalc'].post.summary",
        "description": "paths['/bff/ebaocloud-li/product/illustrationCalc'].post.description",
        "operationId": "illustrationCalcUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "illustrationCalcRequest",
            "description": "paths['/bff/ebaocloud-li/product/illustrationCalc'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IllustrationCalcRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/ebaocloud-li/product/illustrationCalc'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/IllustrationCalcResponse"
            }
          },
          "201": {
            "description": "paths['/bff/ebaocloud-li/product/illustrationCalc'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/ebaocloud-li/product/illustrationCalc'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/ebaocloud-li/product/illustrationCalc'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/ebaocloud-li/product/illustrationCalc'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/ebaocloud-li/proposal/apply": {
      "post": {
        "tags": [
          "eBaoCloud-Li"
        ],
        "summary": "paths['/bff/ebaocloud-li/proposal/apply'].post.summary",
        "description": "paths['/bff/ebaocloud-li/proposal/apply'].post.description",
        "operationId": "applyUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "proposalRequest",
            "description": "paths['/bff/ebaocloud-li/proposal/apply'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProposalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/ebaocloud-li/proposal/apply'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalResponse"
            }
          },
          "201": {
            "description": "paths['/bff/ebaocloud-li/proposal/apply'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/ebaocloud-li/proposal/apply'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/ebaocloud-li/proposal/apply'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/ebaocloud-li/proposal/apply'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/ebaocloud-li/proposal/inforce": {
      "post": {
        "tags": [
          "eBaoCloud-Li"
        ],
        "summary": "paths['/bff/ebaocloud-li/proposal/inforce'].post.summary",
        "description": "paths['/bff/ebaocloud-li/proposal/inforce'].post.description",
        "operationId": "inforceUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "proposalRequest",
            "description": "paths['/bff/ebaocloud-li/proposal/inforce'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProposalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/ebaocloud-li/proposal/inforce'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalResponse"
            }
          },
          "201": {
            "description": "paths['/bff/ebaocloud-li/proposal/inforce'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/ebaocloud-li/proposal/inforce'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/ebaocloud-li/proposal/inforce'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/ebaocloud-li/proposal/inforce'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/ebaocloud-li/proposal/quote": {
      "post": {
        "tags": [
          "eBaoCloud-Li"
        ],
        "summary": "paths['/bff/ebaocloud-li/proposal/quote'].post.summary",
        "description": "paths['/bff/ebaocloud-li/proposal/quote'].post.description",
        "operationId": "quoteUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "proposalRequest",
            "description": "paths['/bff/ebaocloud-li/proposal/quote'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProposalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/ebaocloud-li/proposal/quote'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalResponse"
            }
          },
          "201": {
            "description": "paths['/bff/ebaocloud-li/proposal/quote'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/ebaocloud-li/proposal/quote'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/ebaocloud-li/proposal/quote'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/ebaocloud-li/proposal/quote'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/login": {
      "post": {
        "tags": [
          "Login"
        ],
        "summary": "paths['/bff/login'].post.summary",
        "description": "paths['/bff/login'].post.description",
        "operationId": "loginUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "paths['/bff/login'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/login'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "201": {
            "description": "paths['/bff/login'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/login'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/login'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/login'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/planService/calcPremium": {
      "post": {
        "tags": [
          "Calculate Premium"
        ],
        "summary": "paths['/bff/planService/calcPremium'].post.summary",
        "description": "paths['/bff/planService/calcPremium'].post.description",
        "operationId": "calcPremiumUsingPOST_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "calcPremiumRequest",
            "description": "paths['/bff/planService/calcPremium'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalcPremiumRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/planService/calcPremium'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/CalcPremiumResponse"
            }
          },
          "201": {
            "description": "paths['/bff/planService/calcPremium'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/planService/calcPremium'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/planService/calcPremium'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/planService/calcPremium'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/proposal/get/{proposalId}": {
      "get": {
        "tags": [
          "Proposal"
        ],
        "summary": "paths['/bff/proposal/get/{proposalId}'].get.summary",
        "description": "paths['/bff/proposal/get/{proposalId}'].get.description",
        "operationId": "getUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "paths['/bff/proposal/get/{proposalId}'].get.parameters['0'].description",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/proposal/get/{proposalId}'].get.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalResponse"
            }
          },
          "401": {
            "description": "paths['/bff/proposal/get/{proposalId}'].get.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/proposal/get/{proposalId}'].get.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/proposal/get/{proposalId}'].get.responses['404'].description"
          }
        }
      }
    },
    "/bff/proposal/getByCode/{proposalCode}": {
      "get": {
        "tags": [
          "Proposal"
        ],
        "summary": "paths['/bff/proposal/getByCode/{proposalCode}'].get.summary",
        "description": "paths['/bff/proposal/getByCode/{proposalCode}'].get.description",
        "operationId": "getByCodeUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "proposalCode",
            "in": "path",
            "description": "paths['/bff/proposal/getByCode/{proposalCode}'].get.parameters['0'].description",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/proposal/getByCode/{proposalCode}'].get.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalResponse"
            }
          },
          "401": {
            "description": "paths['/bff/proposal/getByCode/{proposalCode}'].get.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/proposal/getByCode/{proposalCode}'].get.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/proposal/getByCode/{proposalCode}'].get.responses['404'].description"
          }
        }
      }
    },
    "/bff/proposal/getByUserId/{userId}": {
      "get": {
        "tags": [
          "Proposal"
        ],
        "summary": "paths['/bff/proposal/getByUserId/{userId}'].get.summary",
        "description": "paths['/bff/proposal/getByUserId/{userId}'].get.description",
        "operationId": "getByUserIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "paths['/bff/proposal/getByUserId/{userId}'].get.parameters['0'].description",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/proposal/getByUserId/{userId}'].get.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalListInfoResponse"
            }
          },
          "401": {
            "description": "paths['/bff/proposal/getByUserId/{userId}'].get.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/proposal/getByUserId/{userId}'].get.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/proposal/getByUserId/{userId}'].get.responses['404'].description"
          }
        }
      }
    },
    "/bff/proposal/query": {
      "post": {
        "tags": [
          "Proposal"
        ],
        "summary": "paths['/bff/proposal/query'].post.summary",
        "description": "paths['/bff/proposal/query'].post.description",
        "operationId": "queryUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "proposalRequest",
            "description": "paths['/bff/proposal/query'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProposalCriteriaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/proposal/query'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalListInfoResponse"
            }
          },
          "201": {
            "description": "paths['/bff/proposal/query'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/proposal/query'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/proposal/query'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/proposal/query'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/proposal/saveOrUpdate": {
      "post": {
        "tags": [
          "Proposal"
        ],
        "summary": "paths['/bff/proposal/saveOrUpdate'].post.summary",
        "description": "paths['/bff/proposal/saveOrUpdate'].post.description",
        "operationId": "saveUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "proposalRequest",
            "description": "paths['/bff/proposal/saveOrUpdate'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProposalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/proposal/saveOrUpdate'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalResponse"
            }
          },
          "201": {
            "description": "paths['/bff/proposal/saveOrUpdate'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/proposal/saveOrUpdate'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/proposal/saveOrUpdate'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/proposal/saveOrUpdate'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/proposal/updateInforceInfo": {
      "post": {
        "tags": [
          "Proposal"
        ],
        "summary": "paths['/bff/proposal/updateInforceInfo'].post.summary",
        "description": "paths['/bff/proposal/updateInforceInfo'].post.description",
        "operationId": "updateInforceInfoUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "proposalRequest",
            "description": "paths['/bff/proposal/updateInforceInfo'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProposalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/proposal/updateInforceInfo'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalResponse"
            }
          },
          "201": {
            "description": "paths['/bff/proposal/updateInforceInfo'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/proposal/updateInforceInfo'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/proposal/updateInforceInfo'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/proposal/updateInforceInfo'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/proposal/updateStatus": {
      "post": {
        "tags": [
          "Proposal"
        ],
        "summary": "paths['/bff/proposal/updateStatus'].post.summary",
        "description": "paths['/bff/proposal/updateStatus'].post.description",
        "operationId": "updateStatusUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "proposalRequest",
            "description": "paths['/bff/proposal/updateStatus'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProposalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/proposal/updateStatus'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalResponse"
            }
          },
          "201": {
            "description": "paths['/bff/proposal/updateStatus'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/proposal/updateStatus'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/proposal/updateStatus'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/proposal/updateStatus'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/tools/checkSign": {
      "post": {
        "tags": [
          "Tools"
        ],
        "summary": "paths['/bff/tools/checkSign'].post.summary",
        "description": "paths['/bff/tools/checkSign'].post.description",
        "operationId": "checkSignUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "paths['/bff/tools/checkSign'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ToolsSignRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/tools/checkSign'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ToolsSignResponse"
            }
          },
          "201": {
            "description": "paths['/bff/tools/checkSign'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/tools/checkSign'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/tools/checkSign'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/tools/checkSign'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/tools/sign": {
      "post": {
        "tags": [
          "Tools"
        ],
        "summary": "paths['/bff/tools/sign'].post.summary",
        "description": "paths['/bff/tools/sign'].post.description",
        "operationId": "signUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "paths['/bff/tools/sign'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ToolsSignRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/tools/sign'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ToolsSignResponse"
            }
          },
          "201": {
            "description": "paths['/bff/tools/sign'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/tools/sign'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/tools/sign'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/tools/sign'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/transaction/broker/synAppoint": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "paths['/bff/transaction/broker/synAppoint'].post.summary",
        "description": "paths['/bff/transaction/broker/synAppoint'].post.description",
        "operationId": "brokerSynAppointUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "proposalRequest",
            "description": "paths['/bff/transaction/broker/synAppoint'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProposalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/transaction/broker/synAppoint'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalResponse"
            }
          },
          "201": {
            "description": "paths['/bff/transaction/broker/synAppoint'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/transaction/broker/synAppoint'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/transaction/broker/synAppoint'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/transaction/broker/synAppoint'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/transaction/broker/synPolicy": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "paths['/bff/transaction/broker/synPolicy'].post.summary",
        "description": "paths['/bff/transaction/broker/synPolicy'].post.description",
        "operationId": "brokerSynPolicyUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "proposalRequest",
            "description": "paths['/bff/transaction/broker/synPolicy'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProposalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/transaction/broker/synPolicy'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalResponse"
            }
          },
          "201": {
            "description": "paths['/bff/transaction/broker/synPolicy'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/transaction/broker/synPolicy'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/transaction/broker/synPolicy'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/transaction/broker/synPolicy'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/transaction/broker/synProposal": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "paths['/bff/transaction/broker/synProposal'].post.summary",
        "description": "paths['/bff/transaction/broker/synProposal'].post.description",
        "operationId": "brokerSynProposalUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "proposalRequest",
            "description": "paths['/bff/transaction/broker/synProposal'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProposalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/transaction/broker/synProposal'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalResponse"
            }
          },
          "201": {
            "description": "paths['/bff/transaction/broker/synProposal'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/transaction/broker/synProposal'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/transaction/broker/synProposal'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/transaction/broker/synProposal'].post.responses['404'].description"
          }
        }
      }
    },
    "/bff/transaction/insurer/accept": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "paths['/bff/transaction/insurer/accept'].post.summary",
        "description": "paths['/bff/transaction/insurer/accept'].post.description",
        "operationId": "acceptUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "proposalRequest",
            "description": "paths['/bff/transaction/insurer/accept'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProposalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/transaction/insurer/accept'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalResponse"
            }
          },
          "201": {
            "description": "paths['/bff/transaction/insurer/accept'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/transaction/insurer/accept'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/transaction/insurer/accept'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/transaction/insurer/accept'].post.responses['404'].description"
          }
        },
        "deprecated": true
      }
    },
    "/bff/transaction/insurer/inforce": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "paths['/bff/transaction/insurer/inforce'].post.summary",
        "description": "paths['/bff/transaction/insurer/inforce'].post.description",
        "operationId": "inforceUsingPOST_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "proposalRequest",
            "description": "paths['/bff/transaction/insurer/inforce'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProposalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/transaction/insurer/inforce'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalResponse"
            }
          },
          "201": {
            "description": "paths['/bff/transaction/insurer/inforce'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/transaction/insurer/inforce'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/transaction/insurer/inforce'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/transaction/insurer/inforce'].post.responses['404'].description"
          }
        },
        "deprecated": true
      }
    },
    "/bff/transaction/insurer/underwrite": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "paths['/bff/transaction/insurer/underwrite'].post.summary",
        "description": "paths['/bff/transaction/insurer/underwrite'].post.description",
        "operationId": "submitUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "proposalRequest",
            "description": "paths['/bff/transaction/insurer/underwrite'].post.parameters['0'].description",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProposalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/transaction/insurer/underwrite'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/ProposalResponse"
            }
          },
          "201": {
            "description": "paths['/bff/transaction/insurer/underwrite'].post.responses['201'].description"
          },
          "401": {
            "description": "paths['/bff/transaction/insurer/underwrite'].post.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/transaction/insurer/underwrite'].post.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/transaction/insurer/underwrite'].post.responses['404'].description"
          }
        },
        "deprecated": true
      }
    },
    "/bff/user/{openId}/{tenantCode}": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "paths['/bff/user/{openId}/{tenantCode}'].get.summary",
        "description": "paths['/bff/user/{openId}/{tenantCode}'].get.description",
        "operationId": "getByOpenIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "openId",
            "in": "path",
            "description": "paths['/bff/user/{openId}/{tenantCode}'].get.parameters['0'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantCode",
            "in": "path",
            "description": "paths['/bff/user/{openId}/{tenantCode}'].get.parameters['1'].description",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/user/{openId}/{tenantCode}'].get.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "401": {
            "description": "paths['/bff/user/{openId}/{tenantCode}'].get.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/user/{openId}/{tenantCode}'].get.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/user/{openId}/{tenantCode}'].get.responses['404'].description"
          }
        }
      }
    },
    "/bff/wx/jsConfig/{appId}": {
      "get": {
        "tags": [
          "Wechat"
        ],
        "summary": "paths['/bff/wx/jsConfig/{appId}'].get.summary",
        "description": "paths['/bff/wx/jsConfig/{appId}'].get.description",
        "operationId": "getConfigUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "paths['/bff/wx/jsConfig/{appId}'].get.parameters['0'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "url",
            "in": "query",
            "description": "paths['/bff/wx/jsConfig/{appId}'].get.parameters['1'].description",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/wx/jsConfig/{appId}'].get.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/WeChatRestResponse"
            }
          },
          "401": {
            "description": "paths['/bff/wx/jsConfig/{appId}'].get.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/wx/jsConfig/{appId}'].get.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/wx/jsConfig/{appId}'].get.responses['404'].description"
          }
        }
      }
    },
    "/bff/wx/openidAndAccessToken/{appId}/{code}": {
      "get": {
        "tags": [
          "Wechat"
        ],
        "summary": "paths['/bff/wx/openidAndAccessToken/{appId}/{code}'].get.summary",
        "description": "paths['/bff/wx/openidAndAccessToken/{appId}/{code}'].get.description",
        "operationId": "getOpenidAndAccessTokenUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "paths['/bff/wx/openidAndAccessToken/{appId}/{code}'].get.parameters['0'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "paths['/bff/wx/openidAndAccessToken/{appId}/{code}'].get.parameters['1'].description",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/wx/openidAndAccessToken/{appId}/{code}'].get.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/WeChatRestResponse"
            }
          },
          "401": {
            "description": "paths['/bff/wx/openidAndAccessToken/{appId}/{code}'].get.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/wx/openidAndAccessToken/{appId}/{code}'].get.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/wx/openidAndAccessToken/{appId}/{code}'].get.responses['404'].description"
          }
        }
      }
    },
    "/bff/wx/userInfo/{appId}/{code}/{authMethod}": {
      "get": {
        "tags": [
          "Wechat"
        ],
        "summary": "paths['/bff/wx/userInfo/{appId}/{code}/{authMethod}'].get.summary",
        "description": "paths['/bff/wx/userInfo/{appId}/{code}/{authMethod}'].get.description",
        "operationId": "getUserBaseByCodeUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "paths['/bff/wx/userInfo/{appId}/{code}/{authMethod}'].get.parameters['0'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "paths['/bff/wx/userInfo/{appId}/{code}/{authMethod}'].get.parameters['1'].description",
            "required": true,
            "type": "string"
          },
          {
            "name": "authMethod",
            "in": "path",
            "description": "paths['/bff/wx/userInfo/{appId}/{code}/{authMethod}'].get.parameters['2'].description",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/bff/wx/userInfo/{appId}/{code}/{authMethod}'].get.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/WeChatRestResponse"
            }
          },
          "401": {
            "description": "paths['/bff/wx/userInfo/{appId}/{code}/{authMethod}'].get.responses['401'].description"
          },
          "403": {
            "description": "paths['/bff/wx/userInfo/{appId}/{code}/{authMethod}'].get.responses['403'].description"
          },
          "404": {
            "description": "paths['/bff/wx/userInfo/{appId}/{code}/{authMethod}'].get.responses['404'].description"
          }
        }
      }
    }
  }
}