{
  "swagger": "2.0",
  "info": {
    "version": "0.1.0",
    "title": "eBaoCloud LI OpenAPI",
    "termsOfService": "http://api.ebaocloud.life/",
    "description": "This document is the API specification for the eBaoCloud Life part. To practice and run the APIs in this document, you need to apply an eBaoCloud tenant account(starting from a sandbox account instead of production account) first.<br>\nContact liliang.zhu@ebaotech.com for more information and trial using.\n\n# Built on\nThu Dec 28 2017, 16:21:59 +08:00\n\n# Versioning\nAPI version| Date  |Comments\n"
  },
  "host": "sandbox.api.li.ebaocloud.com.cn",
  "basePath": "/rest",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/policy/policies/{insurerCode}/search": {
      "post": {
        "tags": [
          "Policy"
        ],
        "summary": "Policy summary querying",
        "description": "Search policy by criteria",
        "operationId": "searchUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Insurer code"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PageablePolicyCriteria"
            },
            "description": "Criteria"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PolicySummaryInfo"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "parameters": [
        {
          "name": "insurerCode",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "paths['/policy/policies/{insurerCode}/search'].parameters['0'].description"
        }
      ]
    },
    "/policy/policies/{insurerCode}/{policyNumber}": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "Policy detail getting",
        "description": "Get Policy by Policy No.",
        "operationId": "getUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Insurer code"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyInfo"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "parameters": [
        {
          "name": "insurerCode",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "paths['/policy/policies/{insurerCode}/{policyNumber}'].parameters['0'].description"
        },
        {
          "name": "policyNumber",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "paths['/policy/policies/{insurerCode}/{policyNumber}'].parameters['1'].description"
        }
      ]
    },
    "/customers/{customerId}": {
      "get": {
        "tags": [
          "Party"
        ],
        "summary": "paths['/customers/{customerId}'].get.summary",
        "description": "paths['/customers/{customerId}'].get.description",
        "operationId": "CustomerInfoGET",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "paths['/customers/{customerId}'].get.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/CustomerInfo"
            },
            "examples": {
              "application/json": "Frank"
            }
          }
        }
      },
      "parameters": [
        {
          "name": "customerId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/customers/": {
      "put": {
        "tags": [
          "Party"
        ],
        "summary": "paths['/customers/'].put.summary",
        "description": "paths['/customers/'].put.description",
        "operationId": "CustomerCreatePUT",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCustomerInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/customers/'].put.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/CreateCustomerResultInfo"
            }
          }
        }
      }
    },
    "/customers/corresponding/{customerId}": {
      "post": {
        "tags": [
          "Party"
        ],
        "summary": "paths['/customers/corresponding/{customerId}'].post.summary",
        "operationId": "CustomerAlterationPOST",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CorrespondingInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paths['/customers/corresponding/{customerId}'].post.responses['200'].description",
            "schema": {
              "$ref": "#/definitions/CorrespondingResultInfo"
            }
          }
        }
      },
      "parameters": [
        {
          "name": "customerId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/claim/register": {
      "post": {
        "tags": [
          "Claim"
        ],
        "summary": "Claim case register",
        "description": "Register Claim Case",
        "operationId": "registerUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Request"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegisterResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/policies/alterations/inforce": {
      "post": {
        "tags": [
          "policy alteration"
        ],
        "summary": "Policy alterations",
        "description": "Policy alterations",
        "operationId": "inforceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyAlterationInput"
            },
            "description": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyAlterationResultInfo"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/policies/alterations/quotations": {
      "post": {
        "tags": [
          "policy alteration",
          "quotation"
        ],
        "summary": "Quotations for policy alterations",
        "description": "Quotations for policy alterations",
        "operationId": "quote2UsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlterationQuotationInput"
            },
            "description": "Input"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AlterationQuotationResultInfo"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "PageablePolicyCriteria": {
      "type": "object",
      "properties": {
        "applyDateFrom": {
          "type": "string",
          "format": "date-time",
          "description": "Search criteria: application date from",
          "example": "2017-07-01"
        },
        "applyDateTo": {
          "type": "string",
          "format": "date-time",
          "description": "Search criteria: application date to",
          "example": "2017-08-01"
        },
        "certiCode": {
          "type": "string",
          "description": "Search criteria: id no. of policy customer (policy holder or insured)",
          "example": "1234567890"
        },
        "masterProductCode": {
          "type": "string",
          "description": "Search criteria: code of master product",
          "example": "07H004"
        },
        "name": {
          "type": "string",
          "description": "Search criteria: name of policy customer (policy holder or insured)",
          "example": "name"
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page criteria: target page number, start from 0"
        },
        "policyNumber": {
          "type": "string",
          "description": "Search criteria: policy no."
        },
        "proposalNumber": {
          "type": "string",
          "description": "Search criteria: application code"
        },
        "quotationCode": {
          "type": "string",
          "description": "Search criteria: order no."
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "Page criteria: how many records per page, default as 10",
          "example": 10
        }
      }
    },
    "PolicySummaryInfo": {
      "type": "object",
      "properties": {
        "quotationCode": {
          "type": "string",
          "description": "Quotation calculation request number"
        },
        "policyNumber": {
          "type": "string",
          "description": "Policy number"
        },
        "proposalNumber": {
          "type": "string",
          "description": "Proposal number"
        },
        "applyDate": {
          "type": "string",
          "format": "date-time",
          "description": "Application date, non-empty, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy effective date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "issueDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy issue date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Termination date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "policyHolderName": {
          "type": "string",
          "description": "Policy holder's name"
        },
        "mainInsuredName": {
          "type": "string",
          "description": "Main insured name"
        },
        "masterProductCode": {
          "type": "string",
          "description": "Main product code"
        },
        "masterProductName": {
          "type": "string",
          "description": "Main product name"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Policy premium"
        },
        "proposalStatus": {
          "type": "string",
          "description": "Proposal status"
        },
        "riskStatus": {
          "type": "string",
          "description": "Policy status<br>0 - not inforce<br>1 - inforce<br>2 - lapsed<br>3 - terminated"
        }
      }
    },
    "PolicyInfo": {
      "type": "object",
      "properties": {
        "policyType": {
          "type": "integer",
          "format": "int32",
          "description": "Policy type<br>1 - Individual policy<br>2 - Group policy<br>3 - Banc assurance",
          "enum": [
            1,
            2,
            3
          ],
          "example": 1
        },
        "riskStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Policy status<br>0 - not inforce<br>1 - inforce<br>2 - lapsed<br>3 - terminated"
        },
        "applyDate": {
          "type": "string",
          "format": "date-time",
          "description": "Application Date, mandatory, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "issueDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy issue date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Policy premium"
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "description": "Currency, non empty<br>1 - CNY",
          "enum": [
            1
          ],
          "example": 1
        },
        "ePolicyDownloadUrl": {
          "type": "string",
          "description": "Electronic policy download address"
        },
        "groupProposalNumber": {
          "type": "string",
          "description": "Group proposal No."
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy effective date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Termination date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "proposalNumber": {
          "type": "string",
          "description": "Proposal number"
        },
        "deliverType": {
          "type": "string",
          "description": "Policy delivery method<br>H - by people<br>M - by mail",
          "enum": [
            "H",
            "M"
          ],
          "example": "M"
        },
        "policyNumber": {
          "type": "string",
          "description": "Policy number"
        },
        "quotationCode": {
          "type": "string",
          "description": "Quotation calculation request number"
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of submission, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "serviceAgentCode": {
          "type": "string",
          "description": "Policy agent code"
        },
        "salesChannelCode": {
          "type": "string",
          "description": "Sales channel code"
        },
        "preprintedProposalNumber": {
          "type": "string",
          "description": "Pre-printed proposal number"
        },
        "proposalInfo": {
          "$ref": "#/definitions/PolicyProposalInfo",
          "description": "Proposal detail"
        },
        "policyPackage": {
          "$ref": "#/definitions/PolicyPackageInfo",
          "description": "Product package"
        },
        "coverages": {
          "type": "array",
          "description": "Policy's coverage list",
          "items": {
            "$ref": "#/definitions/CoverageInfo"
          }
        },
        "policyHolder": {
          "$ref": "#/definitions/PolicyHolderInfo",
          "description": "Policy holder"
        },
        "insureds": {
          "type": "array",
          "description": "Policy insured list",
          "items": {
            "$ref": "#/definitions/InsuredInfo"
          }
        },
        "beneficiaries": {
          "type": "array",
          "description": "List of beneficiaries",
          "items": {
            "$ref": "#/definitions/BeneficiaryInfo"
          }
        },
        "payerAccounts": {
          "type": "array",
          "description": "Payment list",
          "items": {
            "$ref": "#/definitions/PayerAccountInfo"
          }
        },
        "declarations": {
          "type": "array",
          "description": "Customer declaration list",
          "items": {
            "$ref": "#/definitions/CustomerDeclarationInfo"
          }
        },
        "agentDeclarations": {
          "type": "array",
          "description": "Agent declarations",
          "items": {
            "$ref": "#/definitions/AgentDeclarationInfo"
          }
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "PolicyProposalInfo": {
      "type": "object",
      "properties": {
        "proposalStatus": {
          "type": "string",
          "description": "Proposal status"
        }
      }
    },
    "PolicyPackageInfo": {
      "type": "object",
      "properties": {
        "packageCode": {
          "type": "string",
          "description": "Product package code"
        },
        "unit": {
          "type": "number",
          "format": "double",
          "description": "Product package unit, the default is 1"
        }
      }
    },
    "CoverageInfo": {
      "type": "object",
      "properties": {
        "chargePeriod": {
          "type": "string",
          "description": "Payment period type, non-empty<br>1 - single<br>2 - per year<br>3 to a certain age<br>4 - whole life",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ],
          "example": "2"
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "description": "Payment period, non-empty<br>0 - single;<br>by age: till which age or to pay the payment period: the pay years;<br>whole life is 100",
          "example": 20
        },
        "coveragePeriod": {
          "type": "string",
          "description": "Coverage type<br>1 - whole life<br>2 - per year<br>3 - Cover to a certain age<br>4 - per month<br>5 - per day",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "example": "1"
        },
        "coverageYear": {
          "type": "integer",
          "format": "int32",
          "description": "Coverage Term. Meaning of this property is associated with property \"coveragePeriod\" (\"type\" for short). when covers whole life, value of this property is 9999;<br>and if type is 2, means years covered;<br>and if type is 3, means age when coverage expired;<br>and if type is 4, means months covered;<br>and if type is 5, means days covered."
        },
        "currentPremium": {
          "$ref": "#/definitions/CoveragePremium",
          "description": "The current period premium"
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "masterProductCode": {
          "type": "string",
          "description": "Main product code"
        },
        "waiverExt": {
          "$ref": "#/definitions/CoverageExtWaiver",
          "description": "Waiver plan information"
        },
        "nextPremium": {
          "$ref": "#/definitions/CoveragePremium",
          "description": "Renew premium (next premium)"
        },
        "coverageAgents": {
          "type": "array",
          "description": "List of performance sharing of agent",
          "items": {
            "$ref": "#/definitions/CoverageAgentInfo"
          }
        },
        "payPlans": {
          "type": "array",
          "description": "Payment plan list",
          "items": {
            "$ref": "#/definitions/PayPlanInfo"
          }
        },
        "insureds": {
          "type": "array",
          "description": "List of insured",
          "items": {
            "$ref": "#/definitions/CoverageInsuredInfo"
          }
        },
        "premInvestRates": {
          "type": "array",
          "description": "The ratio of premium and investment amount",
          "items": {
            "$ref": "#/definitions/PremInvestRateInfo"
          }
        },
        "recurringTopup": {
          "$ref": "#/definitions/RecurringTopupInfo",
          "description": "Recurring top-up"
        },
        "contractInvests": {
          "type": "array",
          "description": "Policy investment information",
          "items": {
            "$ref": "#/definitions/ContractInvestInfo"
          }
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "CoveragePremium": {
      "type": "object",
      "properties": {
        "benefitLevel": {
          "type": "string",
          "description": "Plan benefit level, the product insured by the level of non-empty"
        },
        "paymentFreq": {
          "type": "string",
          "description": "Pay frequency<br>1 - yearly payment<br>2 - half yearly payment<br>3 - quarterly payment<br>4 - monthly payment<br>5 - single premium",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "example": "1"
        },
        "sumAssured": {
          "type": "number",
          "format": "double",
          "description": "Insurance SA, non empty when calculate premium base on SA",
          "example": 100000
        },
        "premium": {
          "type": "number",
          "format": "double",
          "description": "Insurance premium, non empty when calculate SA base on premium",
          "example": 2314
        },
        "unit": {
          "type": "number",
          "format": "double",
          "description": "Product unit, non empty when by unit insurance"
        }
      }
    },
    "CoverageExtWaiver": {
      "type": "object",
      "properties": {
        "waivedSa": {
          "type": "number",
          "format": "double",
          "description": "Exempt from the amount of insurance, 0 that a full exemption, not 0 that exemption from the specified amount, can not exceed the insurance premium is exempt"
        },
        "waiver": {
          "type": "string",
          "description": "Is waiver<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ],
          "example": "N"
        }
      }
    },
    "PayPlanInfo": {
      "type": "object",
      "properties": {
        "endPeriod": {
          "type": "string",
          "description": "Year to receive the type of annuity, the type of annuity / variable annuity / GMWB should not be empty<br>1 to receive a fixed number of years<br>2 to receive till a certain age<br>3 - receive whole life",
          "enum": [
            "1",
            "2",
            "3"
          ],
          "example": "3"
        },
        "endYear": {
          "type": "integer",
          "format": "int32",
          "description": "The number of payment years"
        },
        "gurntPeriod": {
          "type": "integer",
          "format": "int32",
          "description": "Annuity guarantee period (years or age)"
        },
        "payOption": {
          "type": "string",
          "description": "The annuity receive payment options: 1 - to receive payment by cash<br>2 - to pay premium<br>3 - accumulated interest<br>4 - accumulated interest x years after the transfer to pay premium<br>5 - to buy an additional payment of rider",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "example": "1"
        },
        "payOptionTerm": {
          "type": "integer",
          "format": "int32",
          "description": "Years, only when payOption is 4, this field has value, for others are empty"
        },
        "payPeriod": {
          "type": "string",
          "description": "The annuity begins to receive the type of period<br>1 - is immediately received<br>2 - till a certain age to receive<br>3 - years after the collection<br>4 - after a certain age to receive",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ],
          "example": "3"
        },
        "payYear": {
          "type": "integer",
          "format": "int32",
          "description": "The annuity begins to receive the period (years or age)"
        },
        "planFreq": {
          "type": "string",
          "description": "To receive frequency<br>1 - yearly<br>2 - half yearly<br>3 - quarterly <br>4 - monthly<br>5 - single",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "example": "1"
        },
        "planType": {
          "type": "string",
          "description": "Payment plan type<br>1 - cash payment<br>2 - annuity<br>3 - survival benefit<br>4 - maturity  5 - GMWB (guaranteed minimum benefit)<br>6 - variable annuity<br>7 - partial surrender<br>8 - SA dividends",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8"
          ],
          "example": "1"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "CoverageInsuredInfo": {
      "type": "object",
      "properties": {
        "insuredPartyId": {
          "type": "string",
          "description": "Insured internal ID"
        },
        "orderId": {
          "type": "integer",
          "format": "int32",
          "description": "Insurance type of the insured person, the default is 1, if one plan applied by more than one insured (family policy or personal risk), the value is greater than 1",
          "example": 1
        },
        "occupationClass": {
          "type": "integer",
          "format": "int32",
          "description": "Occupation level",
          "example": 1
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "Age",
          "example": 25
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "PremInvestRateInfo": {
      "type": "object",
      "properties": {
        "fundCode": {
          "type": "string",
          "description": "Fund code",
          "example": "F001"
        },
        "assignRate": {
          "type": "number",
          "format": "double",
          "description": "Fund assign ratio",
          "example": 1
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "RecurringTopupInfo": {
      "type": "object",
      "properties": {
        "investRates": {
          "type": "array",
          "description": "Investment rate list",
          "items": {
            "$ref": "#/definitions/RecurringTopupInvestRateInfo"
          }
        },
        "topupStartDate": {
          "type": "string",
          "format": "date-time",
          "description": "Top-up start date"
        },
        "topupAmount": {
          "type": "number",
          "format": "double",
          "description": "Top-up amount",
          "example": 10000
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "RecurringTopupInvestRateInfo": {
      "type": "object",
      "properties": {
        "fundCode": {
          "type": "string",
          "description": "Fund code",
          "example": "F001"
        },
        "assignRate": {
          "type": "number",
          "format": "double",
          "description": "Fund assign ratio",
          "example": 1
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "ContractInvestInfo": {
      "type": "object",
      "properties": {
        "fundCode": {
          "type": "string",
          "description": "Fund code",
          "example": "F001"
        },
        "accumUnits": {
          "type": "number",
          "format": "double",
          "description": "Fund units",
          "example": 1000
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "CoverageAgentInfo": {
      "type": "object",
      "properties": {
        "agentCode": {
          "type": "string",
          "description": "Policy agent code"
        },
        "assignRate": {
          "type": "number",
          "format": "double",
          "description": "Performance rating, the maximum for the 1",
          "example": 1
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "PolicyHolderInfo": {
      "type": "object",
      "properties": {
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type"
        },
        "policyCustomer": {
          "$ref": "#/definitions/PolicyCustomerInfo",
          "description": "Customer detail"
        },
        "relationToLA": {
          "type": "integer",
          "format": "int32",
          "description": "The relationship between the insured and the insured, the number type<br>1 - own<br>2 - parent<br>3 - spouse<br>10 - child<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            7
          ],
          "example": 1
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "PolicyCustomerInfo": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/AddressInfo",
          "description": "Customer address"
        },
        "partyType": {
          "type": "integer",
          "format": "int32",
          "description": "The type of the party<br>1 - the personal party<br>2 - organization",
          "enum": [
            1,
            2
          ],
          "example": 1
        },
        "person": {
          "$ref": "#/definitions/Person",
          "description": "Personal customer information"
        },
        "organization": {
          "$ref": "#/definitions/Organization",
          "description": "Organization customer information"
        },
        "partyContact": {
          "$ref": "#/definitions/PartyContact",
          "description": "Party contact information"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "InsuredInfo": {
      "type": "object",
      "properties": {
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type"
        },
        "policyCustomer": {
          "$ref": "#/definitions/PolicyCustomerInfo",
          "description": "Customer detail"
        },
        "relationToPH": {
          "type": "integer",
          "format": "int32",
          "description": "The relationship between the insured and the insured, integer type<br>1 - self<br>2 - child<br>3 - spouse<br>10 - parent<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            4,
            7
          ],
          "example": 1
        },
        "medicalExamIndi": {
          "type": "string",
          "description": "Whether physical exam is required<br>Y - yes;<br>N - no",
          "enum": [
            "Y",
            "N"
          ],
          "example": "N"
        },
        "medicalIndi": {
          "type": "string",
          "description": "Whether there is medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ],
          "example": "Y"
        },
        "socialSecurityIndi": {
          "type": "string",
          "description": "Whether there is social medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ],
          "example": "Y"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "BeneficiaryInfo": {
      "type": "object",
      "properties": {
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type"
        },
        "policyCustomer": {
          "$ref": "#/definitions/PolicyCustomerInfo",
          "description": "Customer detail"
        },
        "insuredPartyId": {
          "type": "string",
          "description": "Beneficiaries' according insured Id"
        },
        "beneType": {
          "type": "string",
          "description": "Beneficiaries, 1 beneficiaries<br>2 - beneficiaries<br>3 - insured beneficiaries",
          "enum": [
            "1",
            "2",
            "3"
          ],
          "example": "2"
        },
        "designation": {
          "type": "integer",
          "format": "int32",
          "description": "The relationship to the insured<br>1 - wife<br>2 - husband<br>3 - child<br>4 - father<br>5 - mother<br>6 - Grand father<br>7 - Grandparent<br>8 - brother<br>9 - sister<br>10 - uncle<br>11 - untie<br>12 - cousin<br>13 - nephew(niece)<br>14 - employer<br>15 - other<br>16 - self",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16
          ],
          "example": 1
        },
        "shareOrder": {
          "type": "integer",
          "format": "int32",
          "description": "Benefit order",
          "example": 1
        },
        "shareRate": {
          "type": "number",
          "format": "double",
          "description": "Benefit ratio, up to 1",
          "example": 1
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "PayerAccountInfo": {
      "type": "object",
      "properties": {
        "paymentMethod": {
          "type": "integer",
          "format": "int32",
          "description": "First time payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card",
          "enum": [
            1,
            2,
            3,
            30,
            80
          ],
          "example": 3
        },
        "paymentMethodNext": {
          "type": "integer",
          "format": "int32",
          "description": "Renewal payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card",
          "enum": [
            1,
            2,
            3,
            30,
            80
          ],
          "example": 3
        },
        "bankAccount": {
          "$ref": "#/definitions/BankAccountInfo",
          "description": "The first premium bank account"
        },
        "nextBankAccount": {
          "$ref": "#/definitions/BankAccountInfo",
          "description": "Renewal premium bank account"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "CustomerDeclarationInfo": {
      "type": "object",
      "properties": {
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type"
        },
        "declarationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Declaration date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "details": {
          "type": "array",
          "description": "Declaration details",
          "items": {
            "$ref": "#/definitions/CustomerDeclarationDetailInfo"
          }
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "CustomerDeclarationDetailInfo": {
      "type": "object",
      "properties": {
        "declId": {
          "type": "integer",
          "format": "int64",
          "description": "Declaration item number, number type"
        },
        "fill1": {
          "type": "string",
          "description": "Declaration item to answer the content 1, character type, the content with the different items and different"
        },
        "fill2": {
          "type": "string",
          "description": "Declaration item to answer the content 2, character type, the content with the different items and different"
        },
        "fill3": {
          "type": "string",
          "description": "Declaration item to answer the content 3, character type, the content with the different items and different"
        },
        "fill4": {
          "type": "string",
          "description": "Declaration item to answer the content 4, character type, the content with the different items and different"
        },
        "fill5": {
          "type": "string",
          "description": "Declaration item to answer the content 5, character type, the content with the different items and different"
        },
        "fill6": {
          "type": "string",
          "description": "Declaration item to answer the content 6, character type, the content with the different items and different"
        },
        "fill7": {
          "type": "string",
          "description": "Declaration item to answer the content 7, character type, the content with the different items and different"
        },
        "fill8": {
          "type": "string",
          "description": "Declaration item to answer the content 8, character type, the content with the different items and different"
        },
        "fill9": {
          "type": "string",
          "description": "Declaration item to answer the content 9, character type, the content with the different items and different"
        },
        "fill10": {
          "type": "string",
          "description": "Declaration item to answer the content 10, character type, the content with the different items and different"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "AgentDeclarationInfo": {
      "type": "object",
      "properties": {
        "agentCode": {
          "type": "string",
          "description": "Agent code"
        },
        "declCode": {
          "type": "string",
          "description": "Declaration item code"
        },
        "fill1": {
          "type": "string",
          "description": "Declaration item to answer the content 1, character type, the content with the different items and different"
        },
        "fill2": {
          "type": "string",
          "description": "Declaration item to answer the content 2, character type, the content with the different items and different"
        },
        "fill3": {
          "type": "string",
          "description": "Declaration item to answer the content 3, character type, the content with the different items and different"
        },
        "fill4": {
          "type": "string",
          "description": "Declaration item to answer the content 4, character type, the content with the different items and different"
        },
        "fill5": {
          "type": "string",
          "description": "Declaration item to answer the content 5, character type, the content with the different items and different"
        },
        "fill6": {
          "type": "string",
          "description": "Declaration item to answer the content 6, character type, the content with the different items and different"
        },
        "fill7": {
          "type": "string",
          "description": "Declaration item to answer the content 7, character type, the content with the different items and different"
        },
        "fill8": {
          "type": "string",
          "description": "Declaration item to answer the content 8, character type, the content with the different items and different"
        },
        "fill9": {
          "type": "string",
          "description": "Declaration item to answer the content 9, character type, the content with the different items and different"
        },
        "fill10": {
          "type": "string",
          "description": "Declaration item to answer the content 10, character type, the content with the different items and different"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character"
        }
      }
    },
    "ContactInput": {
      "type": "object",
      "required": [
        "email",
        "mobile"
      ],
      "properties": {
        "email": {
          "type": "string",
          "description": "Email"
        },
        "mobile": {
          "type": "string",
          "description": "Mobile No."
        }
      }
    },
    "Person": {
      "type": "object",
      "properties": {
        "gender": {
          "type": "string",
          "description": "Sex<br>M - male<br>F - female",
          "enum": [
            "M",
            "F"
          ],
          "example": "M"
        },
        "birthdate": {
          "type": "string",
          "format": "date-time",
          "description": "Birthday, non-empty, date format: yyyy-MM-dd",
          "example": "1980-01-01"
        },
        "certiType": {
          "type": "integer",
          "format": "int32",
          "description": "ID type, number type<br>1 - ID card<br>2 - military certificate<br>3 - passport<br>4 - birth certificate<br>9 - other",
          "enum": [
            1,
            2,
            3,
            4,
            9
          ],
          "example": 3
        },
        "certiCode": {
          "type": "string",
          "description": "ID Number",
          "example": "1234567890"
        },
        "certiStart": {
          "type": "string",
          "format": "date-time",
          "description": "Certificate start date, date format: yyyy-MM-dd",
          "example": "2000-01-01"
        },
        "certiEnd": {
          "type": "string",
          "format": "date-time",
          "description": "Valid date, date format: yyyy-MM-dd",
          "example": "2019-12-31"
        },
        "firstName": {
          "type": "string",
          "description": "First name",
          "example": "三"
        },
        "midName": {
          "type": "string",
          "description": "Middle name of prospect"
        },
        "lastName": {
          "type": "string",
          "description": "Last name of prospect",
          "example": "张"
        },
        "nationality": {
          "type": "string",
          "description": "Nationality<br>7 - China",
          "example": "7"
        },
        "preferredLifeIndi": {
          "type": "string",
          "description": "Insurance risk classifications <br>0 - N/A<br>1 - Prefer plus<br>2 - Prefer<br>3 - Standard plus<br>4 - Standard<br>5 - Sub-prefer<br>6 - Sub-standard",
          "example": "0"
        },
        "smoking": {
          "type": "string",
          "description": "Whether smoking<br>Y - yes;<br>N - no",
          "enum": [
            "Y",
            "N"
          ],
          "example": "N"
        },
        "occupationCode": {
          "type": "string",
          "description": "Professional code",
          "example": "1"
        },
        "income": {
          "type": "integer",
          "format": "int64",
          "description": "Annual income",
          "example": 200000
        },
        "marriageStatus": {
          "type": "string",
          "description": "Marital status<br>1 - married<br>2 - unmarried<br>3 - divorced<br>4 - widowed<br>5 - separated",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6"
          ],
          "example": "1"
        },
        "height": {
          "type": "number",
          "format": "double",
          "description": "Height e.g. 172cm",
          "example": 175.3
        },
        "weight": {
          "type": "number",
          "format": "double",
          "description": "Weight (kg)",
          "example": 70.25
        },
        "salutation": {
          "type": "string",
          "description": "Title<br>1 - Mr.<br>2 - Mrs.",
          "enum": [
            "1",
            "2"
          ],
          "example": "1"
        }
      }
    },
    "BankAccountInfo": {
      "type": "object",
      "properties": {
        "branchCode": {
          "type": "string",
          "description": "Branch code",
          "example": "1001"
        },
        "bankCode": {
          "type": "string",
          "description": "Bank code",
          "example": "test_bank"
        },
        "bankAccountProvince": {
          "type": "string",
          "description": "The province, the bank account belongs to",
          "example": "Shanghai"
        },
        "bankAccountCity": {
          "type": "string",
          "description": "The city, the bank account belongs to",
          "example": "Shanghai"
        },
        "issueBankName": {
          "type": "string",
          "description": "Card issue bank",
          "example": "ICBC"
        },
        "bankAccount": {
          "type": "string",
          "description": "Bank Account",
          "example": "1111222233334444567"
        },
        "accoName": {
          "type": "string",
          "description": "Account holder name",
          "example": "张三"
        },
        "accountType": {
          "type": "string",
          "description": "Account type, 2 debit card<br>8 - credit card",
          "enum": [
            "2",
            "8"
          ],
          "example": "2"
        },
        "debitCreditType": {
          "type": "string",
          "description": "Account use<br>0 - pay and use<br>1 - fee<br>2 - refund",
          "enum": [
            "0",
            "1",
            "2"
          ],
          "example": "0"
        },
        "creditCardType": {
          "type": "string",
          "description": "Credit card type, if not credit card, be empty<br>1 - Master<br>2 - Visa<br>3 - BCA<br>4 - JCB",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ],
          "example": "1"
        },
        "expireDate": {
          "type": "string",
          "format": "date-time",
          "description": "Account expiration date, MM / yyyy",
          "example": "10/2020"
        }
      }
    },
    "PartyContact": {
      "type": "object",
      "properties": {
        "homeTel": {
          "type": "string",
          "description": "Home telephone",
          "example": "87654321"
        },
        "mobileTel": {
          "type": "string",
          "description": "Phone number",
          "example": "15012345678"
        },
        "officeTel": {
          "type": "string",
          "description": "Work phone",
          "example": "88888888"
        },
        "officeTelExt": {
          "type": "string",
          "description": "Work phone extension",
          "example": "1234"
        },
        "email": {
          "type": "string",
          "description": "E-mail:",
          "example": "TestPerson14@126.com"
        },
        "contact": {
          "type": "string",
          "description": "Contact person",
          "example": "张三"
        },
        "contactTel": {
          "type": "string",
          "description": "Contact Phone",
          "example": "88888888"
        },
        "fax": {
          "type": "string",
          "description": "Fax: (+86) {0}022 - 24143117{/0}",
          "example": "88888887"
        }
      }
    },
    "AddressInfo": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string",
          "description": "Province",
          "example": "上海市"
        },
        "address2": {
          "type": "string",
          "description": "City",
          "example": "上海市"
        },
        "address3": {
          "type": "string",
          "description": "District",
          "example": "杨浦区"
        },
        "address4": {
          "type": "string",
          "description": "Address",
          "example": "淞沪路270号创智天地3号楼3楼"
        },
        "postCode": {
          "type": "string",
          "description": "Post code",
          "example": "200433"
        }
      }
    },
    "Organization": {
      "type": "object",
      "properties": {
        "registerType": {
          "type": "string",
          "description": "Company certificate type, 1001 - company registration number",
          "example": "1001"
        },
        "registerCode": {
          "type": "string",
          "description": "Company ID",
          "example": "xxxx"
        },
        "countryCode": {
          "type": "string",
          "description": "Registered country, 156 - China",
          "example": "156"
        },
        "companyName": {
          "type": "string",
          "description": "Name of company",
          "example": "xxxxxx"
        },
        "organCode": {
          "type": "string",
          "description": "Organization code",
          "example": "xxxxxx"
        }
      }
    },
    "CustomerInfo": {
      "type": "object",
      "required": [
        "CustomerDetail"
      ],
      "properties": {
        "CustomerDetail": {
          "$ref": "#/definitions/Person"
        },
        "AddressInfo": {
          "type": "array",
          "description": "definitions.CustomerInfo.properties.AddressInfo.description",
          "items": {
            "required": [
              "Address"
            ],
            "type": "object",
            "properties": {
              "Address": {
                "$ref": "#/definitions/AddressInfo"
              }
            }
          }
        },
        "ContactInfo": {
          "$ref": "#/definitions/PartyContact"
        }
      },
      "description": "definitions.CustomerInfo.description"
    },
    "CorrespondingInput": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "definitions.CorrespondingInput.properties.clientRequestId.description"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "definitions.CorrespondingInput.properties.clientRequestTime.description"
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "definitions.CorrespondingInput.properties.effectiveDate.description"
        },
        "AddressInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressInfo"
          }
        },
        "ContactInfo": {
          "$ref": "#/definitions/PartyContact"
        },
        "RelatedPolicy": {
          "type": "array",
          "description": "definitions.CorrespondingInput.properties.RelatedPolicy.description",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "CorrespondingResultInfo": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "definitions.CorrespondingResultInfo.properties.clientRequestId.description"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "definitions.CorrespondingResultInfo.properties.clientRequestTime.description"
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "definitions.CorrespondingResultInfo.properties.effectiveDate.description"
        },
        "AddressInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressInfo"
          }
        },
        "ContactInfo": {
          "$ref": "#/definitions/PartyContact"
        },
        "RelatedPolicy": {
          "type": "array",
          "description": "definitions.CorrespondingResultInfo.properties.RelatedPolicy.description",
          "items": {
            "type": "integer"
          }
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "definitions.CorrespondingResultInfo.properties.result.description",
          "enum": [
            -1,
            0,
            1
          ]
        }
      }
    },
    "CreateCustomerInput": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "definitions.CreateCustomerInput.properties.clientRequestId.description"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "definitions.CreateCustomerInput.properties.clientRequestTime.description"
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "definitions.CreateCustomerInput.properties.effectiveDate.description"
        },
        "CustomerInfo": {
          "$ref": "#/definitions/CustomerInfo"
        }
      }
    },
    "CreateCustomerResultInfo": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "definitions.CreateCustomerResultInfo.properties.clientRequestId.description"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "definitions.CreateCustomerResultInfo.properties.clientRequestTime.description"
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "definitions.CreateCustomerResultInfo.properties.effectiveDate.description"
        },
        "CustomerInfo": {
          "$ref": "#/definitions/CustomerInfo"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "definitions.CreateCustomerResultInfo.properties.result.description",
          "enum": [
            -1,
            0,
            1
          ]
        }
      }
    },
    "RegisterRequest": {
      "type": "object",
      "required": [
        "claimType",
        "claimant",
        "event",
        "insured",
        "policyNo",
        "relationToInsured"
      ],
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "Client request id, to identify a request"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "Client request time, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "policyNo": {
          "type": "string",
          "description": "Claim policy number"
        },
        "claimant": {
          "$ref": "#/definitions/ClaimantInput",
          "description": "Information of claimant"
        },
        "insured": {
          "$ref": "#/definitions/InsuredInput",
          "description": "Information of insured"
        },
        "relationToInsured": {
          "type": "integer",
          "format": "int32",
          "description": "Claimant relation to insured <br>1 - Spouse <br>2 - Child <br>3 - Parent <br>4 - Relative <br>6 - others <br>7 - Employer <br>1001 - self",
          "enum": [
            1,
            2,
            3,
            4,
            6,
            7,
            1001
          ]
        },
        "event": {
          "$ref": "#/definitions/ClaimEventInput",
          "description": "Information of claim event"
        },
        "claimType": {
          "type": "integer",
          "format": "int32",
          "description": "Claim type <br>1 - Accident <br>2 - Death <br>5 - Hospitalization<br>8 - Medical ",
          "enum": [
            1,
            2,
            5,
            8
          ]
        }
      }
    },
    "RegisterResponse": {
      "type": "object",
      "required": [
        "claimCaseNo"
      ],
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "Client request id, to identify a request"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "Client request time, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Result. <br>1 - Success<br>0 - Failed with business issue<br>-1 - Failed with unknown exception"
        },
        "messages": {
          "type": "array",
          "description": "Messages of business issues",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "exceptions": {
          "type": "array",
          "description": "Exception messages",
          "items": {
            "type": "string"
          }
        },
        "claimCaseNo": {
          "type": "string",
          "description": "Claim case number"
        }
      }
    },
    "ClaimantInput": {
      "type": "object",
      "required": [
        "name",
        "partyContact"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name"
        },
        "partyContact": {
          "$ref": "#/definitions/ContactInput",
          "description": "Contact information"
        }
      }
    },
    "ClaimEventInput": {
      "type": "object",
      "required": [
        "eventDetail",
        "eventNature",
        "eventTime"
      ],
      "properties": {
        "reportType": {
          "type": "integer",
          "format": "int32",
          "description": "Report by <br>1 - phone <br>2 - fax <br>4 - sms <br>5 - network <br>6 - email",
          "enum": [
            1,
            2,
            4,
            5,
            6
          ]
        },
        "eventNature": {
          "type": "integer",
          "format": "int32",
          "description": "Event nature <br>1 - illness <br>2 - accident",
          "enum": [
            1,
            2
          ]
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date when claim event happens, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "eventDetail": {
          "type": "string",
          "description": "Detail of claim event"
        }
      }
    },
    "InsuredInput": {
      "type": "object",
      "required": [
        "certiCode",
        "certiType",
        "gender",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name"
        },
        "gender": {
          "type": "string",
          "description": "Insured's sex, M - male;<br>F - female",
          "enum": [
            "F",
            "M"
          ]
        },
        "certiType": {
          "type": "integer",
          "format": "int32",
          "description": "ID type, number type<br>1 - ID card<br>2 - military certificate<br>3 - passport<br>4 - birth certificate<br>9 - other",
          "enum": [
            1,
            3,
            9
          ]
        },
        "certiCode": {
          "type": "string",
          "description": "ID Number"
        }
      }
    },
    "PolicyAlterationResultInfo": {
      "type": "object",
      "properties": {
        "changeId": {
          "type": "integer",
          "format": "int64",
          "description": "Alteration internal id"
        },
        "clientRequestId": {
          "type": "string",
          "description": "Client request id, to identify a request"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "Client request time, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception messages",
          "items": {
            "type": "string"
          }
        },
        "finishTime": {
          "type": "string",
          "format": "date-time",
          "description": "Alteration finishing time, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "itemResults": {
          "type": "array",
          "description": "Alteration items",
          "items": {
            "$ref": "#/definitions/AlterationItemResultInfo"
          }
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Result. <br>1 - Success<br>0 - Failed with business issue<br>-1 - Failed with unknown exception"
        }
      }
    },
    "AlterationItemResultInfo": {
      "type": "object",
      "properties": {
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "Effective date, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "freelookResultInfo": {
          "$ref": "#/definitions/FreelookResultInfo"
        },
        "orderId": {
          "type": "integer",
          "format": "int32",
          "description": "Alteration order, default is 1"
        },
        "policyChgId": {
          "type": "integer",
          "format": "int64",
          "description": "Policy alteration internal id"
        },
        "policyId": {
          "type": "integer",
          "format": "int64",
          "description": "Policy internal id"
        },
        "serviceId": {
          "type": "integer",
          "format": "int32",
          "description": "Alteration type id<br>201 - Freelook",
          "example": 201
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Submission date, format: yyyy-MM-dd'T'HH:mm:ss"
        }
      }
    },
    "PolicyAlterationInput": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "Client request id, to identify a request"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "Client request time, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "items": {
          "type": "array",
          "description": "Alteration item",
          "items": {
            "$ref": "#/definitions/AlterationItemInput"
          }
        }
      }
    },
    "AlterationItemInput": {
      "type": "object",
      "properties": {
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "Effective date, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "freelookInput": {
          "$ref": "#/definitions/FreelookInput"
        },
        "orderId": {
          "type": "integer",
          "format": "int32",
          "description": "Alteration order, default is 1",
          "example": 1
        },
        "policyChgId": {
          "type": "integer",
          "format": "int64",
          "description": "Policy alteration internal id"
        },
        "policyId": {
          "type": "integer",
          "format": "int64",
          "description": "Policy alteration internal id"
        },
        "serviceId": {
          "type": "integer",
          "format": "int32",
          "description": "Alteration type id<br>201 - Freelook",
          "example": 201
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Submission date, format: yyyy-MM-dd'T'HH:mm:ss"
        }
      }
    },
    "AlterationQuotationInput": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "Client request id, to identify a request"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "Client request time, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "Effective date, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "freelookInput": {
          "$ref": "#/definitions/FreelookInput"
        },
        "policyId": {
          "type": "integer",
          "format": "int64",
          "description": "Policy alteration internal id"
        },
        "serviceId": {
          "type": "integer",
          "format": "int32",
          "description": "Alteration type id<br>201 - Freelook",
          "example": 201
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Submission date, format: yyyy-MM-dd'T'HH:mm:ss"
        }
      }
    },
    "AlterationQuotationResultInfo": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "Client request id, to identify a request"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "Client request time, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "Effective date, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception messages",
          "items": {
            "type": "string"
          }
        },
        "policyId": {
          "type": "integer",
          "format": "int64",
          "description": "Policy alteration internal id"
        },
        "freelookResultInfo": {
          "$ref": "#/definitions/FreelookResultInfo"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Result. <br>1 - Success<br>0 - Failed with business issue<br>-1 - Failed with unknown exception"
        },
        "serviceId": {
          "type": "integer",
          "format": "int32",
          "description": "Alteration type id<br>201 - Freelook",
          "example": 201
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Submission date, format: yyyy-MM-dd'T'HH:mm:ss"
        }
      }
    },
    "FreelookInput": {
      "type": "object",
      "properties": {
        "alteredCoverages": {
          "type": "array",
          "description": "Coverage to be alternated",
          "items": {
            "$ref": "#/definitions/CoverageInput"
          }
        },
        "freelookReason": {
          "type": "integer",
          "format": "int32",
          "description": "Freelook reason<br>51 - Financial Difficulty<br>52 - Agent Misrepresented<br>53 - Poor Service from Agent<br>54 - Mismatched Product<br>55 - Others",
          "enum": [
            51,
            52,
            53,
            54,
            55
          ]
        }
      }
    },
    "FreelookResultInfo": {
      "type": "object",
      "properties": {
        "adminFee": {
          "type": "number",
          "format": "double",
          "description": "Alteration administration fee"
        },
        "advancePremium": {
          "type": "number",
          "format": "double",
          "description": "Advance premium"
        },
        "medicalFee": {
          "type": "number",
          "format": "double",
          "description": "Medical fee"
        },
        "suspense": {
          "type": "number",
          "format": "double",
          "description": "Premium suspense"
        },
        "totalExtraPremium": {
          "type": "number",
          "format": "double",
          "description": "Total additional premium"
        },
        "totalGrossPremium": {
          "type": "number",
          "format": "double",
          "description": "Total gross premium"
        },
        "totalRefundAmount": {
          "type": "number",
          "format": "double",
          "description": "Total refund amount"
        }
      }
    },
    "CoverageInput": {
      "type": "object",
      "properties": {
        "coverageId": {
          "type": "integer",
          "format": "int64",
          "description": "Coverage internal id to be alternated"
        }
      }
    },
    "GenericVO": {
      "type": "object",
      "properties": {
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        }
      }
    },
    "GenericValidationResult": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "ruleType": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
  }
}
