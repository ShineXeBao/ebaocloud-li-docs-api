{
  "swagger": "2.0",
  "info": {
    "version": "0.1.1",
    "title": "eBaoCloud LI OpenAPI",
    "termsOfService": "http://api.ebaocloud.life/",
    "contact": {
      "email": "liliang.zhu@ebaotech.com"
    },
    "description": "This document is the API specification for the eBaoCloud Life part. To practice and run the APIs in this document, you need to apply an eBaoCloud tenant account(starting from a sandbox account instead of production account) first.<br>\nContact liliang.zhu@ebaotech.com for more information and trial using.\n\n# Built on\nTue Mar 13 2018, 19:44:00 +08:00\n\n# Versioning\nAPI version| Date  |Comments\n"
  },
  "host": "sandbox.gw.ebaocloud.com.cn",
  "basePath": "rest",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "tags": [
    {
      "name": "Claim"
    },
    {
      "name": "policy alteration",
      "description": "tags['1'].description"
    },
    {
      "name": "Policy"
    }
  ],
  "definitions": {
    "RegisterRequest": {
      "type": "object",
      "required": [
        "claimType",
        "claimant",
        "event",
        "insured",
        "policyNo",
        "relationToInsured"
      ],
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "Client request id, to identify a request"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "Client request time, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "policyNo": {
          "type": "string",
          "description": "Claim policy number"
        },
        "claimant": {
          "description": "Information of claimant",
          "$ref": "#/definitions/ClaimantInput"
        },
        "insured": {
          "description": "Information of insured",
          "$ref": "#/definitions/InsuredInput"
        },
        "relationToInsured": {
          "type": "integer",
          "format": "int32",
          "description": "Claimant relation to insured <br>1 - Spouse <br>2 - Child <br>3 - Parent <br>4 - Relative <br>6 - others <br>7 - Employer <br>1001 - self",
          "enum": [
            1,
            2,
            3,
            4,
            6,
            7,
            1001
          ]
        },
        "event": {
          "description": "Information of claim event",
          "$ref": "#/definitions/ClaimEventInput"
        },
        "claimType": {
          "type": "integer",
          "format": "int32",
          "description": "Claim type <br>1 - Accident <br>2 - Death <br>5 - Hospitalization<br>8 - Medical ",
          "enum": [
            1,
            2,
            5,
            8
          ]
        }
      }
    },
    "RegisterResponse": {
      "type": "object",
      "required": [
        "claimCaseNo"
      ],
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "Client request id, to identify a request"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "Client request time, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Result. <br>1 - Success<br>0 - Failed with business issue<br>-1 - Failed with unknown exception"
        },
        "messages": {
          "type": "array",
          "description": "Messages of business issues",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "exceptions": {
          "type": "array",
          "description": "Exception messages",
          "items": {
            "type": "string"
          }
        },
        "claimCaseNo": {
          "type": "string",
          "description": "Claim case number"
        }
      }
    },
    "ContactInput": {
      "type": "object",
      "required": [
        "email",
        "mobile"
      ],
      "properties": {
        "email": {
          "type": "string",
          "description": "Email"
        },
        "mobile": {
          "type": "string",
          "description": "Mobile No."
        }
      }
    },
    "ClaimEventInput": {
      "type": "object",
      "required": [
        "eventDetail",
        "eventNature",
        "eventTime"
      ],
      "properties": {
        "reportType": {
          "type": "integer",
          "format": "int32",
          "description": "Report by <br>1 - phone <br>2 - fax <br>4 - sms <br>5 - network <br>6 - email",
          "enum": [
            1,
            2,
            4,
            5,
            6
          ]
        },
        "eventNature": {
          "type": "integer",
          "format": "int32",
          "description": "Event nature <br>1 - illness <br>2 - accident",
          "enum": [
            1,
            2
          ]
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Date when claim event happens, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "eventDetail": {
          "type": "string",
          "description": "Detail of claim event"
        }
      }
    },
    "InsuredInput": {
      "type": "object",
      "required": [
        "certiCode",
        "certiType",
        "gender",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name"
        },
        "gender": {
          "type": "string",
          "description": "Insured's sex, M - male;<br>F - female",
          "enum": [
            "F",
            "M"
          ]
        },
        "certiType": {
          "type": "integer",
          "format": "int32",
          "description": "ID type, number type<br>1 - ID card<br>2 - military certificate<br>3 - passport<br>4 - birth certificate<br>9 - other",
          "enum": [
            1,
            3,
            9
          ]
        },
        "certiCode": {
          "type": "string",
          "description": "ID Number"
        }
      }
    },
    "GenericValidationResult": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "ruleType": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ClaimantInput": {
      "type": "object",
      "required": [
        "name",
        "partyContact"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name"
        },
        "partyContact": {
          "description": "Contact information",
          "$ref": "#/definitions/ContactInput"
        }
      }
    },
    "AlterationItemResultInfo": {
      "type": "object",
      "properties": {
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "Effective date, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "freelookResultInfo": {
          "$ref": "#/definitions/FreelookResultInfo"
        },
        "orderId": {
          "type": "integer",
          "format": "int32",
          "description": "Alteration order, default is 1"
        },
        "policyChgId": {
          "type": "integer",
          "format": "int64",
          "description": "Policy alteration internal id"
        },
        "policyId": {
          "type": "integer",
          "format": "int64",
          "description": "Policy internal id"
        },
        "serviceId": {
          "type": "integer",
          "format": "int32",
          "description": "Alteration type id<br>201 - Freelook",
          "example": "201"
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Submission date, format: yyyy-MM-dd'T'HH:mm:ss"
        }
      }
    },
    "PolicyAlterationResultInfo": {
      "type": "object",
      "properties": {
        "changeId": {
          "type": "integer",
          "format": "int64",
          "description": "Alteration internal id"
        },
        "clientRequestId": {
          "type": "string",
          "description": "Client request id, to identify a request"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "Client request time, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Exception messages"
        },
        "finishTime": {
          "type": "string",
          "format": "date-time",
          "description": "Alteration finishing time, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "itemResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlterationItemResultInfo"
          },
          "description": "Alteration items"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Result. <br>1 - Success<br>0 - Failed with business issue<br>-1 - Failed with unknown exception"
        }
      }
    },
    "CoverageInput": {
      "type": "object",
      "properties": {
        "coverageId": {
          "type": "integer",
          "format": "int64",
          "description": "Coverage internal id to be alternated"
        }
      }
    },
    "FreelookInput": {
      "type": "object",
      "properties": {
        "alteredCoverages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoverageInput"
          },
          "description": "Coverage to be alternated"
        },
        "freelookReason": {
          "type": "integer",
          "format": "int32",
          "description": "Freelook reason<br>51 - Financial Difficulty<br>52 - Agent Misrepresented<br>53 - Poor Service from Agent<br>54 - Mismatched Product<br>55 - Others",
          "enum": [
            "51",
            "52",
            "53",
            "54",
            "55"
          ]
        }
      }
    },
    "GenericVO": {
      "type": "object",
      "properties": {
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        }
      }
    },
    "PolicyAlterationInput": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "Client request id, to identify a request"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "Client request time, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlterationItemInput"
          },
          "description": "Alteration item"
        }
      }
    },
    "AlterationItemInput": {
      "type": "object",
      "properties": {
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "Effective date, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "freelookInput": {
          "$ref": "#/definitions/FreelookInput"
        },
        "orderId": {
          "type": "integer",
          "format": "int32",
          "description": "Alteration order, default is 1",
          "example": "1"
        },
        "policyChgId": {
          "type": "integer",
          "format": "int64",
          "description": "Policy alteration internal id"
        },
        "policyId": {
          "type": "integer",
          "format": "int64",
          "description": "Policy alteration internal id"
        },
        "serviceId": {
          "type": "integer",
          "format": "int32",
          "description": "Alteration type id<br>201 - Freelook",
          "example": "201"
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Submission date, format: yyyy-MM-dd'T'HH:mm:ss"
        }
      }
    },
    "AlterationQuotationInput": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "Client request id, to identify a request"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "Client request time, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "Effective date, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "freelookInput": {
          "$ref": "#/definitions/FreelookInput"
        },
        "policyId": {
          "type": "integer",
          "format": "int64",
          "description": "Policy alteration internal id"
        },
        "serviceId": {
          "type": "integer",
          "format": "int32",
          "description": "Alteration type id<br>201 - Freelook",
          "example": "201"
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Submission date, format: yyyy-MM-dd'T'HH:mm:ss"
        }
      }
    },
    "AlterationQuotationResultInfo": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "Client request id, to identify a request"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "Client request time, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "effectiveDate": {
          "type": "string",
          "format": "date-time",
          "description": "Effective date, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Exception messages"
        },
        "policyId": {
          "type": "integer",
          "format": "int64",
          "description": "Policy alteration internal id"
        },
        "freelookResultInfo": {
          "$ref": "#/definitions/FreelookResultInfo"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Result. <br>1 - Success<br>0 - Failed with business issue<br>-1 - Failed with unknown exception"
        },
        "serviceId": {
          "type": "integer",
          "format": "int32",
          "description": "Alteration type id<br>201 - Freelook",
          "example": "201"
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Submission date, format: yyyy-MM-dd'T'HH:mm:ss"
        }
      }
    },
    "FreelookResultInfo": {
      "type": "object",
      "properties": {
        "adminFee": {
          "type": "number",
          "format": "double",
          "description": "Alteration administration fee"
        },
        "advancePremium": {
          "type": "number",
          "format": "double",
          "description": "Advance premium"
        },
        "medicalFee": {
          "type": "number",
          "format": "double",
          "description": "Medical fee"
        },
        "suspense": {
          "type": "number",
          "format": "double",
          "description": "Premium suspense"
        },
        "totalExtraPremium": {
          "type": "number",
          "format": "double",
          "description": "Total additional premium"
        },
        "totalGrossPremium": {
          "type": "number",
          "format": "double",
          "description": "Total gross premium"
        },
        "totalRefundAmount": {
          "type": "number",
          "format": "double",
          "description": "Total refund amount"
        }
      }
    },
    "Organization": {
      "type": "object",
      "properties": {
        "registerType": {
          "type": "string",
          "example": "1001",
          "description": "Company certificate type, 1001 - company registration number"
        },
        "registerCode": {
          "type": "string",
          "example": "xxxx",
          "description": "Company ID"
        },
        "countryCode": {
          "type": "string",
          "example": "156",
          "description": "Registered country, 156 - China"
        },
        "companyName": {
          "type": "string",
          "example": "xxxxxx",
          "description": "Name of company"
        },
        "organCode": {
          "type": "string",
          "example": "xxxxxx",
          "description": "Organization code"
        }
      }
    },
    "RecurringTopupInvestRateInfo": {
      "type": "object",
      "properties": {
        "fundCode": {
          "type": "string",
          "example": "F001",
          "description": "Fund code"
        },
        "assignRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Fund assign ratio"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "BeneficiaryInfo": {
      "type": "object",
      "properties": {
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type"
        },
        "policyCustomer": {
          "description": "Customer detail",
          "$ref": "#/definitions/PolicyCustomerInfo"
        },
        "insuredPartyId": {
          "type": "string",
          "description": "Beneficiaries' according insured Id"
        },
        "beneType": {
          "type": "string",
          "example": "2",
          "description": "Beneficiaries, 1 beneficiaries<br>2 - beneficiaries<br>3 - insured beneficiaries",
          "enum": [
            "1",
            "2",
            "3"
          ]
        },
        "designation": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship to the insured<br>1 - wife<br>2 - husband<br>3 - child<br>4 - father<br>5 - mother<br>6 - Grand father<br>7 - Grandparent<br>8 - brother<br>9 - sister<br>10 - uncle<br>11 - untie<br>12 - cousin<br>13 - nephew(niece)<br>14 - employer<br>15 - other<br>16 - self",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16
          ]
        },
        "shareOrder": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Benefit order"
        },
        "shareRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Benefit ratio, up to 1"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PayPlanInfo": {
      "type": "object",
      "properties": {
        "endPeriod": {
          "type": "string",
          "example": "3",
          "description": "Year to receive the type of annuity, the type of annuity / variable annuity / GMWB should not be empty<br>1 to receive a fixed number of years<br>2 to receive till a certain age<br>3 - receive whole life",
          "enum": [
            "1",
            "2",
            "3"
          ]
        },
        "endYear": {
          "type": "integer",
          "format": "int32",
          "description": "The number of payment years"
        },
        "gurntPeriod": {
          "type": "integer",
          "format": "int32",
          "description": "Annuity guarantee period (years or age)"
        },
        "payOption": {
          "type": "string",
          "example": "1",
          "description": "The annuity receive payment options: 1 - to receive payment by cash<br>2 - to pay premium<br>3 - accumulated interest<br>4 - accumulated interest x years after the transfer to pay premium<br>5 - to buy an additional payment of rider",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "payOptionTerm": {
          "type": "integer",
          "format": "int32",
          "description": "Years, only when payOption is 4, this field has value, for others are empty"
        },
        "payPeriod": {
          "type": "string",
          "example": "3",
          "description": "The annuity begins to receive the type of period<br>1 - is immediately received<br>2 - till a certain age to receive<br>3 - years after the collection<br>4 - after a certain age to receive",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "payYear": {
          "type": "integer",
          "format": "int32",
          "description": "The annuity begins to receive the period (years or age)"
        },
        "planFreq": {
          "type": "string",
          "example": "1",
          "description": "To receive frequency<br>1 - yearly<br>2 - half yearly<br>3 - quarterly <br>4 - monthly<br>5 - single",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "planType": {
          "type": "string",
          "example": "1",
          "description": "Payment plan type<br>1 - cash payment<br>2 - annuity<br>3 - survival benefit<br>4 - maturity  5 - GMWB (guaranteed minimum benefit)<br>6 - variable annuity<br>7 - partial surrender<br>8 - SA dividends",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8"
          ]
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PolicySummaryInfo": {
      "type": "object",
      "properties": {
        "quotationCode": {
          "type": "string",
          "description": "Quotation calculation request number"
        },
        "policyNumber": {
          "type": "string",
          "description": "Policy number"
        },
        "proposalNumber": {
          "type": "string",
          "description": "Proposal number"
        },
        "applyDate": {
          "type": "string",
          "format": "date-time",
          "description": "Application date, non-empty, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy effective date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "issueDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy issue date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Termination date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "policyHolderName": {
          "type": "string",
          "description": "Policy holder's name"
        },
        "mainInsuredName": {
          "type": "string",
          "description": "Main insured name"
        },
        "masterProductCode": {
          "type": "string",
          "description": "Main product code"
        },
        "masterProductName": {
          "type": "string",
          "description": "Main product name"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Policy premium",
          "readOnly": true
        },
        "proposalStatus": {
          "type": "string",
          "description": "Proposal status"
        },
        "riskStatus": {
          "type": "string",
          "description": "Policy status<br>0 - not inforce<br>1 - inforce<br>2 - lapsed<br>3 - terminated"
        }
      }
    },
    "BankAccountInfo": {
      "type": "object",
      "properties": {
        "branchCode": {
          "type": "string",
          "example": "1001",
          "description": "Branch code"
        },
        "bankCode": {
          "type": "string",
          "example": "test_bank",
          "description": "Bank code"
        },
        "bankAccountProvince": {
          "type": "string",
          "example": "Shanghai",
          "description": "The province, the bank account belongs to"
        },
        "bankAccountCity": {
          "type": "string",
          "example": "Shanghai",
          "description": "The city, the bank account belongs to"
        },
        "issueBankName": {
          "type": "string",
          "example": "ICBC",
          "description": "Card issue bank"
        },
        "bankAccount": {
          "type": "string",
          "example": "1111222233334444567",
          "description": "Bank Account"
        },
        "accoName": {
          "type": "string",
          "example": "张三",
          "description": "Account holder name"
        },
        "accountType": {
          "type": "string",
          "example": "2",
          "description": "Account type, 2 debit card<br>8 - credit card",
          "enum": [
            "2",
            "8"
          ]
        },
        "debitCreditType": {
          "type": "string",
          "example": "0",
          "description": "Account use<br>0 - pay and use<br>1 - fee<br>2 - refund",
          "enum": [
            "0",
            "1",
            "2"
          ]
        },
        "creditCardType": {
          "type": "string",
          "example": "1",
          "description": "Credit card type, if not credit card, be empty<br>1 - Master<br>2 - Visa<br>3 - BCA<br>4 - JCB",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "expireDate": {
          "type": "string",
          "format": "date-time",
          "example": "10/2020",
          "description": "Account expiration date, MM / yyyy"
        }
      }
    },
    "PageablePolicyCriteria": {
      "type": "object",
      "properties": {
        "applyDateFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2017-07-01",
          "description": "Search criteria: application date from"
        },
        "applyDateTo": {
          "type": "string",
          "format": "date-time",
          "example": "2017-08-01",
          "description": "Search criteria: application date to"
        },
        "certiCode": {
          "type": "string",
          "example": "1234567890",
          "description": "Search criteria: id no. of policy customer (policy holder or insured)"
        },
        "masterProductCode": {
          "type": "string",
          "example": "07H004",
          "description": "Search criteria: code of master product"
        },
        "name": {
          "type": "string",
          "example": "name",
          "description": "Search criteria: name of policy customer (policy holder or insured)"
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page criteria: target page number, start from 0"
        },
        "policyNumber": {
          "type": "string",
          "description": "Search criteria: policy no."
        },
        "proposalNumber": {
          "type": "string",
          "description": "Search criteria: application code"
        },
        "quotationCode": {
          "type": "string",
          "description": "Search criteria: order no."
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Page criteria: how many records per page, default as 10"
        }
      }
    },
    "PayerAccountInfo": {
      "type": "object",
      "properties": {
        "paymentMethod": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "First time payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card",
          "enum": [
            1,
            2,
            3,
            30,
            80
          ]
        },
        "paymentMethodNext": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "Renewal payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card",
          "enum": [
            1,
            2,
            3,
            30,
            80
          ]
        },
        "bankAccount": {
          "description": "The first premium bank account",
          "$ref": "#/definitions/BankAccountInfo"
        },
        "nextBankAccount": {
          "description": "Renewal premium bank account",
          "$ref": "#/definitions/BankAccountInfo"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CustomerDeclarationDetailInfo": {
      "type": "object",
      "properties": {
        "declId": {
          "type": "integer",
          "format": "int64",
          "description": "Declaration item number, number type"
        },
        "fill1": {
          "type": "string",
          "description": "Declaration item to answer the content 1, character type, the content with the different items and different"
        },
        "fill2": {
          "type": "string",
          "description": "Declaration item to answer the content 2, character type, the content with the different items and different"
        },
        "fill3": {
          "type": "string",
          "description": "Declaration item to answer the content 3, character type, the content with the different items and different"
        },
        "fill4": {
          "type": "string",
          "description": "Declaration item to answer the content 4, character type, the content with the different items and different"
        },
        "fill5": {
          "type": "string",
          "description": "Declaration item to answer the content 5, character type, the content with the different items and different"
        },
        "fill6": {
          "type": "string",
          "description": "Declaration item to answer the content 6, character type, the content with the different items and different"
        },
        "fill7": {
          "type": "string",
          "description": "Declaration item to answer the content 7, character type, the content with the different items and different"
        },
        "fill8": {
          "type": "string",
          "description": "Declaration item to answer the content 8, character type, the content with the different items and different"
        },
        "fill9": {
          "type": "string",
          "description": "Declaration item to answer the content 9, character type, the content with the different items and different"
        },
        "fill10": {
          "type": "string",
          "description": "Declaration item to answer the content 10, character type, the content with the different items and different"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PolicyInfo": {
      "type": "object",
      "properties": {
        "policyType": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Policy type<br>1 - Individual policy<br>2 - Group policy<br>3 - Banc assurance",
          "enum": [
            1,
            2,
            3
          ]
        },
        "riskStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Policy status<br>0 - not inforce<br>1 - inforce<br>2 - lapsed<br>3 - terminated",
          "readOnly": true
        },
        "applyDate": {
          "type": "string",
          "format": "date-time",
          "description": "Application Date, mandatory, format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "issueDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy issue date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Policy premium"
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Currency, non empty<br>1 - CNY",
          "enum": [
            1
          ]
        },
        "ePolicyDownloadUrl": {
          "type": "string",
          "description": "Electronic policy download address"
        },
        "groupProposalNumber": {
          "type": "string",
          "description": "Group proposal No."
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy effective date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Termination date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "proposalNumber": {
          "type": "string",
          "description": "Proposal number"
        },
        "deliverType": {
          "type": "string",
          "example": "M",
          "description": "Policy delivery method<br>H - by people<br>M - by mail",
          "enum": [
            "H",
            "M"
          ]
        },
        "policyNumber": {
          "type": "string",
          "description": "Policy number"
        },
        "quotationCode": {
          "type": "string",
          "description": "Quotation calculation request number"
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of submission, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "serviceAgentCode": {
          "type": "string",
          "description": "Policy agent code"
        },
        "salesChannelCode": {
          "type": "string",
          "description": "Sales channel code"
        },
        "preprintedProposalNumber": {
          "type": "string",
          "description": "Pre-printed proposal number"
        },
        "proposalInfo": {
          "description": "Proposal detail",
          "$ref": "#/definitions/PolicyProposalInfo"
        },
        "policyPackage": {
          "description": "Product package",
          "$ref": "#/definitions/PolicyPackageInfo"
        },
        "coverages": {
          "type": "array",
          "description": "Policy's coverage list",
          "items": {
            "$ref": "#/definitions/CoverageInfo"
          }
        },
        "policyHolder": {
          "description": "Policy holder",
          "$ref": "#/definitions/PolicyHolderInfo"
        },
        "insureds": {
          "type": "array",
          "description": "Policy insured list",
          "items": {
            "$ref": "#/definitions/InsuredInfo"
          }
        },
        "beneficiaries": {
          "type": "array",
          "description": "List of beneficiaries",
          "items": {
            "$ref": "#/definitions/BeneficiaryInfo"
          }
        },
        "payerAccounts": {
          "type": "array",
          "description": "Payment list",
          "items": {
            "$ref": "#/definitions/PayerAccountInfo"
          }
        },
        "declarations": {
          "type": "array",
          "description": "Customer declaration list",
          "items": {
            "$ref": "#/definitions/CustomerDeclarationInfo"
          }
        },
        "agentDeclarations": {
          "type": "array",
          "description": "Agent declarations",
          "items": {
            "$ref": "#/definitions/AgentDeclarationInfo"
          }
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "InsuredInfo": {
      "type": "object",
      "properties": {
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type"
        },
        "policyCustomer": {
          "description": "Customer detail",
          "$ref": "#/definitions/PolicyCustomerInfo"
        },
        "relationToPH": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship between the insured and the insured, integer type<br>1 - self<br>2 - child<br>3 - spouse<br>10 - parent<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            4,
            7
          ]
        },
        "medicalExamIndi": {
          "type": "string",
          "example": "N",
          "description": "Whether physical exam is required<br>Y - yes;<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        },
        "medicalIndi": {
          "type": "string",
          "example": "Y",
          "description": "Whether there is medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        },
        "socialSecurityIndi": {
          "type": "string",
          "example": "Y",
          "description": "Whether there is social medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AgentDeclarationInfo": {
      "type": "object",
      "properties": {
        "agentCode": {
          "type": "string",
          "description": "Agent code"
        },
        "declCode": {
          "type": "string",
          "description": "Declaration item code"
        },
        "fill1": {
          "type": "string",
          "description": "Declaration item to answer the content 1, character type, the content with the different items and different"
        },
        "fill2": {
          "type": "string",
          "description": "Declaration item to answer the content 2, character type, the content with the different items and different"
        },
        "fill3": {
          "type": "string",
          "description": "Declaration item to answer the content 3, character type, the content with the different items and different"
        },
        "fill4": {
          "type": "string",
          "description": "Declaration item to answer the content 4, character type, the content with the different items and different"
        },
        "fill5": {
          "type": "string",
          "description": "Declaration item to answer the content 5, character type, the content with the different items and different"
        },
        "fill6": {
          "type": "string",
          "description": "Declaration item to answer the content 6, character type, the content with the different items and different"
        },
        "fill7": {
          "type": "string",
          "description": "Declaration item to answer the content 7, character type, the content with the different items and different"
        },
        "fill8": {
          "type": "string",
          "description": "Declaration item to answer the content 8, character type, the content with the different items and different"
        },
        "fill9": {
          "type": "string",
          "description": "Declaration item to answer the content 9, character type, the content with the different items and different"
        },
        "fill10": {
          "type": "string",
          "description": "Declaration item to answer the content 10, character type, the content with the different items and different"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CoverageAgentInfo": {
      "type": "object",
      "properties": {
        "agentCode": {
          "type": "string",
          "description": "Policy agent code"
        },
        "assignRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Performance rating, the maximum for the 1"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AddressInfo": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string",
          "example": "上海市",
          "description": "Province"
        },
        "address2": {
          "type": "string",
          "example": "上海市",
          "description": "City"
        },
        "address3": {
          "type": "string",
          "example": "杨浦区",
          "description": "District"
        },
        "address4": {
          "type": "string",
          "example": "淞沪路270号创智天地3号楼3楼",
          "description": "Address"
        },
        "postCode": {
          "type": "string",
          "example": "200433",
          "description": "Post code"
        }
      }
    },
    "CoverageInfo": {
      "type": "object",
      "properties": {
        "chargePeriod": {
          "type": "string",
          "example": "2",
          "description": "Payment period type, non-empty<br>1 - single<br>2 - per year<br>3 to a certain age<br>4 - whole life",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "example": 20,
          "description": "Payment period, non-empty<br>0 - single;<br>by age: till which age or to pay the payment period: the pay years;<br>whole life is 100"
        },
        "coveragePeriod": {
          "type": "string",
          "example": "1",
          "description": "Coverage type<br>1 - whole life<br>2 - per year<br>3 - Cover to a certain age<br>4 - per month<br>5 - per day",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "coverageYear": {
          "type": "integer",
          "format": "int32",
          "description": "Coverage Term. Meaning of this property is associated with property \"coveragePeriod\" (\"type\" for short). when covers whole life, value of this property is 9999;<br>and if type is 2, means years covered;<br>and if type is 3, means age when coverage expired;<br>and if type is 4, means months covered;<br>and if type is 5, means days covered."
        },
        "currentPremium": {
          "description": "The current period premium",
          "$ref": "#/definitions/CoveragePremium"
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "masterProductCode": {
          "type": "string",
          "description": "Main product code"
        },
        "waiverExt": {
          "description": "Waiver plan information",
          "$ref": "#/definitions/CoverageExtWaiver"
        },
        "nextPremium": {
          "description": "Renew premium (next premium)",
          "$ref": "#/definitions/CoveragePremium"
        },
        "coverageAgents": {
          "type": "array",
          "description": "List of performance sharing of agent",
          "items": {
            "$ref": "#/definitions/CoverageAgentInfo"
          }
        },
        "payPlans": {
          "type": "array",
          "description": "Payment plan list",
          "items": {
            "$ref": "#/definitions/PayPlanInfo"
          }
        },
        "insureds": {
          "type": "array",
          "description": "List of insured",
          "items": {
            "$ref": "#/definitions/CoverageInsuredInfo"
          }
        },
        "premInvestRates": {
          "type": "array",
          "description": "The ratio of premium and investment amount",
          "items": {
            "$ref": "#/definitions/PremInvestRateInfo"
          }
        },
        "recurringTopup": {
          "description": "Recurring top-up",
          "$ref": "#/definitions/RecurringTopupInfo"
        },
        "contractInvests": {
          "type": "array",
          "description": "Policy investment information",
          "items": {
            "$ref": "#/definitions/ContractInvestInfo"
          }
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PremInvestRateInfo": {
      "type": "object",
      "properties": {
        "fundCode": {
          "type": "string",
          "example": "F001",
          "description": "Fund code"
        },
        "assignRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Fund assign ratio"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CoverageExtWaiver": {
      "type": "object",
      "properties": {
        "waivedSa": {
          "type": "number",
          "format": "double",
          "description": "Exempt from the amount of insurance, 0 that a full exemption, not 0 that exemption from the specified amount, can not exceed the insurance premium is exempt"
        },
        "waiver": {
          "type": "string",
          "example": "N",
          "description": "Is waiver<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        }
      }
    },
    "ContractInvestInfo": {
      "type": "object",
      "properties": {
        "fundCode": {
          "type": "string",
          "example": "F001",
          "description": "Fund code"
        },
        "accumUnits": {
          "type": "number",
          "format": "double",
          "example": 1000,
          "description": "Fund units"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PolicyPackageInfo": {
      "type": "object",
      "properties": {
        "packageCode": {
          "type": "string",
          "description": "Product package code"
        },
        "unit": {
          "type": "number",
          "format": "double",
          "description": "Product package unit, the default is 1"
        }
      }
    },
    "PolicyProposalInfo": {
      "type": "object",
      "properties": {
        "proposalStatus": {
          "type": "string",
          "description": "Proposal status"
        }
      }
    },
    "CoveragePremium": {
      "type": "object",
      "properties": {
        "benefitLevel": {
          "type": "string",
          "description": "Plan benefit level, the product insured by the level of non-empty"
        },
        "paymentFreq": {
          "type": "string",
          "example": "1",
          "description": "Pay frequency<br>1 - yearly payment<br>2 - half yearly payment<br>3 - quarterly payment<br>4 - monthly payment<br>5 - single premium",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "sumAssured": {
          "type": "number",
          "format": "double",
          "example": 100000,
          "description": "Insurance SA, non empty when calculate premium base on SA"
        },
        "premium": {
          "type": "number",
          "format": "double",
          "example": 2314,
          "description": "Insurance premium, non empty when calculate SA base on premium"
        },
        "unit": {
          "type": "number",
          "format": "double",
          "description": "Product unit, non empty when by unit insurance"
        }
      }
    },
    "PolicyCustomerInfo": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Customer address",
          "$ref": "#/definitions/AddressInfo"
        },
        "partyType": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The type of the party<br>1 - the personal party<br>2 - organization",
          "enum": [
            1,
            2
          ]
        },
        "person": {
          "description": "Personal customer information",
          "$ref": "#/definitions/Person"
        },
        "organization": {
          "description": "Organization customer information",
          "$ref": "#/definitions/Organization"
        },
        "partyContact": {
          "description": "Party contact information",
          "$ref": "#/definitions/PartyContact"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CustomerDeclarationInfo": {
      "type": "object",
      "properties": {
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type"
        },
        "declarationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Declaration date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "details": {
          "type": "array",
          "description": "Declaration details",
          "items": {
            "$ref": "#/definitions/CustomerDeclarationDetailInfo"
          }
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PartyContact": {
      "type": "object",
      "properties": {
        "homeTel": {
          "type": "string",
          "example": "87654321",
          "description": "Home telephone"
        },
        "mobileTel": {
          "type": "string",
          "example": "15012345678",
          "description": "Phone number"
        },
        "officeTel": {
          "type": "string",
          "example": "88888888",
          "description": "Work phone"
        },
        "officeTelExt": {
          "type": "string",
          "example": "1234",
          "description": "Work phone extension"
        },
        "email": {
          "type": "string",
          "example": "TestPerson14@126.com",
          "description": "E-mail:"
        },
        "contact": {
          "type": "string",
          "example": "张三",
          "description": "Contact person"
        },
        "contactTel": {
          "type": "string",
          "example": "88888888",
          "description": "Contact Phone"
        },
        "fax": {
          "type": "string",
          "example": "88888887",
          "description": "Fax: (+86) {0}022 - 24143117{/0}"
        }
      }
    },
    "PolicyHolderInfo": {
      "type": "object",
      "properties": {
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type"
        },
        "policyCustomer": {
          "description": "Customer detail",
          "$ref": "#/definitions/PolicyCustomerInfo"
        },
        "relationToLA": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship between the insured and the insured, the number type<br>1 - own<br>2 - parent<br>3 - spouse<br>10 - child<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            7
          ]
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Person": {
      "type": "object",
      "properties": {
        "gender": {
          "type": "string",
          "example": "M",
          "description": "Sex<br>M - male<br>F - female",
          "enum": [
            "M",
            "F"
          ]
        },
        "birthdate": {
          "type": "string",
          "format": "date-time",
          "example": "1980-01-01",
          "description": "Birthday, non-empty, date format: yyyy-MM-dd"
        },
        "certiType": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "ID type, number type<br>1 - ID card<br>2 - military certificate<br>3 - passport<br>4 - birth certificate<br>9 - other",
          "enum": [
            1,
            2,
            3,
            4,
            9
          ]
        },
        "certiCode": {
          "type": "string",
          "example": "1234567890",
          "description": "ID Number"
        },
        "certiStart": {
          "type": "string",
          "format": "date-time",
          "example": "2000-01-01",
          "description": "Certificate start date, date format: yyyy-MM-dd"
        },
        "certiEnd": {
          "type": "string",
          "format": "date-time",
          "example": "2019-12-31",
          "description": "Valid date, date format: yyyy-MM-dd"
        },
        "firstName": {
          "type": "string",
          "example": "三",
          "description": "First name"
        },
        "midName": {
          "type": "string",
          "description": "Middle name of prospect"
        },
        "lastName": {
          "type": "string",
          "example": "张",
          "description": "Last name of prospect"
        },
        "nationality": {
          "type": "string",
          "example": "7",
          "description": "Nationality<br>7 - China"
        },
        "preferredLifeIndi": {
          "type": "string",
          "example": "0",
          "description": "Insurance risk classifications <br>0 - N/A<br>1 - Prefer plus<br>2 - Prefer<br>3 - Standard plus<br>4 - Standard<br>5 - Sub-prefer<br>6 - Sub-standard"
        },
        "smoking": {
          "type": "string",
          "example": "N",
          "description": "Whether smoking<br>Y - yes;<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        },
        "occupationCode": {
          "type": "string",
          "example": "1",
          "description": "Professional code"
        },
        "income": {
          "type": "integer",
          "format": "int64",
          "example": 200000,
          "description": "Annual income"
        },
        "marriageStatus": {
          "type": "string",
          "example": "1",
          "description": "Marital status<br>1 - married<br>2 - unmarried<br>3 - divorced<br>4 - widowed<br>5 - separated",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6"
          ]
        },
        "height": {
          "type": "number",
          "format": "double",
          "example": 175.3,
          "description": "Height e.g. 172cm"
        },
        "weight": {
          "type": "number",
          "format": "double",
          "example": 70.25,
          "description": "Weight (kg)"
        },
        "salutation": {
          "type": "string",
          "example": "1",
          "description": "Title<br>1 - Mr.<br>2 - Mrs.",
          "enum": [
            "1",
            "2"
          ]
        }
      }
    },
    "CoverageInsuredInfo": {
      "type": "object",
      "properties": {
        "insuredPartyId": {
          "type": "string",
          "description": "Insured internal ID"
        },
        "orderId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Insurance type of the insured person, the default is 1, if one plan applied by more than one insured (family policy or personal risk), the value is greater than 1"
        },
        "occupationClass": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Occupation level"
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "example": 25,
          "description": "Age"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RecurringTopupInfo": {
      "type": "object",
      "properties": {
        "investRates": {
          "type": "array",
          "description": "Investment rate list",
          "items": {
            "$ref": "#/definitions/RecurringTopupInvestRateInfo"
          }
        },
        "topupStartDate": {
          "type": "string",
          "format": "date-time",
          "description": "Top-up start date"
        },
        "topupAmount": {
          "type": "number",
          "format": "double",
          "example": 10000,
          "description": "Top-up amount"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    }
  },
  "paths": {
    "/claim/register": {
      "post": {
        "tags": [
          "Claim"
        ],
        "summary": "Claim case register",
        "description": "Register Claim Case",
        "operationId": "registerUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterRequest"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegisterResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/policies/alterations/inforce": {
      "post": {
        "tags": [
          "policy alteration"
        ],
        "summary": "Policy alterations",
        "description": "Policy alterations",
        "operationId": "inforceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "description": "Input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyAlterationInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyAlterationResultInfo"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/policies/alterations/quotations": {
      "post": {
        "tags": [
          "policy alteration",
          "quotation"
        ],
        "summary": "Quotations for policy alterations",
        "description": "Quotations for policy alterations",
        "operationId": "quote2UsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "description": "Input",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlterationQuotationInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AlterationQuotationResultInfo"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/policy/policies/{insurerCode}/search": {
      "post": {
        "tags": [
          "Policy"
        ],
        "summary": "Policy summary querying",
        "description": "Search policy by criteria",
        "operationId": "searchUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "insurerCode",
            "in": "path",
            "description": "Insurer code",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "criteria",
            "description": "Criteria",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PageablePolicyCriteria"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PolicySummaryInfo"
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/policy/policies/{insurerCode}/{policyNumber}": {
      "get": {
        "tags": [
          "Policy"
        ],
        "summary": "Policy detail getting",
        "description": "Get Policy by Policy No.",
        "operationId": "getUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "insurerCode",
            "in": "path",
            "description": "Insurer code",
            "required": true,
            "type": "string"
          },
          {
            "name": "policyNumber",
            "in": "path",
            "description": "Policy number",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyInfo"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  }
}