{
  "swagger": "2.0",
  "info": {
    "version": "0.9",
    "title": "eBaoCould LI OpenAPI",
    "description": "This document is the API specification for the eBaoCloud Life part. To practice and run the APIs in this document, you need to apply a eBaoCloud tenant accout(start from a sandbox account instead of produciton) first.<br>\nContact liliang.zhu@ebaotech.com for more information and trail using.\n\n# Built on\nFri Jul 21 2017 - 11:03:42 GMT+0200 (CEST)\n\n# Versioning\nAPI version| Date  |Comments\n--|---|--\n0.5  | 2017-06-13  | Init version\n0.6  | 2017-06-19  | Add new category and readme\n0.6.5 | 2017-06-29  | oauth2 document, chinese version document\n0.8  | 2017-07-07  | oauth2 lanuch\n\n# Authentication\n\n## Overview\n\neBaoCloud offers 3rd party applications the ability to issue authenticated requests on behalf of the eBaoCloud itself. Twitter’s implementation is based on the [Client Credentials Grant](http://tools.ietf.org/html/rfc6749#section-4.4) flow of the [oauth 2 specification](http://tools.ietf.org/html/rfc6749).\n\n## Auth Flow\n\nThe oauth2 / token authentication flow follows these 3 major steps:\n\n1. An application (backend) encodes its consumer key and secret (provided by eBaoCloud as an authorized vender) into a specially encoded set of credentials.\n2. An application (backend) makes a request to the POST oauth2 / token endpoint to exchange these credentials for a bearer token.\n3. When accessing the REST API, the application (the APP or website) uses the bearer token to authenticate.\n\n![Auth Flow](/assets/oauth.png)\n\n## Step by step\n\n* Send request to auth end point\n\n```js\nPOST: /cas/ebao/v1/json/tickets\nBody: {\"username\":\"name\", \"password\":\"pwd\"}\nResponse: {\"access_token\": \"xxxx\"}\n```\n\n* Send request with access_token in header\n\n```js\nPOST: /rest/products\nHeader: {\n  \"authorization\":\"Bearer\"+access_token,\n  \"x-ebao-tenant-id\": \"tenant-id\"\n}\n```\n\n## End Points\n\n| | Sandbox | Production |\n| :--- | :--- | :--- |\n| auth / take token | [https://sandbox.ebaocloud.com.cn/cas/ebao/v1/json/tickets](https://sandbox.ebaocloud.com.cn/cas/ebao/v1/json/tickets) | [https://ebaocloud.com.cn/cas/ebao/v1/json/tickets](https://ebaocloud.com.cn/cas/ebao/v1/json/tickets) |\n| APIs | [https://sandbox.gw.ebaocloud.com.cn/li/eBao/1/](https://sandbox.gw.ebaocloud.com.cn/li/eBao/1/) | [https://gw.ebaocloud.com.cn/li/eBao/1/](https://gw.ebaocloud.com.cn/li/eBao/1/)|\n\n\n## Sample\n\n#### Request auth from application\n\n```bash\ncurl --request POST \\\n  --url https://url/cas/ebao/v1/json/tickets \\\n  --header 'content-type: application/json' \\\n  --header 'x-ebao-tenant-id: tenant-id' \\\n  --data '{\\n \\n \"username\":\"site.admin\",\\n \"password\":\"adminPWD!\"\\n}'\n```\n\nNote:\n. the **x-ebao-tenant-id** is the unique id provided by eBaoCloud to identify the tenant.\n. the **username** and **password** are provided by eBaoCloud when you registered as an authorized vendor.\n\n\n#### Response from API GateWay\n\n* Success\n\n```js\n{\n\"access_token\" : \"TGT-233-e7Zuc5FlSAa0SShO3B1f2iugYzRQGQrSSoGwAi0VnWbnBNDwHg\"\n}\n```\n\n* Failed\n\n```js\n{\n\"access_token\" : null\n}\n```\n\n#### App call (Java code sample)\n\n```java\nHttpResponse<String> response = Unirest.post(url) // url：the UAT/product URL\n  .header(\"content-type\", \"application/json\") // application/json\n  .header(\"authorization\", \"Bearer \" + accessToken) // oauth2 access token：the accessToken\n  .header(\"x-ebao-tenant-id\", \"tenant-id\")\n  .body(body) // body: http body\n  .asString();\n```\n\n## Others\n\n### Tokens are passwords\n\nKeep in mind that the consumer key & secret, bearer token credentials, and the bearer token itself grant access to make requests on behalf of an application. These values should be considered as sensitive as passwords, and must not be shared or distributed to untrusted parties.\n\n### SSL required\n\nAll requests (both to obtain and use the tokens) **must use** HTTPS endpoints.\n"
  },
  "host": "api.ebaocloud.life",
  "basePath": "/rest",
  "schemes": [
    "http"
  ],
  "consumes": [],
  "produces": [],
  "tags": [
    {
      "name": "Product",
      "description": "Product related services, including product and pacakge information retrieve, pricing and illustration calculations."
    },
    {
      "name": "Proposal"
    }
  ],
  "definitions": {
    "ProductPkgProduct": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "double"
        },
        "baseAmount": {
          "type": "number",
          "format": "double"
        },
        "benefitLevel": {
          "type": "string"
        },
        "calcMethod": {
          "type": "string"
        },
        "entityId": {
          "type": "integer",
          "format": "int64"
        },
        "freeIndi": {
          "type": "string"
        },
        "listId": {
          "type": "integer",
          "format": "int64"
        },
        "maxAmount": {
          "type": "number",
          "format": "double"
        },
        "maxPremium": {
          "type": "number",
          "format": "double"
        },
        "minAmount": {
          "type": "number",
          "format": "double"
        },
        "minPremium": {
          "type": "number",
          "format": "double"
        },
        "optional": {
          "type": "string"
        },
        "packageId": {
          "type": "integer",
          "format": "int64"
        },
        "premium": {
          "type": "number",
          "format": "double"
        },
        "premiumProportion": {
          "type": "number",
          "format": "double"
        },
        "productId": {
          "type": "integer",
          "format": "int64"
        },
        "saProportion": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "SalesCategoryResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "listSalesCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductSalesCategory"
          }
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "result": {
          "type": "integer",
          "format": "int32"
        },
        "serviceReqTime": {
          "type": "string",
          "format": "date-time"
        },
        "serviceResTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Serializable": {
      "type": "object"
    },
    "Illustrations": {
      "type": "object",
      "properties": {
        "illustrationResultList": {
          "type": "array",
          "description": "Illustration results list",
          "items": {
            "$ref": "#/definitions/IllustrationResult"
          }
        }
      }
    },
    "AgeRange": {
      "type": "object",
      "properties": {
        "ageUnit": {
          "type": "string",
          "description": "Age unit, by defaut is year."
        },
        "benefitLevel": {
          "type": "string",
          "description": "Age range related factor: benefit level"
        },
        "chargePeriod": {
          "type": "string",
          "description": "Age range related factor: charge period"
        },
        "chargeType": {
          "type": "string",
          "description": "Age range related factor: charge type"
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: charge year"
        },
        "chargeYearMax": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: maximum charge year"
        },
        "coveragePeriod": {
          "type": "string",
          "description": "Age range related factor: coverage period"
        },
        "coverageYear": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: coverage year"
        },
        "coverageYearMax": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: maximum coverage year"
        },
        "endPeriod": {
          "type": "string",
          "description": "Age range related factor: annuity payment end period"
        },
        "endYear": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: annuity payment end year"
        },
        "endYearMax": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: maximum annuity payment end year"
        },
        "gender": {
          "type": "string",
          "description": "Age range related factor: gender"
        },
        "highSa": {
          "type": "number",
          "format": "double",
          "description": "Age range related factor: maximum SA"
        },
        "lowSa": {
          "type": "number",
          "format": "double",
          "description": "Age range related factor: minimum SA"
        },
        "maxAge": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum age allowed"
        },
        "minAge": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum age allowed"
        },
        "payEnsure": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: guaranteed annuity payment year"
        },
        "payMode": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: pay mode"
        },
        "payPeriod": {
          "type": "string",
          "description": "Age range related factor: annuity payment peroid"
        },
        "payYear": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: annuity payment year"
        },
        "payYearMax": {
          "type": "integer",
          "format": "int32",
          "description": "Age range related factor: maximum annuity payment year"
        },
        "productVersionId": {
          "type": "integer",
          "format": "int64",
          "description": "Age range related factor: product verion"
        }
      }
    },
    "MainInformation": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "integer",
          "format": "int32",
          "description": "Currency, non empty<br>1 - CNY"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "Product sales end date"
        },
        "familyType": {
          "type": "string",
          "description": "Family product type"
        },
        "mainPlan": {
          "type": "string",
          "description": "Whether it is the main plan"
        },
        "orgId": {
          "type": "integer",
          "format": "int64",
          "description": "The organization this product belongs to"
        },
        "productAbbreviation": {
          "type": "string",
          "description": "Product introduction"
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "productDescription": {
          "type": "string",
          "description": "Product description"
        },
        "productName": {
          "type": "string",
          "description": "Product Name"
        },
        "salesCategory": {
          "description": "Product sales category",
          "$ref": "#/definitions/ProductSalesCategory"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Product sales start date"
        }
      }
    },
    "CalculatePremSARequest": {
      "type": "object",
      "required": [
        "calculatePolicy"
      ],
      "properties": {
        "calculatePolicy": {
          "description": "保费保额计算数据",
          "$ref": "#/definitions/CalculatePolicy"
        },
        "clientRequestId": {
          "type": "string"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time"
        },
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        },
        "serviceReqTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CalculateInsured": {
      "type": "object",
      "required": [
        "gender",
        "orderId"
      ],
      "properties": {
        "age": {
          "type": "integer",
          "format": "int32",
          "example": 17,
          "description": "被保人投保日时的年龄，年龄生日必须输入一个，既有年龄又有生日，以生日为准重新计算年龄"
        },
        "birthdate": {
          "type": "string",
          "example": "1999-10-16",
          "description": "被保人生日，格式(YYYY-MM-DD)"
        },
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        },
        "gender": {
          "type": "string",
          "example": "M",
          "description": "被保人性别（M:男性<br>F:女性  ）",
          "enum": [
            "M",
            "F"
          ]
        },
        "jobCateId": {
          "type": "integer",
          "format": "int32",
          "example": 10001,
          "description": "职业类别，此项由保险公司提供列表，在某些跟职业有关的产品下，此项必输入"
        },
        "medicalIndi": {
          "type": "string",
          "example": "Y",
          "description": "Whether there is medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        },
        "orderId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "被保人顺序,在多个被保人时用来表示第一，第二被保人，在只有一个被保人情况下必须为1"
        },
        "smoking": {
          "type": "string",
          "example": "Y",
          "description": "是否抽烟(Y:抽烟<br>N:不抽烟)，如果没有输入，默认为不抽烟",
          "enum": [
            "Y",
            "N"
          ]
        },
        "socialSecurityIndi": {
          "type": "string",
          "example": "Y",
          "description": "Whether there is social medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        }
      }
    },
    "ValidationResult": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "ruleType": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PackageResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidationResult"
          }
        },
        "productPackageInfo": {
          "description": "Product package details",
          "$ref": "#/definitions/ProductPackageInfo"
        },
        "result": {
          "type": "integer",
          "format": "int32"
        },
        "serviceReqTime": {
          "type": "string",
          "format": "date-time"
        },
        "serviceResTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ProductPackageInfo": {
      "type": "object",
      "properties": {
        "baseAmount": {
          "type": "integer",
          "format": "int64",
          "description": "基本保额"
        },
        "description": {
          "type": "string",
          "description": "组合描述"
        },
        "entityId": {
          "type": "integer",
          "format": "int64"
        },
        "maxAge": {
          "type": "integer",
          "format": "int32",
          "description": "最大年龄"
        },
        "maxAgeUnit": {
          "type": "string",
          "description": "最大年龄单位"
        },
        "maxAmount": {
          "type": "integer",
          "format": "int64",
          "description": "最大保额"
        },
        "maxPhAge": {
          "type": "integer",
          "format": "int32",
          "description": "最大投保人年龄"
        },
        "maxPremium": {
          "type": "integer",
          "format": "int64",
          "description": "最大保费"
        },
        "minAge": {
          "type": "integer",
          "format": "int32",
          "description": "最小年龄"
        },
        "minAgeUnit": {
          "type": "string",
          "description": "最小年龄单位"
        },
        "minAmount": {
          "type": "integer",
          "format": "int64",
          "description": "最小保额"
        },
        "minPhAge": {
          "type": "integer",
          "format": "int32",
          "description": "最小投保人年龄"
        },
        "minPremium": {
          "type": "integer",
          "format": "int64",
          "description": "最小保费"
        },
        "moneyId": {
          "type": "integer",
          "format": "int64",
          "description": "组合名称"
        },
        "packageCode": {
          "type": "string",
          "description": "组合代码"
        },
        "packageId": {
          "type": "integer",
          "format": "int64",
          "description": "组合Id"
        },
        "packageName": {
          "type": "string",
          "description": "组合名称"
        },
        "pricingMethod": {
          "type": "string",
          "description": "保费保额计算方法<br>0 - 保费保额由用户输入<br>1 - 产品按单位售卖<br>2 - 根据保额算保费，但是也允许协议保费<br>3 - 产品根据计划或单位售卖<br>4 - 产品只允许按计划售卖<br>5 - 根据保费算保额，但是也允许协议保费<br>6 - 只允许保额算保费但是也允许协议保费<br>7 - 只允许保费算保额<br>8 - 保费算保额或保额算保费"
        },
        "productPkgProductMatrixs": {
          "type": "array",
          "description": "基本产品组合关系",
          "items": {
            "$ref": "#/definitions/ProductPkgProductMatrix"
          }
        },
        "productPkgProducts": {
          "type": "array",
          "description": "基本产品",
          "items": {
            "$ref": "#/definitions/ProductPkgProduct"
          }
        },
        "productPkgTerms": {
          "type": "array",
          "description": "基本期限限制",
          "items": {
            "$ref": "#/definitions/ProductPackageTerm"
          }
        },
        "specialClause": {
          "type": "string",
          "description": "组合特殊条款"
        },
        "unitAmount": {
          "type": "integer",
          "format": "int64",
          "description": "单位保额"
        },
        "unitPremium": {
          "type": "integer",
          "format": "int64",
          "description": "单位保费"
        }
      }
    },
    "ProductPackageTerm": {
      "type": "object",
      "properties": {
        "chargePeriod": {
          "type": "string"
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32"
        },
        "coveragePeriod": {
          "type": "string"
        },
        "coverageYear": {
          "type": "integer",
          "format": "int32"
        },
        "entityId": {
          "type": "integer",
          "format": "int64"
        },
        "listId": {
          "type": "integer",
          "format": "int64"
        },
        "packageId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "LiabilityInformation": {
      "type": "object",
      "properties": {
        "categoryId": {
          "type": "integer",
          "format": "int64",
          "description": "Liability category Id"
        },
        "categoryName": {
          "type": "string",
          "description": "Liability category name"
        },
        "liabilityId": {
          "type": "integer",
          "format": "int64",
          "description": "Liability Id"
        },
        "liabilityName": {
          "type": "string",
          "description": "Liability name"
        }
      }
    },
    "CalculatePremium": {
      "type": "object",
      "required": [
        "paymentFreq"
      ],
      "properties": {
        "benefitLevel": {
          "type": "string",
          "example": "1",
          "description": "档次，此项只对按档次售卖的产品有意义"
        },
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        },
        "paymentFreq": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Pay frequency<br>1 - yearly payment<br>2 - half yearly payment<br>3 - quarterly payment<br>4 - monthly payment<br>5 - single premium",
          "enum": [
            1,
            2,
            3,
            4,
            5
          ]
        },
        "premium": {
          "type": "number",
          "format": "double",
          "example": 2000,
          "description": "保费，输入此项为根据保费算保额"
        },
        "sumAssured": {
          "type": "number",
          "format": "double",
          "example": 1000000,
          "description": "保额，输入此项为根据保额算保费"
        },
        "unit": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "购买单位，此项只对按单位售卖的产品有意义"
        }
      }
    },
    "ProductLiability": {
      "type": "object",
      "properties": {
        "annuity": {
          "type": "boolean",
          "example": false,
          "description": "Is it annuity product"
        },
        "liabilities": {
          "type": "array",
          "description": "Product liability list",
          "items": {
            "$ref": "#/definitions/LiabilityInformation"
          }
        },
        "survivalBenefitOptions": {
          "type": "array",
          "description": "Allowed Survival Benefit Option<br>1 - Get it now<br>2 - Pay with premium for payment<br>3 - There is an insurance company account",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProductRelationship": {
      "type": "object",
      "properties": {
        "attachCompulsory": {
          "type": "string",
          "description": "Whether to force attach to main plan"
        },
        "attachType": {
          "type": "string",
          "description": "Additional type 1 - only allowed once again 2 - allowed to attach multiple times"
        },
        "masterProductCode": {
          "type": "string",
          "description": "Main product code"
        },
        "masterProductId": {
          "type": "integer",
          "format": "int64",
          "description": "The main product Id"
        },
        "maxAthAge": {
          "type": "integer",
          "format": "int32",
          "description": "Allow the maximum age of additional"
        },
        "maxAthMastAge": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum age of attached"
        },
        "maxAttachSa2MainSaRate": {
          "type": "number",
          "format": "double",
          "description": "The maximum proportion of SA of attached product to SA of master product"
        },
        "maxAttachedSa": {
          "type": "number",
          "format": "double",
          "description": "The maximum SA of the attached product"
        },
        "maxTotalSa2MainSaRate": {
          "type": "number",
          "format": "double",
          "description": "The maximum proportion of SA of policy to SA of master product"
        },
        "minAthAge": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum age of attaching"
        },
        "minAthMastAge": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum age of attached"
        },
        "minAttachSa2MainSaRate": {
          "type": "number",
          "format": "double",
          "description": "The minimum proportion of SA of attached product to SA of master product"
        },
        "minMastSaAmount": {
          "type": "number",
          "format": "double",
          "description": "The minimum SA of master product"
        },
        "riderProductCode": {
          "type": "string",
          "description": "Rider product code"
        },
        "riderProductId": {
          "type": "integer",
          "format": "int64",
          "description": "Rider products Id"
        },
        "saNoEqual": {
          "type": "string",
          "description": "Whether the rider‘s SA can be equal to the main plan's"
        },
        "totalOverRate": {
          "type": "number",
          "format": "double",
          "description": "The maximum total SA over SA of attached plan rate"
        }
      }
    },
    "CalculatePolicy": {
      "type": "object",
      "required": [
        "coverages"
      ],
      "properties": {
        "coverages": {
          "type": "array",
          "description": "保障列表",
          "items": {
            "$ref": "#/definitions/CalculateCoverage"
          }
        },
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        },
        "inceptionDate": {
          "type": "string",
          "example": "2017-01-01",
          "description": "保单生效日，字符串类型，格式(\"YYYY-MM-DD\")"
        }
      }
    },
    "GenericValidationResult": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "ruleType": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ProductTerm": {
      "type": "object",
      "properties": {
        "annuityEndPayTerm": {
          "type": "array",
          "description": "Annuity end payment term",
          "items": {
            "$ref": "#/definitions/TermLimit"
          }
        },
        "annuityPayEnsureTerm": {
          "type": "array",
          "description": "Annuity payment ensure term",
          "items": {
            "$ref": "#/definitions/TermLimit"
          }
        },
        "annuityStartPayTerm": {
          "type": "array",
          "description": "The annuity start pay term",
          "items": {
            "$ref": "#/definitions/TermLimit"
          }
        },
        "coverageTerm": {
          "type": "array",
          "description": "Coverage term",
          "items": {
            "$ref": "#/definitions/TermLimit"
          }
        },
        "premiumTerm": {
          "type": "array",
          "description": "Payment term",
          "items": {
            "$ref": "#/definitions/TermLimit"
          }
        }
      }
    },
    "ProductSumAssured": {
      "type": "object",
      "properties": {
        "saLimit": {
          "type": "array",
          "description": "Product sum assured limit",
          "items": {
            "$ref": "#/definitions/SaLimit"
          }
        }
      }
    },
    "IllustrationRequest": {
      "type": "object",
      "required": [
        "calculatePolicy"
      ],
      "properties": {
        "calculatePolicy": {
          "description": "利益展示保单计算数据",
          "$ref": "#/definitions/CalculatePolicy"
        },
        "clientRequestId": {
          "type": "string"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time"
        },
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        },
        "serviceReqTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "IllustrationResult": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "Age"
        },
        "amount": {
          "type": "number",
          "format": "double",
          "description": "Amount"
        },
        "calcType": {
          "type": "integer",
          "format": "int32",
          "description": "Calculation type"
        },
        "coverageId": {
          "type": "integer",
          "format": "int64",
          "description": "Coverage ID"
        },
        "fundCode": {
          "type": "string",
          "description": "Fund code"
        },
        "name": {
          "type": "string",
          "description": "name"
        },
        "orderSeq": {
          "type": "integer",
          "format": "int32",
          "description": "Sequence"
        },
        "performanceType": {
          "type": "integer",
          "format": "int32",
          "description": "Illustration type"
        },
        "policyMonth": {
          "type": "integer",
          "format": "int32",
          "description": "Policy month"
        },
        "policyYear": {
          "type": "integer",
          "format": "int32",
          "description": "Policy year"
        }
      }
    },
    "GenericVO": {
      "type": "object",
      "properties": {
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        }
      }
    },
    "ProductInfo": {
      "type": "object",
      "properties": {
        "attachedRiders": {
          "type": "array",
          "description": "The relationship of main plan and rider",
          "items": {
            "$ref": "#/definitions/ProductRelationship"
          }
        },
        "benefitType": {
          "type": "string",
          "description": "Product benefit category<br>22 Reimbursement medical insurance<br>23 subsidised medical insurance<br>31 accident insurance<br>11 endowment insurance<br>12 annuities insurance<br>13 life insurance<br>14 term insurance<br>41 investment insurance<br>15 mortgage insurance<br>16 long-term care<br>17 critical illness"
        },
        "bonus": {
          "description": "Bonus information",
          "$ref": "#/definitions/Bonus"
        },
        "liability": {
          "description": "Product liability",
          "$ref": "#/definitions/ProductLiability"
        },
        "maininfo": {
          "description": "Product main information",
          "$ref": "#/definitions/MainInformation"
        },
        "premSaCalc": {
          "description": "Product premium calculation related information",
          "$ref": "#/definitions/PremiumSaCalculation"
        },
        "productAge": {
          "description": "Product age limit",
          "$ref": "#/definitions/ProductAge"
        },
        "productId": {
          "type": "integer",
          "format": "int64",
          "description": "Product Id"
        },
        "productSumAssured": {
          "description": "Product sum assured limit",
          "$ref": "#/definitions/ProductSumAssured"
        },
        "productTerm": {
          "description": "Product age limit",
          "$ref": "#/definitions/ProductTerm"
        }
      }
    },
    "ProductBasicInformation": {
      "type": "object",
      "properties": {
        "benefitType": {
          "type": "string",
          "description": "Product benefit category<br>22 Reimbursement medical insurance<br>23 subsidised medical insurance<br>31 accident insurance<br>11 endowment insurance<br>12 annuities insurance<br>13 life insurance<br>14 term insurance<br>41 investment insurance<br>15 mortgage insurance<br>16 long-term care<br>17 critical illness"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "Product end sale date"
        },
        "isMainProduct": {
          "type": "string",
          "description": "Whether it is the main plan"
        },
        "minSAOrUnit": {
          "type": "integer",
          "format": "int64",
          "description": "Minimum SA or Unit"
        },
        "productAbbr": {
          "type": "string",
          "description": "Product introduction"
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "productDescription": {
          "type": "string",
          "description": "Product description"
        },
        "productId": {
          "type": "integer",
          "format": "int64",
          "description": "Product Id"
        },
        "productName": {
          "type": "string",
          "description": "Product name"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Product start sales date"
        }
      }
    },
    "SaLimit": {
      "type": "object",
      "properties": {
        "highAgeMonth": {
          "type": "integer",
          "format": "int32",
          "description": "The max age allowed of the insured"
        },
        "jobCate": {
          "type": "integer",
          "format": "int32",
          "description": "Job category"
        },
        "limitUnit": {
          "type": "string",
          "description": "Insured or unit limit<br>1 - insured amount<br>2 - unit"
        },
        "lowAgeMonth": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum age allowed of the insured"
        },
        "maxAmount": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum amount, the amount of SA, or the unit"
        },
        "minAmount": {
          "type": "integer",
          "format": "int64",
          "description": "The minimum amount, the amount of SA, or the unit"
        },
        "moneyId": {
          "type": "integer",
          "format": "int32",
          "description": "Currency"
        },
        "payMode": {
          "type": "integer",
          "format": "int32",
          "description": "Payment method"
        }
      }
    },
    "BasicProductPackageInfo": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Product package description"
        },
        "moneyId": {
          "type": "integer",
          "format": "int64",
          "description": "Product package of currency"
        },
        "packageCode": {
          "type": "string",
          "description": "Product package code"
        },
        "packageId": {
          "type": "integer",
          "format": "int64",
          "description": "Product package Id"
        },
        "packageName": {
          "type": "string",
          "description": "Product package name"
        }
      }
    },
    "Bonus": {
      "type": "object",
      "properties": {
        "cashBonus": {
          "type": "boolean",
          "example": false,
          "description": "Whether there is a cash bonus"
        },
        "cashBonusOptions": {
          "type": "array",
          "description": "Allowed cash bonus option<br>1 - Get it now<br>2 - Pay with cash bonus premium<br>3 - There is an insurance company account",
          "items": {
            "type": "string"
          }
        },
        "cashBonusUnitAmount": {
          "type": "number",
          "format": "double",
          "description": "Cash bonus unit"
        },
        "cashBonusVestYear": {
          "type": "integer",
          "format": "int32",
          "description": "Cash bonus must stay in the insurance company after years of investment before they can receive"
        }
      }
    },
    "CalculatePremSAResponse": {
      "type": "object",
      "properties": {
        "calculatePolicyResult": {
          "description": "Calculation result",
          "$ref": "#/definitions/CalculatePolicyResult"
        },
        "clientRequestId": {
          "type": "string"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "result": {
          "type": "integer",
          "format": "int32"
        },
        "serviceReqTime": {
          "type": "string",
          "format": "date-time"
        },
        "serviceResTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CalculatePolicyResult": {
      "type": "object",
      "properties": {
        "calculateCoverageResults": {
          "type": "array",
          "description": "The detailed calculation of the results of the",
          "items": {
            "$ref": "#/definitions/CalculateCoverageResult"
          }
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "inception date"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Install premium"
        }
      }
    },
    "PackagesResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "listBasicProductPackageInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BasicProductPackageInfo"
          }
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidationResult"
          }
        },
        "result": {
          "type": "integer",
          "format": "int32"
        },
        "serviceReqTime": {
          "type": "string",
          "format": "date-time"
        },
        "serviceResTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ProductPkgProductMatrix": {
      "type": "object",
      "properties": {
        "attachId": {
          "type": "integer",
          "format": "int64",
          "description": "Waiver product id"
        },
        "attachMode": {
          "type": "string",
          "description": "附加方式<br>1 - 共存关系<br>2 - 依赖关系<br>3 - 互斥关系"
        },
        "entityId": {
          "type": "integer",
          "format": "int64"
        },
        "listId": {
          "type": "integer",
          "format": "int64",
          "description": "序列号"
        },
        "masterId": {
          "type": "integer",
          "format": "int64",
          "description": "主险Id"
        },
        "packageId": {
          "type": "integer",
          "format": "int64",
          "description": "组合Id"
        }
      }
    },
    "Annuity": {
      "type": "object",
      "properties": {
        "annuity_End_Period": {
          "type": "string",
          "description": "年金结束支付时期类型<br>1 - 几年<br>2 - 到多少岁<br>3 - 终身"
        },
        "annuity_End_Year": {
          "type": "integer",
          "format": "int64",
          "description": "年或年龄"
        },
        "annuity_Start_Period": {
          "type": "string",
          "description": "年金开始支付时期类型<br>1 - 立刻<br>2 - 从保单周年日年龄开始给付<br>3 - 几年之后开始给付<br>4 - 生日年龄那天开始给付"
        },
        "annuity_Start_Year": {
          "type": "integer",
          "format": "int64",
          "description": "年或年龄"
        },
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        }
      }
    },
    "ProductSalesCategory": {
      "type": "object",
      "properties": {
        "categoryCode": {
          "type": "string",
          "description": "产品销售大类代码"
        },
        "categoryId": {
          "type": "integer",
          "format": "int32",
          "description": "产品销售大类Id"
        },
        "categoryName": {
          "type": "string",
          "description": "产品销售大类名称"
        },
        "description": {
          "type": "string",
          "description": "产品销售大类描述"
        },
        "displayOrder": {
          "type": "integer",
          "format": "int32",
          "description": "显示顺序"
        },
        "entityIdName": {
          "type": "string"
        },
        "identifier": {
          "$ref": "#/definitions/Serializable"
        },
        "parentCateId": {
          "type": "string",
          "description": "产品销售大类父类别Id"
        }
      }
    },
    "PremiumSaCalculation": {
      "type": "object",
      "properties": {
        "ageBase": {
          "type": "string",
          "description": "Age calculation method<br>1 - according to the age of insurance<br>2 - according to the year of the annual anniversary of the policy"
        },
        "premiumFrequency": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unitFlag": {
          "type": "string",
          "description": "Premiums calculation method<br>0 - premium/SA by the user input<br>1 - products sold by the unit<br>2 - calculate premiums base on sum assured, but also allows the agreement premium<br>3 - products sold under the plan or unit<br>4 - products are only allowed to sell according to plan<br>5 - according to the premium , But also allow the agreement premium<br>6 - only to allow the sum assured to premium but also allow the agreement premium<br>7 - only allow premiums to sum assured<br>8 - both sum assured to premium or sum assured to premium"
        },
        "waiver": {
          "type": "boolean",
          "example": false,
          "description": "Whether it is an exemption"
        }
      }
    },
    "ProductResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "productInfo": {
          "description": "Product details",
          "$ref": "#/definitions/ProductInfo"
        },
        "result": {
          "type": "integer",
          "format": "int32"
        },
        "serviceReqTime": {
          "type": "string",
          "format": "date-time"
        },
        "serviceResTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CalculateCoverage": {
      "type": "object",
      "required": [
        "calculatePremium",
        "coverageId",
        "coveragePeriod",
        "insureds",
        "productCode"
      ],
      "properties": {
        "annuity": {
          "description": "年金信息",
          "$ref": "#/definitions/Annuity"
        },
        "calculatePremium": {
          "description": "保费计算相关因子",
          "$ref": "#/definitions/CalculatePremium"
        },
        "chargePeriod": {
          "type": "string",
          "example": "2",
          "description": "Charge period type<br>1 - Single payment<br>2 - pay next few years<br>3 - pay till a certain age<br>4 - pay for whole life<br>If the product supports payment peroid, this field is compulsory",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "缴费时长（缴费期限类型为 1的情况下，此字段无意义；<br> 缴费期限类型为2的情况下，此字段为几年;<br>缴费期限类型为3的情况下，此字段为某一年龄;<br>缴费期限类型为 4的情况下，此字段无意义）"
        },
        "coverageId": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "definitions.CalculateCoverage.properties.coverageId.description"
        },
        "coveragePeriod": {
          "type": "string",
          "example": "2",
          "description": "保障期限类型<br>1 - 保终身<br>2 - 保几年<br>3 - 保至某年龄<br>4 - 保几个月<br>在产品允许多种保障期限类型情况下,此项必填",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "coverageYear": {
          "type": "integer",
          "format": "int32",
          "example": 20,
          "description": "保障时长（保障期限类型为 1的情况下，此字段无意义；<br> 保障期限类型为2的情况下，此字段为几年;<br>保障期限类型为3的情况下，此字段为某一年龄;<br>缴费期限类型为 4的情况下，此字段为几个月）"
        },
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        },
        "insureds": {
          "type": "array",
          "description": "保费计算被保人相关信息",
          "items": {
            "$ref": "#/definitions/CalculateInsured"
          }
        },
        "masterCoverageId": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "保障编号，如果是主保障此项为空，如果是附加保障，此项为主保障的coverageId"
        },
        "productCode": {
          "type": "string",
          "example": "0170",
          "description": "definitions.CalculateCoverage.properties.productCode.description"
        },
        "waivedSa": {
          "type": "number",
          "format": "double",
          "example": 100000,
          "description": "被豁免的保额，此项只对豁免险有意义"
        }
      }
    },
    "CalculateCoverageResult": {
      "type": "object",
      "properties": {
        "coverageId": {
          "type": "integer",
          "format": "int64",
          "description": "传入的保障代码"
        },
        "productCode": {
          "type": "string",
          "description": "计算的产品代码"
        },
        "sumAssured": {
          "type": "number",
          "format": "double",
          "description": "Sum assured"
        },
        "totalPremAf": {
          "type": "number",
          "format": "double",
          "description": "Total premium"
        },
        "unit": {
          "type": "integer",
          "format": "int32",
          "description": "Total unit"
        }
      }
    },
    "TermLimit": {
      "type": "object",
      "properties": {
        "periodType": {
          "type": "string",
          "description": "Period type<br>1 - Single payment<br>2 - pay next few years<br>3 - pay till a certain age<br>4 - pay for whole life"
        },
        "periodValueMax": {
          "type": "integer",
          "format": "int32",
          "description": "Allow maximum deadline"
        },
        "periodValueMin": {
          "type": "integer",
          "format": "int32",
          "description": "Allow minimum term"
        }
      }
    },
    "ProductAge": {
      "type": "object",
      "properties": {
        "insuredAge": {
          "type": "array",
          "description": "The age limit of the insured person",
          "items": {
            "$ref": "#/definitions/AgeRange"
          }
        },
        "policyHolderAge": {
          "type": "array",
          "description": "The age limit of the insured",
          "items": {
            "$ref": "#/definitions/AgeRange"
          }
        }
      }
    },
    "ProductsResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "listProductBasicInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductBasicInformation"
          }
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "result": {
          "type": "integer",
          "format": "int32"
        },
        "serviceReqTime": {
          "type": "string",
          "format": "date-time"
        },
        "serviceResTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "IllustrationResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "illustrations": {
          "description": "Illustration results",
          "$ref": "#/definitions/Illustrations"
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "result": {
          "type": "integer",
          "format": "int32"
        },
        "serviceReqTime": {
          "type": "string",
          "format": "date-time"
        },
        "serviceResTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Policy": {
      "type": "object",
      "properties": {
        "applyDate": {
          "type": "string",
          "format": "date-time",
          "description": "Application date, non-empty, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "beneficiaries": {
          "type": "array",
          "description": "List of beneficiaries",
          "items": {
            "$ref": "#/definitions/Beneficiary"
          }
        },
        "brokerCode": {
          "type": "string",
          "example": "ebao",
          "description": "Broker code"
        },
        "contractorCode": {
          "type": "string",
          "example": "ebao",
          "description": "Contractor code"
        },
        "coverages": {
          "type": "array",
          "description": "Insured list",
          "items": {
            "$ref": "#/definitions/Coverage"
          }
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Currency, non empty<br>1 - CNY",
          "enum": [
            1
          ]
        },
        "customers": {
          "type": "array",
          "description": "Policy customer list",
          "items": {
            "$ref": "#/definitions/PolicyCustomer"
          }
        },
        "declarations": {
          "type": "array",
          "description": "Customer declaration list",
          "items": {
            "$ref": "#/definitions/CustomerDeclaration"
          }
        },
        "deliverType": {
          "type": "string",
          "example": "M",
          "description": "Policy delivery method<br>H - by people<br>M - by mail",
          "enum": [
            "H",
            "M"
          ]
        },
        "ePolicyDownloadUrl": {
          "type": "string",
          "description": "Electronic policy download address"
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Termination date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy effective date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Policy premium",
          "readOnly": true
        },
        "insureds": {
          "type": "array",
          "description": "Policy issured list",
          "items": {
            "$ref": "#/definitions/Insured"
          }
        },
        "insurerCode": {
          "type": "string",
          "description": "Insurance company code"
        },
        "issueDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy issue date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "payerAccounts": {
          "type": "array",
          "description": "Payment method list",
          "items": {
            "$ref": "#/definitions/PayerAccount"
          }
        },
        "payers": {
          "type": "array",
          "description": "Payer list",
          "items": {
            "$ref": "#/definitions/Payer"
          }
        },
        "policyHolder": {
          "description": "Policy holder",
          "$ref": "#/definitions/PolicyHolder"
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        },
        "policyNumber": {
          "type": "string",
          "description": "Policy number"
        },
        "policyPackage": {
          "description": "Product package",
          "$ref": "#/definitions/PolicyPackage"
        },
        "preprintedProposalNumber": {
          "type": "string",
          "description": "Pre-printed proposal number"
        },
        "proposalNumber": {
          "type": "string",
          "description": "Proposal number"
        },
        "quotationCode": {
          "type": "string",
          "description": "Quotation calculation request number"
        },
        "riskStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Policy status<br>0 - not inforce<br>1 - inforce<br>2 - lapsed<br>3 - terminated",
          "readOnly": true
        },
        "salesChannelCode": {
          "type": "string",
          "description": "Sales channel code"
        },
        "serviceAgentCode": {
          "type": "string",
          "description": "Policy agent code"
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of submission, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "tenantCode": {
          "type": "string",
          "example": "GUEST",
          "description": "Tenant code"
        },
        "trustees": {
          "type": "array",
          "description": "List of trustees",
          "items": {
            "$ref": "#/definitions/Trustee"
          }
        }
      }
    },
    "PolicyPackage": {
      "type": "object",
      "properties": {
        "packageCode": {
          "type": "string",
          "description": "Product package code"
        },
        "packageId": {
          "type": "integer",
          "format": "int64",
          "description": "Product package of internal serial number",
          "readOnly": true
        },
        "unit": {
          "type": "number",
          "format": "double",
          "description": "Product package unit, the default is 1"
        }
      }
    },
    "QuotationResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "messages": {
          "type": "array",
          "description": "Business failure reason description list node",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "policy": {
          "description": "Policy",
          "$ref": "#/definitions/QuotationPolicyResult"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string",
          "example": "上海市",
          "description": "Province"
        },
        "address2": {
          "type": "string",
          "example": "上海市",
          "description": "City"
        },
        "address3": {
          "type": "string",
          "example": "杨浦区",
          "description": "District"
        },
        "address4": {
          "type": "string",
          "example": "淞沪路270号创智天地3号楼3楼",
          "description": "Address"
        },
        "addressId": {
          "type": "string",
          "description": "Address internal serial number, UUID type",
          "readOnly": true
        },
        "postCode": {
          "type": "string",
          "example": "200433",
          "description": "Post code"
        }
      }
    },
    "CoverageInsuredInput": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer",
          "format": "int32",
          "example": 25,
          "description": "Age"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "occupationClass": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Occupation level"
        },
        "orderId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Insurance type of the insured person, the default is 1, if one plan applied by more than one insured (family policy or personal risk), the value is greater than 1"
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Insured customer temporary number, request within the use of a unique identification request within a party"
        }
      }
    },
    "AddressInput": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string",
          "example": "上海市",
          "description": "Province"
        },
        "address2": {
          "type": "string",
          "example": "上海市",
          "description": "City"
        },
        "address3": {
          "type": "string",
          "example": "杨浦区",
          "description": "District"
        },
        "address4": {
          "type": "string",
          "example": "淞沪路270号创智天地3号楼3楼",
          "description": "Address"
        },
        "postCode": {
          "type": "string",
          "example": "200433",
          "description": "Post code"
        }
      }
    },
    "InsuredInput": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "medicalIndi": {
          "type": "string",
          "example": "Y",
          "description": "Whether there is medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Customer temporary number, internal usage. Unique identify the customer for one request"
        },
        "relationToPH": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship between the insured and the insured, integer type<br>1 - self<br>2 - child<br>3 - spouse<br>10 - parent<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            7
          ]
        },
        "socialSecurityIndi": {
          "type": "string",
          "example": "Y",
          "description": "Whether there is social medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        }
      }
    },
    "PayerAccount": {
      "type": "object",
      "properties": {
        "bankAccount": {
          "description": "The first premium bank account",
          "$ref": "#/definitions/BankAccount"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "Policy customer internal serial number, UUID type",
          "readOnly": true
        },
        "nextBankAccount": {
          "description": "Renewal premium bank account",
          "$ref": "#/definitions/BankAccount"
        },
        "paymentMethod": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "First time payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card",
          "enum": [
            1,
            2,
            3,
            30
          ]
        },
        "paymentMethodNext": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "Renewal payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card",
          "enum": [
            1,
            2,
            3,
            30
          ]
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "PayPlanInput": {
      "type": "object",
      "properties": {
        "endPeriod": {
          "type": "string",
          "example": "3",
          "description": "Year to receive the type of annuity, the type of annuity / variable annuity / GMWB should not be empty<br>1 to receive a fixed number of years<br>2 to receive till a certain age<br>3 - receive whole life",
          "enum": [
            "1",
            "2",
            "3"
          ]
        },
        "endYear": {
          "type": "integer",
          "format": "int32",
          "description": "The number of payment years"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "gurntPeriod": {
          "type": "integer",
          "format": "int32",
          "description": "Annuity guarantee period (years or age)"
        },
        "payOption": {
          "type": "string",
          "example": "1",
          "description": "The annuity receive payment options<br>1 - to receive payment by cash<br>2 - to pay premium<br>3 - accumulated interest<br>4 - accumulated interest x years after the transfer to pay premium<br>5 - to buy an additional payment of rider",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "payOptionTerm": {
          "type": "integer",
          "format": "int32",
          "description": "Years, only when payOption is 4, this field has value, for others are empty"
        },
        "payPeriod": {
          "type": "string",
          "example": "3",
          "description": "The annuity begins to receive the type of period<br>1 - is immediately received<br>2 - till a certain age to receive<br>3 - years after the collection<br>4 - after a certain age to receive",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "payYear": {
          "type": "integer",
          "format": "int32",
          "description": "The annuity begins to receive the period (years or age)"
        },
        "planFreq": {
          "type": "string",
          "example": "1",
          "description": "To receive frequency<br>1 - yearly<br>2 - half yearly<br>3 - quarterly <br>4 - monthly<br>5 - single",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "planType": {
          "type": "string",
          "example": "1",
          "description": "Payment plan type: 1 - cash payment<br>2 - annuity<br>3 - survival benefit<br>4 - maturity  5 - GMWB (guaranteed minimum benefit)<br>6 - variable annuity<br>7 - partial surrender<br>8 - SA dividends",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8"
          ]
        }
      }
    },
    "CoverageInput": {
      "type": "object",
      "properties": {
        "chargePeriod": {
          "type": "string",
          "example": "2",
          "description": "Payment period type, non-empty<br>1 - single<br>2 - per year<br>3 to a certain age<br>4 - whole life",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "example": 20,
          "description": "Payment period, non-empty<br>0 - single;<br>by age: till which age or to pay the payment period: the pay years;<br>whole life is 100"
        },
        "coverageAgents": {
          "type": "array",
          "description": "List of performance sharing of agent",
          "items": {
            "$ref": "#/definitions/CoverageAgentInput"
          }
        },
        "coveragePeriod": {
          "type": "string",
          "example": "1",
          "description": "Coverage type<br>1 - whole life<br>2 - per year<br>3 - Cover to a certain age<br>4 - per month<br>5 - per day",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "coverageSeriaId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Plan internal serial number, the request within the use of a unique identification within a certain kind of insurance"
        },
        "coverageYear": {
          "type": "integer",
          "format": "int32",
          "description": "Coverage Term. Meaning of this property is associated with property \"coveragePeriod\" (\"type\" for short). when covers whole life, value of this property is 9999;<br>and if type is 2, means years covered;<br>and if type is 3, means age when coverage expired;<br>and if type is 4, means months covered;<br>and if type is 5, means days covered."
        },
        "currentPremium": {
          "description": "The current period premium",
          "$ref": "#/definitions/CoveragePremium"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "insureds": {
          "type": "array",
          "description": "List of insured",
          "items": {
            "$ref": "#/definitions/CoverageInsuredInput"
          }
        },
        "masterCoverageSerialId": {
          "type": "integer",
          "format": "int32",
          "description": "Temporary main plan serial number, the current insurance for the main plan is empty, for the rider to be filled into the main insurance of the serial number"
        },
        "payPlans": {
          "type": "array",
          "description": "Payment plan list",
          "items": {
            "$ref": "#/definitions/PayPlanInput"
          }
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "waiverExt": {
          "description": "Waiver plan information",
          "$ref": "#/definitions/CoverageExtWaiverInput"
        }
      }
    },
    "PolicyCustomerInput": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Customer address",
          "$ref": "#/definitions/AddressInput"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "organization": {
          "description": "Organization customer information",
          "$ref": "#/definitions/Organization"
        },
        "partyContact": {
          "description": "Party contact information",
          "$ref": "#/definitions/PartyContact"
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Customer temporary number, internal usage. Unique identify the customer for one request"
        },
        "partyType": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The type of the party<br>1 - the personal party<br>2 - organization",
          "enum": [
            1,
            2
          ]
        },
        "person": {
          "description": "Personal customer information",
          "$ref": "#/definitions/Person"
        }
      }
    },
    "PayPlan": {
      "type": "object",
      "properties": {
        "coverageId": {
          "type": "string",
          "description": "Insurance model serial number, UUID type",
          "readOnly": true
        },
        "endPeriod": {
          "type": "string",
          "example": "3",
          "description": "Year to receive the type of annuity, the type of annuity / variable annuity / GMWB should not be empty, 1 to receive a fixed number of years;<br>2 to receive till a certain age<br>3 - receive whole life",
          "enum": [
            "1",
            "2",
            "3"
          ]
        },
        "endYear": {
          "type": "integer",
          "format": "int32",
          "description": "The number of payment years"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "gurntPeriod": {
          "type": "integer",
          "format": "int32",
          "description": "Annuity guarantee period (years or age)"
        },
        "payOption": {
          "type": "string",
          "example": "1",
          "description": "The annuity receive payment options: 1 - to receive payment by cash<br>2 - to pay premium<br>3 - accumulated interest<br>4 - accumulated interest x years after the transfer to pay premium<br>5 - to buy an additional payment of rider",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "payOptionTerm": {
          "type": "integer",
          "format": "int32",
          "description": "Years, only when payOption is 4, this field has value, for others are empty"
        },
        "payPeriod": {
          "type": "string",
          "example": "3",
          "description": "The annuity begins to receive the type of period<br>1 - is immediately received<br>2 - till a certain age to receive<br>3 - years after the collection<br>4 - after a certain age to receive",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "payYear": {
          "type": "integer",
          "format": "int32",
          "description": "The annuity begins to receive the period (years or age)"
        },
        "planFreq": {
          "type": "string",
          "example": "1",
          "description": "To receive frequency<br>1 - yearly<br>2 - half yearly<br>3 - quarterly <br>4 - monthly<br>5 - single",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "planId": {
          "type": "string",
          "description": "Payment plan internal serial number, UUID type",
          "readOnly": true
        },
        "planType": {
          "type": "string",
          "example": "1",
          "description": "Payment plan type: 1 - cash payment<br>2 - annuity<br>3 - survival benefit<br>4 - maturity  5 - GMWB (guaranteed minimum benefit)<br>6 - variable annuity<br>7 - partial surrender<br>8 - SA dividends",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8"
          ]
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "CustomerDeclaration": {
      "type": "object",
      "properties": {
        "declarationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Declaration date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "details": {
          "type": "array",
          "description": "Declaration details",
          "items": {
            "$ref": "#/definitions/CustomerDeclarationDetail"
          }
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "Customer declaration internal serial number, UUID type",
          "readOnly": true
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "CoverageAgent": {
      "type": "object",
      "properties": {
        "agentCode": {
          "type": "string",
          "description": "Policy agent code"
        },
        "assignRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Performance rating, the maximum for the 1"
        },
        "coverageId": {
          "type": "string",
          "description": "Insurance model serial number, UUID type",
          "readOnly": true
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "The insurance type The internal serial number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "Payer": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "Policy role internal serial number, UUID type",
          "readOnly": true
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        },
        "relationToPH": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship between the insured and the insured, integer type<br>1 - self<br>2 - child<br>3 - spouse<br>10 - parent<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            7
          ]
        },
        "shareRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Payment ratio, up to 1"
        }
      }
    },
    "CollectionInput": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Currency, non empty<br>1 - CNY",
          "enum": [
            1
          ]
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "feeAmount": {
          "type": "number",
          "format": "double",
          "example": 2314,
          "description": "The actual amount of money"
        },
        "payMode": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "First time payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card",
          "enum": [
            1,
            2,
            3,
            30
          ]
        },
        "paymentPlatform": {
          "type": "string",
          "description": "Third party payment platform code",
          "enum": [
            "0",
            "11",
            "12",
            "21",
            "30",
            "31",
            "32",
            "99"
          ]
        },
        "thirdPtyPayNO": {
          "type": "string",
          "description": "Third party payment number"
        }
      }
    },
    "IssurancePolicyResult": {
      "type": "object",
      "properties": {
        "coverages": {
          "type": "array",
          "description": "Insurance list",
          "items": {
            "$ref": "#/definitions/CoverageCalculationResult"
          }
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Currency, non empty<br>1 - CNY",
          "enum": [
            1
          ]
        },
        "ePolicyDownloadUrl": {
          "type": "string",
          "description": "Electronic policy download address"
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Termination date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy effective date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Policy premium",
          "readOnly": true
        },
        "issueDate": {
          "type": "string",
          "format": "date-time",
          "description": "Underwriting date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "policyNumber": {
          "type": "string",
          "description": "Policy number"
        },
        "proposalNumber": {
          "type": "string",
          "description": "Proposal number"
        },
        "quotationCode": {
          "type": "string",
          "description": "Quotation calculation request number"
        },
        "riskStatus": {
          "type": "integer",
          "format": "int32",
          "description": "Policy status<br>0 - not inforce<br>1 - inforce<br>2 - lapsed<br>3 - terminated",
          "readOnly": true
        }
      }
    },
    "Insured": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "Policy role internal serial number, UUID type",
          "readOnly": true
        },
        "medicalIndi": {
          "type": "string",
          "example": "Y",
          "description": "Whether there is medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        },
        "relationToPH": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship between the insured and the insured, integer type<br>1 - self<br>2 - child<br>3 - spouse<br>10 - parent<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            7
          ]
        },
        "socialSecurityIndi": {
          "type": "string",
          "example": "Y",
          "description": "Whether there is social medical insurance coverage<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        }
      }
    },
    "CoverageAgentInput": {
      "type": "object",
      "properties": {
        "agentCode": {
          "type": "string",
          "description": "Policy agent code"
        },
        "assignRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Performance rating, the maximum for the 1"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TrusteeInput": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Customer temporary number, internal usage. Unique identify the customer for one request"
        }
      }
    },
    "PartyContact": {
      "type": "object",
      "properties": {
        "contact": {
          "type": "string",
          "example": "张三",
          "description": "Contact:"
        },
        "contactTel": {
          "type": "string",
          "example": "88888888",
          "description": "Contact Phone"
        },
        "email": {
          "type": "string",
          "example": "TestPerson14@126.com",
          "description": "E-mail:"
        },
        "fax": {
          "type": "string",
          "example": "88888887",
          "description": "Fax: (+86) {0}022 - 24143117{/0}"
        },
        "homeTel": {
          "type": "string",
          "example": "87654321",
          "description": "Home telephone"
        },
        "mobileTel": {
          "type": "string",
          "example": "15012345678",
          "description": "Phone number"
        },
        "officeTel": {
          "type": "string",
          "example": "88888888",
          "description": "Work phone"
        },
        "officeTelExt": {
          "type": "string",
          "example": "1234",
          "description": "Work phone extension"
        }
      }
    },
    "CoverageCalculationResult": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "premium": {
          "type": "number",
          "format": "double",
          "example": 2314,
          "description": "Insurance premium, non empty when calculate SA base on premium"
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "sumAssured": {
          "type": "number",
          "format": "double",
          "example": 100000,
          "description": "Insurance SA, non empty when calculate premium base on SA"
        },
        "unit": {
          "type": "number",
          "format": "double",
          "description": "Product unit, non empty when by unit insurance"
        }
      }
    },
    "IssuranceResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "messages": {
          "type": "array",
          "description": "Business failure reason description list node",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "policy": {
          "description": "Policy",
          "$ref": "#/definitions/IssurancePolicyResult"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        }
      }
    },
    "Person": {
      "type": "object",
      "properties": {
        "birthdate": {
          "type": "string",
          "format": "date-time",
          "example": "1980-01-01",
          "description": "Birthday, non-empty, date format: yyyy-MM-dd"
        },
        "certiCode": {
          "type": "string",
          "example": "1234567890",
          "description": "ID Number"
        },
        "certiEnd": {
          "type": "string",
          "format": "date-time",
          "example": "2019-12-31",
          "description": "Valid date, date format: yyyy-MM-dd"
        },
        "certiStart": {
          "type": "string",
          "format": "date-time",
          "example": "2000-01-01",
          "description": "Certificate start date, date format: yyyy-MM-dd"
        },
        "certiType": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "ID type, number type<br>1 - ID card<br>2 - military certificate<br>3 - passport<br>4 - birth certificate<br>9 - other",
          "enum": [
            1,
            2,
            3,
            4,
            9
          ]
        },
        "firstName": {
          "type": "string",
          "example": "三",
          "description": "First name"
        },
        "gender": {
          "type": "string",
          "example": "M",
          "description": "Sex, M - male;<br>F - female",
          "enum": [
            "M",
            "F"
          ]
        },
        "height": {
          "type": "number",
          "format": "double",
          "example": 175.3,
          "description": "Height e.g. 172cm"
        },
        "income": {
          "type": "integer",
          "format": "int64",
          "example": 200000,
          "description": "Annual income"
        },
        "lastName": {
          "type": "string",
          "example": "张",
          "description": "Last name of prospect"
        },
        "marriageStatus": {
          "type": "string",
          "example": "1",
          "description": "Marital status<br>1 - married<br>2 - unmarried<br>3 - divorced<br>4 - widowed<br>5 - separated",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6"
          ]
        },
        "midName": {
          "type": "string",
          "description": "Middle name of prospect"
        },
        "nationality": {
          "type": "string",
          "example": "7",
          "description": "Nationality<br>7 - China"
        },
        "occupationCode": {
          "type": "string",
          "example": "1",
          "description": "Professional code"
        },
        "preferredLifeIndi": {
          "type": "string",
          "example": "0",
          "description": "Is the preferred body<br>0 - N / A<br>1 - no"
        },
        "salutation": {
          "type": "string",
          "example": "1",
          "description": "Call<br>1 - 2",
          "enum": [
            "1",
            "2"
          ]
        },
        "smoking": {
          "type": "string",
          "example": "N",
          "description": "Whether smoking, Y-yes;<br>N =",
          "enum": [
            "Y",
            "N"
          ]
        },
        "weight": {
          "type": "number",
          "format": "double",
          "example": 70.25,
          "description": "Weight (kg)"
        }
      }
    },
    "PolicyPackageInput": {
      "type": "object",
      "properties": {
        "packageCode": {
          "type": "string",
          "description": "Product Product package code"
        },
        "unit": {
          "type": "number",
          "format": "double",
          "description": "Product package unit, the default is 1"
        }
      }
    },
    "Organization": {
      "type": "object",
      "properties": {
        "companyName": {
          "type": "string",
          "example": "xxxxxx",
          "description": "Name of company"
        },
        "countryCode": {
          "type": "string",
          "example": "156",
          "description": "Registered country, 156 - China"
        },
        "registerCode": {
          "type": "string",
          "example": "xxxx",
          "description": "Company ID"
        },
        "registerType": {
          "type": "string",
          "example": "1001",
          "description": "Company certificate type, 1001 - company registration number"
        }
      }
    },
    "CoverageInsured": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer",
          "format": "int32",
          "example": 25,
          "description": "Age"
        },
        "coverageId": {
          "type": "string",
          "description": "Insurance model serial number, UUID type",
          "readOnly": true
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "insuredPartyId": {
          "type": "string",
          "description": "Insured internal serial number, UUID type",
          "readOnly": true
        },
        "listId": {
          "type": "string",
          "description": "Insurance type insured internal serial number, UUID type",
          "readOnly": true
        },
        "occupationClass": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Occupation level"
        },
        "orderId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Insurance type of the insured person, the default is 1, if one plan applied by more than one insured (family policy or personal risk), the value is greater than 1"
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "CollectionPolicyInput": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "payerAccount": {
          "description": "Payment Method:",
          "$ref": "#/definitions/CollectionPayerAccountInput"
        },
        "proposalNumber": {
          "type": "string",
          "description": "Proposal number"
        }
      }
    },
    "BeneficiaryInput": {
      "type": "object",
      "properties": {
        "beneType": {
          "type": "string",
          "example": "2",
          "description": "Beneficiaries, 1 beneficiaries<br>2 - beneficiaries<br>3 - insured beneficiaries",
          "enum": [
            "1",
            "2",
            "3"
          ]
        },
        "designation": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship to the insured<br>1 - wife<br>2 - husband<br>3 - child<br>4 - father<br>5 - mother<br>6 - Grand father<br>7 - Grandparent<br>8 - brother<br>9 - sister<br>10 - uncle<br>11 - untie<br>12 - cousin<br>13 - nephew(niece)<br>14 - employer<br>15 - other<br>16 - self",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16
          ]
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "insuredPartySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Insured customer temporary number, request within the use of a unique identification request within a party"
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "Customer temporary number, internal usage. Unique identify the customer for one request"
        },
        "shareOrder": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Benefit order"
        },
        "shareRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Benefit ratio, up to 1"
        }
      }
    },
    "PolicyCustomer": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Customer address",
          "$ref": "#/definitions/Address"
        },
        "extendedProps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "Policy customer internal serial number, UUID type",
          "readOnly": true
        },
        "organization": {
          "description": "Organization customer information",
          "$ref": "#/definitions/Organization"
        },
        "partyContact": {
          "description": "Party contact information",
          "$ref": "#/definitions/PartyContact"
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "partyType": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The type of the party<br>1 - the personal party<br>2 - organization",
          "enum": [
            1,
            2
          ]
        },
        "person": {
          "description": "Personal customer information",
          "$ref": "#/definitions/Person"
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "CustomerDeclarationDetail": {
      "type": "object",
      "properties": {
        "declId": {
          "type": "integer",
          "format": "int64",
          "description": "Declaration item number, number type"
        },
        "declListId": {
          "type": "string",
          "description": "Customer declaration internal serial number, UUID type",
          "readOnly": true
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fill1": {
          "type": "string",
          "description": "Declaration item to answer the content 1, the character type, the content with the different items and different"
        },
        "fill10": {
          "type": "string",
          "description": "Declaration item to answer the content 10, character type, content with the different items and different"
        },
        "fill2": {
          "type": "string",
          "description": "Declaration the item to answer the content 2, the character type, the content with the different items and different"
        },
        "fill3": {
          "type": "string",
          "description": "Declaration item to answer the content  3, character type, content with the different items and different"
        },
        "fill4": {
          "type": "string",
          "description": "Declaration item to answer the content  4, the type of character, the contents of the different items with different"
        },
        "fill5": {
          "type": "string",
          "description": "Declaration item to answer the content  5, character type, content with the different items and different"
        },
        "fill6": {
          "type": "string",
          "description": "Declaration item to answer the content  6, character type, content with the different items and different"
        },
        "fill7": {
          "type": "string",
          "description": "Declaration item to answer the content  7, character type, content with the different items and different"
        },
        "fill8": {
          "type": "string",
          "description": "Declaration item to answer the content  8, character type, content with the different items and different"
        },
        "fill9": {
          "type": "string",
          "description": "Declaration item to answer the content  9, character type, content with the different items and different"
        },
        "listId": {
          "type": "string",
          "description": "Customer declaration details of the internal serial number, UUID type",
          "readOnly": true
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "PolicyHolder": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "Policy role internal serial number, UUID type",
          "readOnly": true
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        },
        "relationToLA": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship between the insured and the insured, the number type<br>1 - own<br>2 - parent<br>3 - spouse<br>10 - child<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            7
          ]
        }
      }
    },
    "PolicyHolderInput": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Customer temporary number, internal usage. Unique identify the customer for one request"
        },
        "relationToLA": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship between the insured and the insured, the number type<br>1 - own<br>2 - parent<br>3 - spouse<br>10 - child<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            7
          ]
        }
      }
    },
    "CustomerDeclarationDetailInput": {
      "type": "object",
      "properties": {
        "declId": {
          "type": "integer",
          "format": "int64",
          "description": "Declaration item number, number type"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fill1": {
          "type": "string",
          "description": "Declaration item to answer the content 1, the character type, the content with the different items and different"
        },
        "fill10": {
          "type": "string",
          "description": "Declaration item to answer the content 10, character type, content with the different items and different"
        },
        "fill2": {
          "type": "string",
          "description": "Declaration item to answer the content  2, the character type, the content with the different items and different"
        },
        "fill3": {
          "type": "string",
          "description": "Declaration item to answer the content  3, character type, content with the different items and different"
        },
        "fill4": {
          "type": "string",
          "description": "Declaration item to answer the content  4, the type of character, the contents of the different items with different"
        },
        "fill5": {
          "type": "string",
          "description": "Declaration item to answer the content  5, character type, content with the different items and different"
        },
        "fill6": {
          "type": "string",
          "description": "Declaration item to answer the content  6, character type, content with the different items and different"
        },
        "fill7": {
          "type": "string",
          "description": "Declaration item to answer the content  7, character type, content with the different items and different"
        },
        "fill8": {
          "type": "string",
          "description": "Declaration item to answer the content  8, character type, content with the different items and different"
        },
        "fill9": {
          "type": "string",
          "description": "Declaration item to answer the content  9, character type, content with the different items and different"
        }
      }
    },
    "ApplicationRequest": {
      "type": "object",
      "required": [
        "policy"
      ],
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        },
        "policy": {
          "description": "Policy",
          "$ref": "#/definitions/PolicyInput"
        }
      }
    },
    "CustomerDeclarationInput": {
      "type": "object",
      "properties": {
        "declarationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Declaration date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "details": {
          "type": "array",
          "description": "Declaration details",
          "items": {
            "$ref": "#/definitions/CustomerDeclarationDetailInput"
          }
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Customer temporary number, internal usage. Unique identify the customer for one request"
        }
      }
    },
    "PolicyInput": {
      "type": "object",
      "properties": {
        "applyDate": {
          "type": "string",
          "format": "date-time",
          "description": "Application date, non-empty, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "beneficiaries": {
          "type": "array",
          "description": "List of beneficiaries",
          "items": {
            "$ref": "#/definitions/BeneficiaryInput"
          }
        },
        "coverages": {
          "type": "array",
          "description": "Insurance list",
          "items": {
            "$ref": "#/definitions/CoverageInput"
          }
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Currency, non empty<br>1 - CNY",
          "enum": [
            1
          ]
        },
        "customers": {
          "type": "array",
          "description": "Policy customer list",
          "items": {
            "$ref": "#/definitions/PolicyCustomerInput"
          }
        },
        "declarations": {
          "type": "array",
          "description": "Customer declaration list",
          "items": {
            "$ref": "#/definitions/CustomerDeclarationInput"
          }
        },
        "deliverType": {
          "type": "string",
          "example": "M",
          "description": "Policy delivery method<br>H - by people<br>M - by mail",
          "enum": [
            "H",
            "M"
          ]
        },
        "expiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Termination date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy effective date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Policy premium",
          "readOnly": true
        },
        "insureds": {
          "type": "array",
          "description": "Policy issured list",
          "items": {
            "$ref": "#/definitions/InsuredInput"
          }
        },
        "insurerCode": {
          "type": "string",
          "description": "Insurance company code"
        },
        "payerAccounts": {
          "type": "array",
          "description": "Payment list",
          "items": {
            "$ref": "#/definitions/PayerAccountInput"
          }
        },
        "payers": {
          "type": "array",
          "description": "Payer list",
          "items": {
            "$ref": "#/definitions/PayerInput"
          }
        },
        "policyHolder": {
          "description": "Insured person",
          "$ref": "#/definitions/PolicyHolderInput"
        },
        "policyPackage": {
          "description": "Product package",
          "$ref": "#/definitions/PolicyPackageInput"
        },
        "preprintedProposalNumber": {
          "type": "string",
          "description": "Pre-printed proposal number"
        },
        "quotationCode": {
          "type": "string",
          "description": "Quotation calculation request number"
        },
        "salesChannelCode": {
          "type": "string",
          "description": "Sales channel code"
        },
        "serviceAgentCode": {
          "type": "string",
          "description": "Policy agent code"
        },
        "submissionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of submission, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "trustees": {
          "type": "array",
          "description": "List of trustees",
          "items": {
            "$ref": "#/definitions/TrusteeInput"
          }
        }
      }
    },
    "Trustee": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "listId": {
          "type": "string",
          "description": "Policy role internal serial number, UUID type",
          "readOnly": true
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        }
      }
    },
    "CoverageExtWaiverInput": {
      "type": "object",
      "properties": {
        "waivedSa": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ApplicationResponse": {
      "type": "object",
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "exceptions": {
          "type": "array",
          "description": "Exception information:",
          "items": {
            "type": "string"
          }
        },
        "messages": {
          "type": "array",
          "description": "Business failure reason description list node",
          "items": {
            "$ref": "#/definitions/GenericValidationResult"
          }
        },
        "policy": {
          "description": "Policy",
          "$ref": "#/definitions/ApplicationPolicyResult"
        },
        "result": {
          "type": "integer",
          "format": "int32",
          "description": "Request result<br>1 - business success<br>0 - business failure<br>-1 - application exception"
        }
      }
    },
    "ApplicationPolicyResult": {
      "type": "object",
      "properties": {
        "coverages": {
          "type": "array",
          "description": "Insurance list",
          "items": {
            "$ref": "#/definitions/CoverageCalculationResult"
          }
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Currency, non empty<br>1 - CNY",
          "enum": [
            1
          ]
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy effective date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Policy premium",
          "readOnly": true
        },
        "policyNumber": {
          "type": "string",
          "description": "Policy number"
        },
        "proposalNumber": {
          "type": "string",
          "description": "Proposal number"
        },
        "quotationCode": {
          "type": "string",
          "description": "Quotation calculation request number"
        }
      }
    },
    "IssuranceRequest": {
      "type": "object",
      "required": [
        "policy"
      ],
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "collection": {
          "description": "Charge information",
          "$ref": "#/definitions/CollectionInput"
        },
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        },
        "policy": {
          "description": "Policy",
          "$ref": "#/definitions/CollectionPolicyInput"
        }
      }
    },
    "Coverage": {
      "type": "object",
      "properties": {
        "chargePeriod": {
          "type": "string",
          "example": "2",
          "description": "Payment period type, non-empty<br>1 - single<br>2 - per year<br>3 to a certain age<br>4 - whole life",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "chargeYear": {
          "type": "integer",
          "format": "int32",
          "example": 20,
          "description": "Payment period, non-empty<br>0 - single;<br>by age: till which age or to pay the payment period: the pay years;<br>whole life is 100"
        },
        "coverageAgents": {
          "type": "array",
          "description": "List of performance sharing of agent",
          "items": {
            "$ref": "#/definitions/CoverageAgent"
          }
        },
        "coverageId": {
          "type": "string",
          "description": "Insurance model serial number, UUID type",
          "readOnly": true
        },
        "coveragePeriod": {
          "type": "string",
          "example": "1",
          "description": "Coverage type<br>1 - whole life<br>2 - per year<br>3 - Cover to a certain age<br>4 - per month<br>5 - per day",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "coverageSeriaId": {
          "type": "integer",
          "format": "int64",
          "description": "sum assured type temporary serial number, the request within the use of a unique identification within a certain kind of insurance"
        },
        "coverageYear": {
          "type": "integer",
          "format": "int32",
          "description": "Coverage Term. Meaning of this property is associated with property \"coveragePeriod\" (\"type\" for short). when covers whole life, value of this property is 9999;<br>and if type is 2, means years covered;<br>and if type is 3, means age when coverage expired;<br>and if type is 4, means months covered;<br>and if type is 5, means days covered."
        },
        "currentPremium": {
          "description": "The current period premium",
          "$ref": "#/definitions/CoveragePremium"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "insureds": {
          "type": "array",
          "description": "List of insured",
          "items": {
            "$ref": "#/definitions/CoverageInsured"
          }
        },
        "masterCoverageId": {
          "type": "string",
          "description": "Main serial number, UUID type",
          "readOnly": true
        },
        "nextPremium": {
          "$ref": "#/definitions/CoveragePremium"
        },
        "payPlans": {
          "type": "array",
          "description": "Payment plan list",
          "items": {
            "$ref": "#/definitions/PayPlan"
          }
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        },
        "productCode": {
          "type": "string",
          "description": "Product code"
        },
        "productId": {
          "type": "integer",
          "format": "int64",
          "description": "Product ID"
        },
        "waiverExt": {
          "description": "Waiver plan information",
          "$ref": "#/definitions/CoverageExtWaiver"
        }
      }
    },
    "BankAccount": {
      "type": "object",
      "properties": {
        "accoName": {
          "type": "string",
          "example": "张三",
          "description": "Account holder name"
        },
        "accountId": {
          "type": "string",
          "description": "Bank account internal serial number, UUID type",
          "readOnly": true
        },
        "accountType": {
          "type": "string",
          "example": "2",
          "description": "Account type, 2 debit card<br>8 - credit card",
          "enum": [
            "2",
            "8"
          ]
        },
        "bankAccount": {
          "type": "string",
          "example": "1111222233334444567",
          "description": "Bank Account"
        },
        "bankAccountCity": {
          "type": "string",
          "example": "Shanghai",
          "description": "The city, the bank account belongs to"
        },
        "bankAccountProvince": {
          "type": "string",
          "example": "Shanghai",
          "description": "The province, the bank account belongs to"
        },
        "bankCode": {
          "type": "string",
          "example": "test_bank",
          "description": "Bank code"
        },
        "branchCode": {
          "type": "string",
          "example": "1001",
          "description": "Branch code"
        },
        "creditCardType": {
          "type": "string",
          "example": "1",
          "description": "Credit card type, if not credit card, be empty<br>1 - Master<br>2 - Visa<br>3 - BCA<br>4 - JCB",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "debitCreditType": {
          "type": "string",
          "example": "0",
          "description": "Account use<br>0 - pay and use<br>1 - fee<br>2 - refund",
          "enum": [
            "0",
            "1",
            "2"
          ]
        },
        "expireDate": {
          "type": "string",
          "format": "date-time",
          "example": "10/2020",
          "description": "Account expiration date, MM / yyyy"
        },
        "issueBankName": {
          "type": "string",
          "example": "ICBC",
          "description": "Card issue bank"
        }
      }
    },
    "QuotationPolicyResult": {
      "type": "object",
      "properties": {
        "coverages": {
          "type": "array",
          "description": "Insurance list",
          "items": {
            "$ref": "#/definitions/CoverageCalculationResult"
          }
        },
        "currency": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Currency, non empty<br>1 - CNY",
          "enum": [
            1
          ]
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inceptionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Policy effective date, date format: yyyy-MM-dd'T'HH:mm:ss"
        },
        "installPrem": {
          "type": "number",
          "format": "double",
          "description": "Policy premium",
          "readOnly": true
        },
        "quotationCode": {
          "type": "string",
          "description": "Quotation calculation request number"
        }
      }
    },
    "PayerInput": {
      "type": "object",
      "properties": {
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "partySerialId": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Customer temporary number, internal usage. Unique identify the customer for one request"
        },
        "relationToPH": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship between the insured and the insured, integer type<br>1 - self<br>2 - child<br>3 - spouse<br>10 - parent<br>7 - others",
          "enum": [
            1,
            2,
            3,
            10,
            7
          ]
        },
        "shareRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Payment ratio, up to 1"
        }
      }
    },
    "CoverageExtWaiver": {
      "type": "object",
      "properties": {
        "waivedSa": {
          "type": "number",
          "format": "double",
          "description": "Exempt from the amount of insurance, 0 that a full exemption, not 0 that exemption from the specified amount, can not exceed the insurance premium is exempt"
        },
        "waiver": {
          "type": "string",
          "example": "N",
          "description": "Is waiver<br>Y - yes<br>N - no",
          "enum": [
            "Y",
            "N"
          ]
        }
      }
    },
    "CoveragePremium": {
      "type": "object",
      "properties": {
        "benefitLevel": {
          "type": "string",
          "description": "Plan benefit level, the product insured by the level of non-empty"
        },
        "paymentFreq": {
          "type": "string",
          "example": "1",
          "description": "Pay frequency<br>1 - yearly payment<br>2 - half yearly payment<br>3 - quarterly payment<br>4 - monthly payment<br>5 - single premium",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "premium": {
          "type": "number",
          "format": "double",
          "example": 2314,
          "description": "Insurance premium, non empty when calculate SA base on premium"
        },
        "sumAssured": {
          "type": "number",
          "format": "double",
          "example": 100000,
          "description": "Insurance SA, non empty when calculate premium base on SA"
        },
        "unit": {
          "type": "number",
          "format": "double",
          "description": "Product unit, non empty when by unit insurance"
        }
      }
    },
    "BankAccountInput": {
      "type": "object",
      "properties": {
        "accoName": {
          "type": "string",
          "example": "张三",
          "description": "Account holder name"
        },
        "accountType": {
          "type": "string",
          "example": "2",
          "description": "Account type, 2 debit card<br>8 - credit card",
          "enum": [
            "2",
            "8"
          ]
        },
        "bankAccount": {
          "type": "string",
          "example": "1111222233334444567",
          "description": "Bank Account"
        },
        "bankAccountCity": {
          "type": "string",
          "example": "Shanghai",
          "description": "The city, the bank account belongs to"
        },
        "bankAccountProvince": {
          "type": "string",
          "example": "Shanghai",
          "description": "The province, the bank account belongs to"
        },
        "bankCode": {
          "type": "string",
          "example": "test_bank",
          "description": "Bank code"
        },
        "creditCardType": {
          "type": "string",
          "example": "1",
          "description": "Credit card type, if not credit card, be empty<br>1 - Master<br>2 - Visa<br>3 - BCA<br>4 - JCB",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "debitCreditType": {
          "type": "string",
          "example": "0",
          "description": "Account use<br>0 - pay and use<br>1 - fee<br>2 - refund",
          "enum": [
            "0",
            "1",
            "2"
          ]
        },
        "expireDate": {
          "type": "string",
          "format": "date-time",
          "example": "10/2020",
          "description": "Account expiration date, MM / yyyy"
        },
        "issueBankName": {
          "type": "string",
          "example": "ICBC",
          "description": "Card issue bank"
        }
      }
    },
    "CollectionPayerAccountInput": {
      "type": "object",
      "properties": {
        "bankAccount": {
          "description": "The first premium bank account",
          "$ref": "#/definitions/BankAccountInput"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "paymentMethod": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PayerAccountInput": {
      "type": "object",
      "properties": {
        "bankAccount": {
          "description": "The first premium bank account",
          "$ref": "#/definitions/BankAccountInput"
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "nextBankAccount": {
          "description": "Renewal premium bank account",
          "$ref": "#/definitions/BankAccountInput"
        },
        "paymentMethod": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "First time payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card",
          "enum": [
            1,
            2,
            3,
            30
          ]
        },
        "paymentMethodNext": {
          "type": "integer",
          "format": "int32",
          "example": 3,
          "description": "Renewal payment method, integer<br>1 - cash<br>2 - check<br>3 - bank transfer<br>30 - credit card",
          "enum": [
            1,
            2,
            3,
            30
          ]
        }
      }
    },
    "QuotationRequest": {
      "type": "object",
      "required": [
        "policy"
      ],
      "properties": {
        "clientRequestId": {
          "type": "string",
          "description": "External transaction serial number"
        },
        "clientRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "External client request time"
        },
        "extObject": {
          "$ref": "#/definitions/GenericVO"
        },
        "policy": {
          "description": "Policy",
          "$ref": "#/definitions/PolicyInput"
        }
      }
    },
    "Beneficiary": {
      "type": "object",
      "properties": {
        "beneType": {
          "type": "string",
          "example": "2",
          "description": "Beneficiaries, 1 beneficiaries<br>2 - beneficiaries<br>3 - insured beneficiaries",
          "enum": [
            "1",
            "2",
            "3"
          ]
        },
        "designation": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The relationship to the insured. 1 - wife<br>2 - husband<br>3 - child<br>4 - father<br>5 - mother<br>6 - Grand father<br>7 - Grandparent<br>8 - brother<br>9 - sister<br>10 - uncle<br>11 - untie<br>12 - cousin<br>13 - nephew(niece)<br>14 - employer<br>15 - other<br>16 - self",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16
          ]
        },
        "extendedProps": {
          "type": "object",
          "description": "Extended information, Map type, Key / Value, should be character",
          "additionalProperties": {
            "type": "string"
          }
        },
        "insuredPartyId": {
          "type": "string",
          "description": "Internal ID for the beneficiary according to the issured , UUID type",
          "readOnly": true
        },
        "listId": {
          "type": "string",
          "description": "Policy role internal serial number, UUID type",
          "readOnly": true
        },
        "partyId": {
          "type": "string",
          "description": "Customer number, UUID type",
          "readOnly": true
        },
        "policyId": {
          "type": "string",
          "description": "Policy internal serial number, UUID type",
          "readOnly": true
        },
        "shareOrder": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Benefit order"
        },
        "shareRate": {
          "type": "number",
          "format": "double",
          "example": 1,
          "description": "Benefit ratio, up to 1"
        }
      }
    }
  },
  "paths": {
    "/packages": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get the Product package list",
        "description": "Obtain a Product package list according to the criteria, the Product package list contains the Product package of basic information",
        "operationId": "findPackagesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date, product sales before this date, format (YYYY-MM-DD)",
            "required": false,
            "type": "string"
          },
          {
            "name": "salesCategory",
            "in": "query",
            "description": "Product sales category can be multiple, if multiple are separated by commas (,)",
            "required": false,
            "type": "string"
          },
          {
            "name": "insurerIds",
            "in": "query",
            "description": "The list of insurance companies, can be multiple if multiple are separated by commas (,)",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackagesResponse"
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/packages/{packageCode}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get product package detail",
        "description": "According to the Product package of code, get a product of the details",
        "operationId": "findProductPackageUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "packageCode",
            "in": "path",
            "description": "Product package code",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PackageResponse"
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get the product list",
        "description": "Obtain the product list according to the condition, the product list contains the basic information of the product",
        "operationId": "findProductsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date, product sales before this date, format (YYYY-MM-DD)",
            "required": false,
            "type": "string"
          },
          {
            "name": "salesCategory",
            "in": "query",
            "description": "Product sales category can be multiple, if multiple are separated by commas (,)",
            "required": false,
            "type": "string"
          },
          {
            "name": "insurerIds",
            "in": "query",
            "description": "The list of insurance companies, can be multiple if multiple are separated by commas (,)",
            "required": false,
            "type": "string"
          },
          {
            "name": "isMainProduct",
            "in": "query",
            "description": "Whether it is the main plan",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductsResponse"
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/products/benefitIllustration": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Benefit Illustration",
        "description": "Product benefit illustration",
        "operationId": "illustrateCalculationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "illustrationRequest",
            "description": "Insurance premium calculation data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IllustrationRequest"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CalculatePremSAResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorised"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/products/benefitPremiumSA": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Calculate premium or SA",
        "description": "Calculate premium base on SA or calculate SA base on premium",
        "operationId": "benefitPremiumSAUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "calculateRequest",
            "description": "Insurance premium calculation data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalculatePremSARequest"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CalculatePremSAResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorised"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/products/salesCategory": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get sales products list",
        "description": "Get a list of all sales products for one tenant",
        "operationId": "findSalesCategoryUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SalesCategoryResponse"
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/products/{productCode}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get product detail",
        "description": "According to the product code, get the details of a product",
        "operationId": "findProductUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Product code",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductResponse"
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/proposals/application": {
      "post": {
        "tags": [
          "Proposal"
        ],
        "summary": "Insurance",
        "description": "Calculate the premium and verify the insurance underwriting rules, if passed, then generate an insurance policy number",
        "operationId": "applyUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationRequest"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorised"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/proposals/issurance": {
      "post": {
        "tags": [
          "Proposal"
        ],
        "summary": "Collection & Issue policy",
        "description": "After the premium collection, issue the policy",
        "operationId": "issueUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IssuranceRequest"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IssuranceResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorised"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/proposals/pre-verification": {
      "post": {
        "tags": [
          "Proposal"
        ],
        "summary": "Proposal pre-verification",
        "description": "Calculate the premium and verify the risk of insurance",
        "operationId": "quoteUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "Request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuotationRequest"
            }
          },
          {
            "name": "X-ebao-tenant-id",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QuotationResponse"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorised"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  }
}